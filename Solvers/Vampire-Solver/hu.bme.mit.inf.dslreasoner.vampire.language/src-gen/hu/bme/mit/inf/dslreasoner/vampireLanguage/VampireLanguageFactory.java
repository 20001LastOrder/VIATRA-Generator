/**
 * generated by Xtext 2.12.0
 */
package hu.bme.mit.inf.dslreasoner.vampireLanguage;

import org.eclipse.emf.ecore.EFactory;

/**
 * <!-- begin-user-doc -->
 * The <b>Factory</b> for the model.
 * It provides a create method for each non-abstract class of the model.
 * <!-- end-user-doc -->
 * @see hu.bme.mit.inf.dslreasoner.vampireLanguage.VampireLanguagePackage
 * @generated
 */
public interface VampireLanguageFactory extends EFactory
{
  /**
   * The singleton instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  VampireLanguageFactory eINSTANCE = hu.bme.mit.inf.dslreasoner.vampireLanguage.impl.VampireLanguageFactoryImpl.init();

  /**
   * Returns a new object of class '<em>Vampire Model</em>'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return a new object of class '<em>Vampire Model</em>'.
   * @generated
   */
  VampireModel createVampireModel();

  /**
   * Returns a new object of class '<em>VLS Comment</em>'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return a new object of class '<em>VLS Comment</em>'.
   * @generated
   */
  VLSComment createVLSComment();

  /**
   * Returns a new object of class '<em>VLS Function Declaration</em>'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return a new object of class '<em>VLS Function Declaration</em>'.
   * @generated
   */
  VLSFunctionDeclaration createVLSFunctionDeclaration();

  /**
   * Returns a new object of class '<em>VLS Fof Formula</em>'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return a new object of class '<em>VLS Fof Formula</em>'.
   * @generated
   */
  VLSFofFormula createVLSFofFormula();

  /**
   * Returns a new object of class '<em>VLS Annotation</em>'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return a new object of class '<em>VLS Annotation</em>'.
   * @generated
   */
  VLSAnnotation createVLSAnnotation();

  /**
   * Returns a new object of class '<em>VLS Term</em>'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return a new object of class '<em>VLS Term</em>'.
   * @generated
   */
  VLSTerm createVLSTerm();

  /**
   * Returns a new object of class '<em>VLS Fof Term</em>'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return a new object of class '<em>VLS Fof Term</em>'.
   * @generated
   */
  VLSFofTerm createVLSFofTerm();

  /**
   * Returns a new object of class '<em>VLS Variable</em>'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return a new object of class '<em>VLS Variable</em>'.
   * @generated
   */
  VLSVariable createVLSVariable();

  /**
   * Returns a new object of class '<em>VLS Function Fof</em>'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return a new object of class '<em>VLS Function Fof</em>'.
   * @generated
   */
  VLSFunctionFof createVLSFunctionFof();

  /**
   * Returns a new object of class '<em>VLS Defined Term</em>'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return a new object of class '<em>VLS Defined Term</em>'.
   * @generated
   */
  VLSDefinedTerm createVLSDefinedTerm();

  /**
   * Returns a new object of class '<em>VLS Equivalent</em>'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return a new object of class '<em>VLS Equivalent</em>'.
   * @generated
   */
  VLSEquivalent createVLSEquivalent();

  /**
   * Returns a new object of class '<em>VLS Implies</em>'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return a new object of class '<em>VLS Implies</em>'.
   * @generated
   */
  VLSImplies createVLSImplies();

  /**
   * Returns a new object of class '<em>VLS Rev Implies</em>'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return a new object of class '<em>VLS Rev Implies</em>'.
   * @generated
   */
  VLSRevImplies createVLSRevImplies();

  /**
   * Returns a new object of class '<em>VLS Xnor</em>'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return a new object of class '<em>VLS Xnor</em>'.
   * @generated
   */
  VLSXnor createVLSXnor();

  /**
   * Returns a new object of class '<em>VLS Nor</em>'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return a new object of class '<em>VLS Nor</em>'.
   * @generated
   */
  VLSNor createVLSNor();

  /**
   * Returns a new object of class '<em>VLS Nand</em>'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return a new object of class '<em>VLS Nand</em>'.
   * @generated
   */
  VLSNand createVLSNand();

  /**
   * Returns a new object of class '<em>VLS And</em>'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return a new object of class '<em>VLS And</em>'.
   * @generated
   */
  VLSAnd createVLSAnd();

  /**
   * Returns a new object of class '<em>VLS Or</em>'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return a new object of class '<em>VLS Or</em>'.
   * @generated
   */
  VLSOr createVLSOr();

  /**
   * Returns a new object of class '<em>VLS Universal Quantifier</em>'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return a new object of class '<em>VLS Universal Quantifier</em>'.
   * @generated
   */
  VLSUniversalQuantifier createVLSUniversalQuantifier();

  /**
   * Returns a new object of class '<em>VLS Existential Quantifier</em>'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return a new object of class '<em>VLS Existential Quantifier</em>'.
   * @generated
   */
  VLSExistentialQuantifier createVLSExistentialQuantifier();

  /**
   * Returns a new object of class '<em>VLS Unary Negation</em>'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return a new object of class '<em>VLS Unary Negation</em>'.
   * @generated
   */
  VLSUnaryNegation createVLSUnaryNegation();

  /**
   * Returns a new object of class '<em>VLS Inequality</em>'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return a new object of class '<em>VLS Inequality</em>'.
   * @generated
   */
  VLSInequality createVLSInequality();

  /**
   * Returns a new object of class '<em>VLS Equality</em>'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return a new object of class '<em>VLS Equality</em>'.
   * @generated
   */
  VLSEquality createVLSEquality();

  /**
   * Returns a new object of class '<em>VLS Assignment</em>'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return a new object of class '<em>VLS Assignment</em>'.
   * @generated
   */
  VLSAssignment createVLSAssignment();

  /**
   * Returns a new object of class '<em>VLS Function</em>'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return a new object of class '<em>VLS Function</em>'.
   * @generated
   */
  VLSFunction createVLSFunction();

  /**
   * Returns the package supported by this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the package supported by this factory.
   * @generated
   */
  VampireLanguagePackage getVampireLanguagePackage();

} //VampireLanguageFactory

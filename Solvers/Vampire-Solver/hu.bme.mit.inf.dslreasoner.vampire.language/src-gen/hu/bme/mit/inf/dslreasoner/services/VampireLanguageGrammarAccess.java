/*
 * generated by Xtext 2.12.0
 */
package hu.bme.mit.inf.dslreasoner.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class VampireLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	public class VampireModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.VampireLanguage.VampireModel");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cCommentsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cCommentsVLSCommentParserRuleCall_0_0 = (RuleCall)cCommentsAssignment_0.eContents().get(0);
		private final Assignment cFormulasAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cFormulasVLSFofFormulaParserRuleCall_1_0 = (RuleCall)cFormulasAssignment_1.eContents().get(0);
		
		////@@@@@@@@@@@
		////2 things TODO:
		////1. fix anotations (ln77)
		////2. can only use declared variables in formula (ln 158)
		////@@@@@@@@@@@
		//VampireModel:
		//	(comments+=VLSComment | formulas+=VLSFofFormula)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(comments+=VLSComment | formulas+=VLSFofFormula)*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//comments+=VLSComment
		public Assignment getCommentsAssignment_0() { return cCommentsAssignment_0; }
		
		//VLSComment
		public RuleCall getCommentsVLSCommentParserRuleCall_0_0() { return cCommentsVLSCommentParserRuleCall_0_0; }
		
		//formulas+=VLSFofFormula
		public Assignment getFormulasAssignment_1() { return cFormulasAssignment_1; }
		
		//VLSFofFormula
		public RuleCall getFormulasVLSFofFormulaParserRuleCall_1_0() { return cFormulasVLSFofFormulaParserRuleCall_1_0; }
	}
	public class VLSCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.VampireLanguage.VLSComment");
		private final Assignment cCommentAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCommentSINGLE_COMMENTTerminalRuleCall_0 = (RuleCall)cCommentAssignment.eContents().get(0);
		
		////terminal ID:  ( !('('|')'|'\r'|'\n') )+ ;
		////ANNOTATION_ID: ID;
		////terminal ANNOTATION_ID: LOWER_WORD_ID;
		////////////////////////////////////
		//// VLS types
		////////////////////////////////////
		//// <COMMENT>
		//VLSComment:
		//	comment=SINGLE_COMMENT;
		@Override public ParserRule getRule() { return rule; }
		
		//comment=SINGLE_COMMENT
		public Assignment getCommentAssignment() { return cCommentAssignment; }
		
		//SINGLE_COMMENT
		public RuleCall getCommentSINGLE_COMMENTTerminalRuleCall_0() { return cCommentSINGLE_COMMENTTerminalRuleCall_0; }
	}
	public class VLSFofFormulaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.VampireLanguage.VLSFofFormula");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFofKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cNameAlternatives_2_0 = (Alternatives)cNameAssignment_2.eContents().get(0);
		private final RuleCall cNameLOWER_WORD_IDTerminalRuleCall_2_0_0 = (RuleCall)cNameAlternatives_2_0.eContents().get(0);
		private final RuleCall cNameSIGNED_INT_IDTerminalRuleCall_2_0_1 = (RuleCall)cNameAlternatives_2_0.eContents().get(1);
		private final RuleCall cNameSINGLE_QUOTETerminalRuleCall_2_0_2 = (RuleCall)cNameAlternatives_2_0.eContents().get(2);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFofRoleAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFofRoleVLSRoleEnumRuleCall_4_0 = (RuleCall)cFofRoleAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cFofFormulaAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cFofFormulaVLSTermParserRuleCall_6_0 = (RuleCall)cFofFormulaAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cAnnotationsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cAnnotationsVLSAnnotationParserRuleCall_7_1_0 = (RuleCall)cAnnotationsAssignment_7_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cFullStopKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		////Formulas
		//VLSFofFormula:
		//	'fof' '(' name=(LOWER_WORD_ID | SIGNED_INT_ID | SINGLE_QUOTE) ',' fofRole=VLSRole ',' fofFormula=VLSTerm (','
		//	annotations=VLSAnnotation)? ')' '.';
		@Override public ParserRule getRule() { return rule; }
		
		//'fof' '(' name=(LOWER_WORD_ID | SIGNED_INT_ID | SINGLE_QUOTE) ',' fofRole=VLSRole ',' fofFormula=VLSTerm (','
		//annotations=VLSAnnotation)? ')' '.'
		public Group getGroup() { return cGroup; }
		
		//'fof'
		public Keyword getFofKeyword_0() { return cFofKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//name=(LOWER_WORD_ID | SIGNED_INT_ID | SINGLE_QUOTE)
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//(LOWER_WORD_ID | SIGNED_INT_ID | SINGLE_QUOTE)
		public Alternatives getNameAlternatives_2_0() { return cNameAlternatives_2_0; }
		
		//LOWER_WORD_ID
		public RuleCall getNameLOWER_WORD_IDTerminalRuleCall_2_0_0() { return cNameLOWER_WORD_IDTerminalRuleCall_2_0_0; }
		
		//SIGNED_INT_ID
		public RuleCall getNameSIGNED_INT_IDTerminalRuleCall_2_0_1() { return cNameSIGNED_INT_IDTerminalRuleCall_2_0_1; }
		
		//SINGLE_QUOTE
		public RuleCall getNameSINGLE_QUOTETerminalRuleCall_2_0_2() { return cNameSINGLE_QUOTETerminalRuleCall_2_0_2; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//fofRole=VLSRole
		public Assignment getFofRoleAssignment_4() { return cFofRoleAssignment_4; }
		
		//VLSRole
		public RuleCall getFofRoleVLSRoleEnumRuleCall_4_0() { return cFofRoleVLSRoleEnumRuleCall_4_0; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//fofFormula=VLSTerm
		public Assignment getFofFormulaAssignment_6() { return cFofFormulaAssignment_6; }
		
		//VLSTerm
		public RuleCall getFofFormulaVLSTermParserRuleCall_6_0() { return cFofFormulaVLSTermParserRuleCall_6_0; }
		
		//(',' annotations=VLSAnnotation)?
		public Group getGroup_7() { return cGroup_7; }
		
		//','
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }
		
		//annotations=VLSAnnotation
		public Assignment getAnnotationsAssignment_7_1() { return cAnnotationsAssignment_7_1; }
		
		//VLSAnnotation
		public RuleCall getAnnotationsVLSAnnotationParserRuleCall_7_1_0() { return cAnnotationsVLSAnnotationParserRuleCall_7_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
		
		//'.'
		public Keyword getFullStopKeyword_9() { return cFullStopKeyword_9; }
	}
	public class VLSAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.VampireLanguage.VLSAnnotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameLOWER_WORD_IDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cClosure_ruleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cClosure_ruleClosure_RuleParserRuleCall_1_0 = (RuleCall)cClosure_ruleAssignment_1.eContents().get(0);
		
		//// <ANNOTATION>
		////TODO POTENTIAL MAKE THE ANNOTATION STRUCTURE BETTER, Includes modifying terminal rule
		//// Not at all based on the website. based on what we think the output will be like 
		//VLSAnnotation:
		//	name=LOWER_WORD_ID? closure_rule=Closure_Rule;
		@Override public ParserRule getRule() { return rule; }
		
		//name=LOWER_WORD_ID? closure_rule=Closure_Rule
		public Group getGroup() { return cGroup; }
		
		//name=LOWER_WORD_ID?
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//LOWER_WORD_ID
		public RuleCall getNameLOWER_WORD_IDTerminalRuleCall_0_0() { return cNameLOWER_WORD_IDTerminalRuleCall_0_0; }
		
		//closure_rule=Closure_Rule
		public Assignment getClosure_ruleAssignment_1() { return cClosure_ruleAssignment_1; }
		
		//Closure_Rule
		public RuleCall getClosure_ruleClosure_RuleParserRuleCall_1_0() { return cClosure_ruleClosure_RuleParserRuleCall_1_0; }
	}
	public class Closure_RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.VampireLanguage.Closure_Rule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNameLOWER_WORD_IDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cVLSAnnotationParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Closure_Rule VLSAnnotation:
		//	name=LOWER_WORD_ID | '(' VLSAnnotation ')';
		@Override public ParserRule getRule() { return rule; }
		
		//name=LOWER_WORD_ID | '(' VLSAnnotation ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//name=LOWER_WORD_ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//LOWER_WORD_ID
		public RuleCall getNameLOWER_WORD_IDTerminalRuleCall_0_0() { return cNameLOWER_WORD_IDTerminalRuleCall_0_0; }
		
		//'(' VLSAnnotation ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//VLSAnnotation
		public RuleCall getVLSAnnotationParserRuleCall_1_1() { return cVLSAnnotationParserRuleCall_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class VLSTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.VampireLanguage.VLSTerm");
		private final RuleCall cVLSBinaryParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////////////////////////////////////
		//// VLS Terms
		////////////////////////////////////
		//VLSTerm:
		//	VLSBinary;
		@Override public ParserRule getRule() { return rule; }
		
		////( VLSLogic | VLSSequent)
		//VLSBinary
		public RuleCall getVLSBinaryParserRuleCall() { return cVLSBinaryParserRuleCall; }
	}
	public class VLSBinaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.VampireLanguage.VLSBinary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cVLSUnitaryFormulaParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Alternatives cAlternatives_1_0_0 = (Alternatives)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_0_0 = (Group)cAlternatives_1_0_0.eContents().get(0);
		private final Action cVLSEquivalentLeftAction_1_0_0_0_0 = (Action)cGroup_1_0_0_0.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignGreaterThanSignKeyword_1_0_0_0_1 = (Keyword)cGroup_1_0_0_0.eContents().get(1);
		private final Group cGroup_1_0_0_1 = (Group)cAlternatives_1_0_0.eContents().get(1);
		private final Action cVLSImpliesLeftAction_1_0_0_1_0 = (Action)cGroup_1_0_0_1.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1_0_0_1_1 = (Keyword)cGroup_1_0_0_1.eContents().get(1);
		private final Group cGroup_1_0_0_2 = (Group)cAlternatives_1_0_0.eContents().get(2);
		private final Action cVLSRevImpliesLeftAction_1_0_0_2_0 = (Action)cGroup_1_0_0_2.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1_0_0_2_1 = (Keyword)cGroup_1_0_0_2.eContents().get(1);
		private final Group cGroup_1_0_0_3 = (Group)cAlternatives_1_0_0.eContents().get(3);
		private final Action cVLSXnorLeftAction_1_0_0_3_0 = (Action)cGroup_1_0_0_3.eContents().get(0);
		private final Keyword cLessThanSignTildeGreaterThanSignKeyword_1_0_0_3_1 = (Keyword)cGroup_1_0_0_3.eContents().get(1);
		private final Group cGroup_1_0_0_4 = (Group)cAlternatives_1_0_0.eContents().get(4);
		private final Action cVLSNorLeftAction_1_0_0_4_0 = (Action)cGroup_1_0_0_4.eContents().get(0);
		private final Keyword cTildeVerticalLineKeyword_1_0_0_4_1 = (Keyword)cGroup_1_0_0_4.eContents().get(1);
		private final Group cGroup_1_0_0_5 = (Group)cAlternatives_1_0_0.eContents().get(5);
		private final Action cVLSNandLeftAction_1_0_0_5_0 = (Action)cGroup_1_0_0_5.eContents().get(0);
		private final Keyword cTildeAmpersandKeyword_1_0_0_5_1 = (Keyword)cGroup_1_0_0_5.eContents().get(1);
		private final Assignment cRightAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cRightVLSUnitaryFormulaParserRuleCall_1_0_1_0 = (RuleCall)cRightAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cVLSAndLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cAmpersandKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightVLSUnitaryFormulaParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Action cVLSOrLeftAction_1_2_0 = (Action)cGroup_1_2.eContents().get(0);
		private final Keyword cVerticalLineKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Assignment cRightAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cRightVLSUnitaryFormulaParserRuleCall_1_2_2_0 = (RuleCall)cRightAssignment_1_2_2.eContents().get(0);
		
		////*
		////VLSBinaryFormula
		//VLSBinary VLSTerm:
		//	VLSUnitaryFormula (({VLSEquivalent.left=current} "<=>" | {VLSImplies.left=current} "=>" |
		//	{VLSRevImplies.left=current} "<=" | {VLSXnor.left=current} "<~>" | {VLSNor.left=current} "~|" |
		//	{VLSNand.left=current} "~&") right=VLSUnitaryFormula | ({VLSAnd.left=current} '&' right=VLSUnitaryFormula)+
		//	| ({VLSOr.left=current} '|' right=VLSUnitaryFormula)+)?;
		@Override public ParserRule getRule() { return rule; }
		
		//VLSUnitaryFormula (({VLSEquivalent.left=current} "<=>" | {VLSImplies.left=current} "=>" | {VLSRevImplies.left=current}
		//"<=" | {VLSXnor.left=current} "<~>" | {VLSNor.left=current} "~|" | {VLSNand.left=current} "~&")
		//right=VLSUnitaryFormula | ({VLSAnd.left=current} '&' right=VLSUnitaryFormula)+ | ({VLSOr.left=current} '|'
		//right=VLSUnitaryFormula)+)?
		public Group getGroup() { return cGroup; }
		
		//VLSUnitaryFormula
		public RuleCall getVLSUnitaryFormulaParserRuleCall_0() { return cVLSUnitaryFormulaParserRuleCall_0; }
		
		//(({VLSEquivalent.left=current} "<=>" | {VLSImplies.left=current} "=>" | {VLSRevImplies.left=current} "<=" |
		//{VLSXnor.left=current} "<~>" | {VLSNor.left=current} "~|" | {VLSNand.left=current} "~&") right=VLSUnitaryFormula |
		//({VLSAnd.left=current} '&' right=VLSUnitaryFormula)+ | ({VLSOr.left=current} '|' right=VLSUnitaryFormula)+)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//({VLSEquivalent.left=current} "<=>" | {VLSImplies.left=current} "=>" | {VLSRevImplies.left=current} "<=" |
		//{VLSXnor.left=current} "<~>" | {VLSNor.left=current} "~|" | {VLSNand.left=current} "~&") right=VLSUnitaryFormula
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{VLSEquivalent.left=current} "<=>" | {VLSImplies.left=current} "=>" | {VLSRevImplies.left=current} "<=" |
		//{VLSXnor.left=current} "<~>" | {VLSNor.left=current} "~|" | {VLSNand.left=current} "~&"
		public Alternatives getAlternatives_1_0_0() { return cAlternatives_1_0_0; }
		
		//{VLSEquivalent.left=current} "<=>"
		public Group getGroup_1_0_0_0() { return cGroup_1_0_0_0; }
		
		//{VLSEquivalent.left=current}
		public Action getVLSEquivalentLeftAction_1_0_0_0_0() { return cVLSEquivalentLeftAction_1_0_0_0_0; }
		
		//"<=>"
		public Keyword getLessThanSignEqualsSignGreaterThanSignKeyword_1_0_0_0_1() { return cLessThanSignEqualsSignGreaterThanSignKeyword_1_0_0_0_1; }
		
		//{VLSImplies.left=current} "=>"
		public Group getGroup_1_0_0_1() { return cGroup_1_0_0_1; }
		
		//{VLSImplies.left=current}
		public Action getVLSImpliesLeftAction_1_0_0_1_0() { return cVLSImpliesLeftAction_1_0_0_1_0; }
		
		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_1_0_0_1_1() { return cEqualsSignGreaterThanSignKeyword_1_0_0_1_1; }
		
		//{VLSRevImplies.left=current} "<="
		public Group getGroup_1_0_0_2() { return cGroup_1_0_0_2; }
		
		//{VLSRevImplies.left=current}
		public Action getVLSRevImpliesLeftAction_1_0_0_2_0() { return cVLSRevImpliesLeftAction_1_0_0_2_0; }
		
		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_1_0_0_2_1() { return cLessThanSignEqualsSignKeyword_1_0_0_2_1; }
		
		//{VLSXnor.left=current} "<~>"
		public Group getGroup_1_0_0_3() { return cGroup_1_0_0_3; }
		
		//{VLSXnor.left=current}
		public Action getVLSXnorLeftAction_1_0_0_3_0() { return cVLSXnorLeftAction_1_0_0_3_0; }
		
		//"<~>"
		public Keyword getLessThanSignTildeGreaterThanSignKeyword_1_0_0_3_1() { return cLessThanSignTildeGreaterThanSignKeyword_1_0_0_3_1; }
		
		//{VLSNor.left=current} "~|"
		public Group getGroup_1_0_0_4() { return cGroup_1_0_0_4; }
		
		//{VLSNor.left=current}
		public Action getVLSNorLeftAction_1_0_0_4_0() { return cVLSNorLeftAction_1_0_0_4_0; }
		
		//"~|"
		public Keyword getTildeVerticalLineKeyword_1_0_0_4_1() { return cTildeVerticalLineKeyword_1_0_0_4_1; }
		
		//{VLSNand.left=current} "~&"
		public Group getGroup_1_0_0_5() { return cGroup_1_0_0_5; }
		
		//{VLSNand.left=current}
		public Action getVLSNandLeftAction_1_0_0_5_0() { return cVLSNandLeftAction_1_0_0_5_0; }
		
		//"~&"
		public Keyword getTildeAmpersandKeyword_1_0_0_5_1() { return cTildeAmpersandKeyword_1_0_0_5_1; }
		
		//right=VLSUnitaryFormula
		public Assignment getRightAssignment_1_0_1() { return cRightAssignment_1_0_1; }
		
		//VLSUnitaryFormula
		public RuleCall getRightVLSUnitaryFormulaParserRuleCall_1_0_1_0() { return cRightVLSUnitaryFormulaParserRuleCall_1_0_1_0; }
		
		//({VLSAnd.left=current} '&' right=VLSUnitaryFormula)+
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{VLSAnd.left=current}
		public Action getVLSAndLeftAction_1_1_0() { return cVLSAndLeftAction_1_1_0; }
		
		//'&'
		public Keyword getAmpersandKeyword_1_1_1() { return cAmpersandKeyword_1_1_1; }
		
		//right=VLSUnitaryFormula
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }
		
		//VLSUnitaryFormula
		public RuleCall getRightVLSUnitaryFormulaParserRuleCall_1_1_2_0() { return cRightVLSUnitaryFormulaParserRuleCall_1_1_2_0; }
		
		//({VLSOr.left=current} '|' right=VLSUnitaryFormula)+
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//{VLSOr.left=current}
		public Action getVLSOrLeftAction_1_2_0() { return cVLSOrLeftAction_1_2_0; }
		
		//'|'
		public Keyword getVerticalLineKeyword_1_2_1() { return cVerticalLineKeyword_1_2_1; }
		
		//right=VLSUnitaryFormula
		public Assignment getRightAssignment_1_2_2() { return cRightAssignment_1_2_2; }
		
		//VLSUnitaryFormula
		public RuleCall getRightVLSUnitaryFormulaParserRuleCall_1_2_2_0() { return cRightVLSUnitaryFormulaParserRuleCall_1_2_2_0; }
	}
	public class VLSUnitaryFormulaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.VampireLanguage.VLSUnitaryFormula");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVLSUniversalQuantifierParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVLSExistentialQuantifierParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVLSUnaryNegationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cVLSUnaryInfixParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cVLSTermParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		////VLSUnitaryFormula
		//VLSUnitaryFormula VLSTerm:
		//	VLSUniversalQuantifier | VLSExistentialQuantifier | VLSUnaryNegation | VLSUnaryInfix | '(' VLSTerm ')';
		@Override public ParserRule getRule() { return rule; }
		
		//VLSUniversalQuantifier | VLSExistentialQuantifier | VLSUnaryNegation | VLSUnaryInfix | '(' VLSTerm ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VLSUniversalQuantifier
		public RuleCall getVLSUniversalQuantifierParserRuleCall_0() { return cVLSUniversalQuantifierParserRuleCall_0; }
		
		//VLSExistentialQuantifier
		public RuleCall getVLSExistentialQuantifierParserRuleCall_1() { return cVLSExistentialQuantifierParserRuleCall_1; }
		
		//VLSUnaryNegation
		public RuleCall getVLSUnaryNegationParserRuleCall_2() { return cVLSUnaryNegationParserRuleCall_2; }
		
		//VLSUnaryInfix
		public RuleCall getVLSUnaryInfixParserRuleCall_3() { return cVLSUnaryInfixParserRuleCall_3; }
		
		//'(' VLSTerm ')'
		public Group getGroup_4() { return cGroup_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }
		
		//VLSTerm
		public RuleCall getVLSTermParserRuleCall_4_1() { return cVLSTermParserRuleCall_4_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_2() { return cRightParenthesisKeyword_4_2; }
	}
	public class VLSUniversalQuantifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.VampireLanguage.VLSUniversalQuantifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVLSUniversalQuantifierAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cVariablesAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cVariablesVLSVariableParserRuleCall_1_2_0 = (RuleCall)cVariablesAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cCommaKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cVariablesAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cVariablesVLSVariableParserRuleCall_1_3_1_0 = (RuleCall)cVariablesAssignment_1_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Keyword cColonKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Assignment cOperandAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperandVLSUnitaryFormulaParserRuleCall_2_0 = (RuleCall)cOperandAssignment_2.eContents().get(0);
		
		//VLSUniversalQuantifier VLSTerm:
		//	{VLSUniversalQuantifier} ("!" '[' variables+=VLSVariable (',' variables+=VLSVariable)* ']' ':')
		//	operand=VLSUnitaryFormula;
		@Override public ParserRule getRule() { return rule; }
		
		//{VLSUniversalQuantifier} ("!" '[' variables+=VLSVariable (',' variables+=VLSVariable)* ']' ':')
		//operand=VLSUnitaryFormula
		public Group getGroup() { return cGroup; }
		
		//{VLSUniversalQuantifier}
		public Action getVLSUniversalQuantifierAction_0() { return cVLSUniversalQuantifierAction_0; }
		
		//"!" '[' variables+=VLSVariable (',' variables+=VLSVariable)* ']' ':'
		public Group getGroup_1() { return cGroup_1; }
		
		//"!"
		public Keyword getExclamationMarkKeyword_1_0() { return cExclamationMarkKeyword_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_1() { return cLeftSquareBracketKeyword_1_1; }
		
		//variables+=VLSVariable
		public Assignment getVariablesAssignment_1_2() { return cVariablesAssignment_1_2; }
		
		//VLSVariable
		public RuleCall getVariablesVLSVariableParserRuleCall_1_2_0() { return cVariablesVLSVariableParserRuleCall_1_2_0; }
		
		//(',' variables+=VLSVariable)*
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//','
		public Keyword getCommaKeyword_1_3_0() { return cCommaKeyword_1_3_0; }
		
		//variables+=VLSVariable
		public Assignment getVariablesAssignment_1_3_1() { return cVariablesAssignment_1_3_1; }
		
		//VLSVariable
		public RuleCall getVariablesVLSVariableParserRuleCall_1_3_1_0() { return cVariablesVLSVariableParserRuleCall_1_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_4() { return cRightSquareBracketKeyword_1_4; }
		
		//':'
		public Keyword getColonKeyword_1_5() { return cColonKeyword_1_5; }
		
		//operand=VLSUnitaryFormula
		public Assignment getOperandAssignment_2() { return cOperandAssignment_2; }
		
		//VLSUnitaryFormula
		public RuleCall getOperandVLSUnitaryFormulaParserRuleCall_2_0() { return cOperandVLSUnitaryFormulaParserRuleCall_2_0; }
	}
	public class VLSExistentialQuantifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.VampireLanguage.VLSExistentialQuantifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVLSExistentialQuantifierAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cQuestionMarkKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cVariablesAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cVariablesVLSVariableParserRuleCall_1_2_0 = (RuleCall)cVariablesAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cCommaKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cVariablesAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cVariablesVLSVariableParserRuleCall_1_3_1_0 = (RuleCall)cVariablesAssignment_1_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Keyword cColonKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Assignment cOperandAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperandVLSUnitaryFormulaParserRuleCall_2_0 = (RuleCall)cOperandAssignment_2.eContents().get(0);
		
		//VLSExistentialQuantifier VLSTerm:
		//	{VLSExistentialQuantifier} ("?" '[' variables+=VLSVariable (',' variables+=VLSVariable)* ']' ':')
		//	operand=VLSUnitaryFormula;
		@Override public ParserRule getRule() { return rule; }
		
		//{VLSExistentialQuantifier} ("?" '[' variables+=VLSVariable (',' variables+=VLSVariable)* ']' ':')
		//operand=VLSUnitaryFormula
		public Group getGroup() { return cGroup; }
		
		//{VLSExistentialQuantifier}
		public Action getVLSExistentialQuantifierAction_0() { return cVLSExistentialQuantifierAction_0; }
		
		//"?" '[' variables+=VLSVariable (',' variables+=VLSVariable)* ']' ':'
		public Group getGroup_1() { return cGroup_1; }
		
		//"?"
		public Keyword getQuestionMarkKeyword_1_0() { return cQuestionMarkKeyword_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_1() { return cLeftSquareBracketKeyword_1_1; }
		
		//variables+=VLSVariable
		public Assignment getVariablesAssignment_1_2() { return cVariablesAssignment_1_2; }
		
		//VLSVariable
		public RuleCall getVariablesVLSVariableParserRuleCall_1_2_0() { return cVariablesVLSVariableParserRuleCall_1_2_0; }
		
		//(',' variables+=VLSVariable)*
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//','
		public Keyword getCommaKeyword_1_3_0() { return cCommaKeyword_1_3_0; }
		
		//variables+=VLSVariable
		public Assignment getVariablesAssignment_1_3_1() { return cVariablesAssignment_1_3_1; }
		
		//VLSVariable
		public RuleCall getVariablesVLSVariableParserRuleCall_1_3_1_0() { return cVariablesVLSVariableParserRuleCall_1_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_4() { return cRightSquareBracketKeyword_1_4; }
		
		//':'
		public Keyword getColonKeyword_1_5() { return cColonKeyword_1_5; }
		
		//operand=VLSUnitaryFormula
		public Assignment getOperandAssignment_2() { return cOperandAssignment_2; }
		
		//VLSUnitaryFormula
		public RuleCall getOperandVLSUnitaryFormulaParserRuleCall_2_0() { return cOperandVLSUnitaryFormulaParserRuleCall_2_0; }
	}
	public class VLSUnaryNegationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.VampireLanguage.VLSUnaryNegation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVLSUnaryNegationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTildeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOperandAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperandVLSUnitaryFormulaParserRuleCall_2_0 = (RuleCall)cOperandAssignment_2.eContents().get(0);
		
		//VLSUnaryNegation VLSTerm:
		//	{VLSUnaryNegation} '~' operand=VLSUnitaryFormula;
		@Override public ParserRule getRule() { return rule; }
		
		//{VLSUnaryNegation} '~' operand=VLSUnitaryFormula
		public Group getGroup() { return cGroup; }
		
		//{VLSUnaryNegation}
		public Action getVLSUnaryNegationAction_0() { return cVLSUnaryNegationAction_0; }
		
		//'~'
		public Keyword getTildeKeyword_1() { return cTildeKeyword_1; }
		
		//operand=VLSUnitaryFormula
		public Assignment getOperandAssignment_2() { return cOperandAssignment_2; }
		
		//VLSUnitaryFormula
		public RuleCall getOperandVLSUnitaryFormulaParserRuleCall_2_0() { return cOperandVLSUnitaryFormulaParserRuleCall_2_0; }
	}
	public class VLSUnaryInfixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.VampireLanguage.VLSUnaryInfix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cVLSFunctionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cVLSInequalityLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cVLSEqualityLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Group cGroup_1_0_2 = (Group)cAlternatives_1_0.eContents().get(2);
		private final Action cVLSAssignmentLeftAction_1_0_2_0 = (Action)cGroup_1_0_2.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1_0_2_1 = (Keyword)cGroup_1_0_2.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightVLSFunctionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//VLSUnaryInfix VLSTerm:
		//	VLSFunction (({VLSInequality.left=current} "!=" | {VLSEquality.left=current} "=" | {VLSAssignment.left=current} ":=")
		//	right=VLSFunction)?;
		@Override public ParserRule getRule() { return rule; }
		
		//VLSFunction (({VLSInequality.left=current} "!=" | {VLSEquality.left=current} "=" | {VLSAssignment.left=current} ":=")
		//right=VLSFunction)?
		public Group getGroup() { return cGroup; }
		
		//VLSFunction
		public RuleCall getVLSFunctionParserRuleCall_0() { return cVLSFunctionParserRuleCall_0; }
		
		//(({VLSInequality.left=current} "!=" | {VLSEquality.left=current} "=" | {VLSAssignment.left=current} ":=")
		//right=VLSFunction)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{VLSInequality.left=current} "!=" | {VLSEquality.left=current} "=" | {VLSAssignment.left=current} ":="
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{VLSInequality.left=current} "!="
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{VLSInequality.left=current}
		public Action getVLSInequalityLeftAction_1_0_0_0() { return cVLSInequalityLeftAction_1_0_0_0; }
		
		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_1_0_0_1() { return cExclamationMarkEqualsSignKeyword_1_0_0_1; }
		
		//{VLSEquality.left=current} "="
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{VLSEquality.left=current}
		public Action getVLSEqualityLeftAction_1_0_1_0() { return cVLSEqualityLeftAction_1_0_1_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1_0_1_1() { return cEqualsSignKeyword_1_0_1_1; }
		
		//{VLSAssignment.left=current} ":="
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }
		
		//{VLSAssignment.left=current}
		public Action getVLSAssignmentLeftAction_1_0_2_0() { return cVLSAssignmentLeftAction_1_0_2_0; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_1_0_2_1() { return cColonEqualsSignKeyword_1_0_2_1; }
		
		//right=VLSFunction
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//VLSFunction
		public RuleCall getRightVLSFunctionParserRuleCall_1_1_0() { return cRightVLSFunctionParserRuleCall_1_1_0; }
	}
	public class VLSFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.VampireLanguage.VLSFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVLSFunctionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cConstantAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cConstantAlternatives_1_0 = (Alternatives)cConstantAssignment_1.eContents().get(0);
		private final RuleCall cConstantLOWER_WORD_IDTerminalRuleCall_1_0_0 = (RuleCall)cConstantAlternatives_1_0.eContents().get(0);
		private final RuleCall cConstantSINGLE_QUOTETerminalRuleCall_1_0_1 = (RuleCall)cConstantAlternatives_1_0.eContents().get(1);
		private final RuleCall cConstantDOLLAR_IDTerminalRuleCall_1_0_2 = (RuleCall)cConstantAlternatives_1_0.eContents().get(2);
		private final RuleCall cConstantDOUBLE_DOLLAR_IDTerminalRuleCall_1_0_3 = (RuleCall)cConstantAlternatives_1_0.eContents().get(3);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTermsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTermsVLSFofTermParserRuleCall_2_1_0 = (RuleCall)cTermsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cTermsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cTermsVLSFofTermParserRuleCall_2_2_1_0 = (RuleCall)cTermsAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		///*
		//enum VLSDefinedFunctor:
		//		UMINUS='$uminus' | SUM='$sum' | DIFFERENCE='$difference' | PRODUCT='$product' | QUOTIENT='$quotient' | 
		//		QUOTIENT_E='$quotient_e' | QUOTIENT_T='$quotient_t' | QUOTIENT_F='$quotient_f' | REMAINDER_E='$remainder_e' |
		//		 REMAINDER_T='$remainder_t' | REMAINDER_F='$remainder_f' | FLOOR='$floor' | CEILING='$ceiling' |
		//		 TRUNCATE='$truncate' | ROUND='$round' | TO_INT='$to_int' | TO_RAT='$to_rat' | TO_REAL='$to_real'
		//    ;
		//*/ VLSFunction VLSTerm:
		//	{VLSFunction} constant=(LOWER_WORD_ID | SINGLE_QUOTE | DOLLAR_ID | DOUBLE_DOLLAR_ID) ('(' terms+=VLSFofTerm (','
		//	terms+=VLSFofTerm)* ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{VLSFunction} constant=(LOWER_WORD_ID | SINGLE_QUOTE | DOLLAR_ID | DOUBLE_DOLLAR_ID) ('(' terms+=VLSFofTerm (','
		//terms+=VLSFofTerm)* ')')?
		public Group getGroup() { return cGroup; }
		
		//{VLSFunction}
		public Action getVLSFunctionAction_0() { return cVLSFunctionAction_0; }
		
		//constant=(LOWER_WORD_ID | SINGLE_QUOTE | DOLLAR_ID | DOUBLE_DOLLAR_ID)
		public Assignment getConstantAssignment_1() { return cConstantAssignment_1; }
		
		//(LOWER_WORD_ID | SINGLE_QUOTE | DOLLAR_ID | DOUBLE_DOLLAR_ID)
		public Alternatives getConstantAlternatives_1_0() { return cConstantAlternatives_1_0; }
		
		//LOWER_WORD_ID
		public RuleCall getConstantLOWER_WORD_IDTerminalRuleCall_1_0_0() { return cConstantLOWER_WORD_IDTerminalRuleCall_1_0_0; }
		
		//SINGLE_QUOTE
		public RuleCall getConstantSINGLE_QUOTETerminalRuleCall_1_0_1() { return cConstantSINGLE_QUOTETerminalRuleCall_1_0_1; }
		
		//DOLLAR_ID
		public RuleCall getConstantDOLLAR_IDTerminalRuleCall_1_0_2() { return cConstantDOLLAR_IDTerminalRuleCall_1_0_2; }
		
		//DOUBLE_DOLLAR_ID
		public RuleCall getConstantDOUBLE_DOLLAR_IDTerminalRuleCall_1_0_3() { return cConstantDOUBLE_DOLLAR_IDTerminalRuleCall_1_0_3; }
		
		//('(' terms+=VLSFofTerm (',' terms+=VLSFofTerm)* ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//terms+=VLSFofTerm
		public Assignment getTermsAssignment_2_1() { return cTermsAssignment_2_1; }
		
		//VLSFofTerm
		public RuleCall getTermsVLSFofTermParserRuleCall_2_1_0() { return cTermsVLSFofTermParserRuleCall_2_1_0; }
		
		//(',' terms+=VLSFofTerm)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//terms+=VLSFofTerm
		public Assignment getTermsAssignment_2_2_1() { return cTermsAssignment_2_2_1; }
		
		//VLSFofTerm
		public RuleCall getTermsVLSFofTermParserRuleCall_2_2_1_0() { return cTermsVLSFofTermParserRuleCall_2_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
	}
	public class VLSFofTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.VampireLanguage.VLSFofTerm");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVLSVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVLSFunctionFofParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVLSDefinedTermParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//VLSFofTerm:
		//	VLSVariable | VLSFunctionFof | VLSDefinedTerm;
		@Override public ParserRule getRule() { return rule; }
		
		////(VLSVariable | VLSFunction | VLSTffConditional | VLSTffLet | VLSTffTuple)
		//VLSVariable | VLSFunctionFof | VLSDefinedTerm
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VLSVariable
		public RuleCall getVLSVariableParserRuleCall_0() { return cVLSVariableParserRuleCall_0; }
		
		//VLSFunctionFof
		public RuleCall getVLSFunctionFofParserRuleCall_1() { return cVLSFunctionFofParserRuleCall_1; }
		
		//VLSDefinedTerm
		public RuleCall getVLSDefinedTermParserRuleCall_2() { return cVLSDefinedTermParserRuleCall_2; }
	}
	public class VLSVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.VampireLanguage.VLSVariable");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameUPPER_WORD_IDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//VLSVariable:
		//	name=UPPER_WORD_ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=UPPER_WORD_ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//UPPER_WORD_ID
		public RuleCall getNameUPPER_WORD_IDTerminalRuleCall_0() { return cNameUPPER_WORD_IDTerminalRuleCall_0; }
	}
	public class VLSFunctionFofElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.VampireLanguage.VLSFunctionFof");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cNameAlternatives_0_0 = (Alternatives)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameLOWER_WORD_IDTerminalRuleCall_0_0_0 = (RuleCall)cNameAlternatives_0_0.eContents().get(0);
		private final RuleCall cNameSINGLE_QUOTETerminalRuleCall_0_0_1 = (RuleCall)cNameAlternatives_0_0.eContents().get(1);
		private final RuleCall cNameDOLLAR_IDTerminalRuleCall_0_0_2 = (RuleCall)cNameAlternatives_0_0.eContents().get(2);
		private final RuleCall cNameDOUBLE_DOLLAR_IDTerminalRuleCall_0_0_3 = (RuleCall)cNameAlternatives_0_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTermsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTermsVLSFofTermParserRuleCall_1_1_0 = (RuleCall)cTermsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cTermsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cTermsVLSFofTermParserRuleCall_1_2_1_0 = (RuleCall)cTermsAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//VLSFunctionFof:
		//	name=(LOWER_WORD_ID | SINGLE_QUOTE | DOLLAR_ID | DOUBLE_DOLLAR_ID) ('(' terms+=VLSFofTerm (',' terms+=VLSFofTerm)*
		//	')')?;
		@Override public ParserRule getRule() { return rule; }
		
		////? on next line causes warning
		////TODO might need replace DOLLAR_ID with enum rule 
		//name=(LOWER_WORD_ID | SINGLE_QUOTE | DOLLAR_ID | DOUBLE_DOLLAR_ID) ('(' terms+=VLSFofTerm (',' terms+=VLSFofTerm)* ')')?
		public Group getGroup() { return cGroup; }
		
		////? on next line causes warning
		////TODO might need replace DOLLAR_ID with enum rule 
		//name=(LOWER_WORD_ID | SINGLE_QUOTE | DOLLAR_ID | DOUBLE_DOLLAR_ID)
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//(LOWER_WORD_ID | SINGLE_QUOTE | DOLLAR_ID | DOUBLE_DOLLAR_ID)
		public Alternatives getNameAlternatives_0_0() { return cNameAlternatives_0_0; }
		
		//LOWER_WORD_ID
		public RuleCall getNameLOWER_WORD_IDTerminalRuleCall_0_0_0() { return cNameLOWER_WORD_IDTerminalRuleCall_0_0_0; }
		
		//SINGLE_QUOTE
		public RuleCall getNameSINGLE_QUOTETerminalRuleCall_0_0_1() { return cNameSINGLE_QUOTETerminalRuleCall_0_0_1; }
		
		//DOLLAR_ID
		public RuleCall getNameDOLLAR_IDTerminalRuleCall_0_0_2() { return cNameDOLLAR_IDTerminalRuleCall_0_0_2; }
		
		//DOUBLE_DOLLAR_ID
		public RuleCall getNameDOUBLE_DOLLAR_IDTerminalRuleCall_0_0_3() { return cNameDOUBLE_DOLLAR_IDTerminalRuleCall_0_0_3; }
		
		//('(' terms+=VLSFofTerm (',' terms+=VLSFofTerm)* ')')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//terms+=VLSFofTerm
		public Assignment getTermsAssignment_1_1() { return cTermsAssignment_1_1; }
		
		//VLSFofTerm
		public RuleCall getTermsVLSFofTermParserRuleCall_1_1_0() { return cTermsVLSFofTermParserRuleCall_1_1_0; }
		
		//(',' terms+=VLSFofTerm)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//','
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }
		
		//terms+=VLSFofTerm
		public Assignment getTermsAssignment_1_2_1() { return cTermsAssignment_1_2_1; }
		
		//VLSFofTerm
		public RuleCall getTermsVLSFofTermParserRuleCall_1_2_1_0() { return cTermsVLSFofTermParserRuleCall_1_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}
	public class VLSDefinedTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.VampireLanguage.VLSDefinedTerm");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cNameAlternatives_0 = (Alternatives)cNameAssignment.eContents().get(0);
		private final RuleCall cNameDOUBLE_QUOTETerminalRuleCall_0_0 = (RuleCall)cNameAlternatives_0.eContents().get(0);
		private final RuleCall cNameSIGNED_INT_IDTerminalRuleCall_0_1 = (RuleCall)cNameAlternatives_0.eContents().get(1);
		private final RuleCall cNameSIGNED_REAL_IDTerminalRuleCall_0_2 = (RuleCall)cNameAlternatives_0.eContents().get(2);
		private final RuleCall cNameSIGNED_RAT_IDTerminalRuleCall_0_3 = (RuleCall)cNameAlternatives_0.eContents().get(3);
		
		//VLSDefinedTerm:
		//	name=(DOUBLE_QUOTE | SIGNED_INT_ID | SIGNED_REAL_ID | SIGNED_RAT_ID);
		@Override public ParserRule getRule() { return rule; }
		
		//name=(DOUBLE_QUOTE | SIGNED_INT_ID | SIGNED_REAL_ID | SIGNED_RAT_ID)
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//(DOUBLE_QUOTE | SIGNED_INT_ID | SIGNED_REAL_ID | SIGNED_RAT_ID)
		public Alternatives getNameAlternatives_0() { return cNameAlternatives_0; }
		
		//DOUBLE_QUOTE
		public RuleCall getNameDOUBLE_QUOTETerminalRuleCall_0_0() { return cNameDOUBLE_QUOTETerminalRuleCall_0_0; }
		
		//SIGNED_INT_ID
		public RuleCall getNameSIGNED_INT_IDTerminalRuleCall_0_1() { return cNameSIGNED_INT_IDTerminalRuleCall_0_1; }
		
		//SIGNED_REAL_ID
		public RuleCall getNameSIGNED_REAL_IDTerminalRuleCall_0_2() { return cNameSIGNED_REAL_IDTerminalRuleCall_0_2; }
		
		//SIGNED_RAT_ID
		public RuleCall getNameSIGNED_RAT_IDTerminalRuleCall_0_3() { return cNameSIGNED_RAT_IDTerminalRuleCall_0_3; }
	}
	
	public class VLSRoleElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.VampireLanguage.VLSRole");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAxiomEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAxiomAxiomKeyword_0_0 = (Keyword)cAxiomEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cConjectureEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cConjectureConjectureKeyword_1_0 = (Keyword)cConjectureEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cHypothesisEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cHypothesisHypothesisKeyword_2_0 = (Keyword)cHypothesisEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDefinitionEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDefinitionDefinitionKeyword_3_0 = (Keyword)cDefinitionEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cAssumptionEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cAssumptionAssumptionKeyword_4_0 = (Keyword)cAssumptionEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cLemmaEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cLemmaLemmaKeyword_5_0 = (Keyword)cLemmaEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cTheoremEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cTheoremTheoremKeyword_6_0 = (Keyword)cTheoremEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cCorollaryEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cCorollaryCorollaryKeyword_7_0 = (Keyword)cCorollaryEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cNegated_conjectureEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cNegated_conjectureNegated_conjectureKeyword_8_0 = (Keyword)cNegated_conjectureEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cPlainEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cPlainPlainKeyword_9_0 = (Keyword)cPlainEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cTypeEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cTypeTypeKeyword_10_0 = (Keyword)cTypeEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cFi_domainEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cFi_domainFi_domainKeyword_11_0 = (Keyword)cFi_domainEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cFi_functorsEnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cFi_functorsFi_functorsKeyword_12_0 = (Keyword)cFi_functorsEnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cFi_predicatesEnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cFi_predicatesFi_predicatesKeyword_13_0 = (Keyword)cFi_predicatesEnumLiteralDeclaration_13.eContents().get(0);
		private final EnumLiteralDeclaration cUnknownEnumLiteralDeclaration_14 = (EnumLiteralDeclaration)cAlternatives.eContents().get(14);
		private final Keyword cUnknownUnknownKeyword_14_0 = (Keyword)cUnknownEnumLiteralDeclaration_14.eContents().get(0);
		
		//enum VLSRole:
		//	axiom | conjecture | hypothesis | definition |
		//	assumption | lemma | theorem | corollary | negated_conjecture |
		//	plain | type | fi_domain | fi_functors | fi_predicates | unknown;
		public EnumRule getRule() { return rule; }
		
		//axiom | conjecture | hypothesis | definition | assumption | lemma | theorem | corollary | negated_conjecture | plain |
		//type | fi_domain | fi_functors | fi_predicates | unknown
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//axiom
		public EnumLiteralDeclaration getAxiomEnumLiteralDeclaration_0() { return cAxiomEnumLiteralDeclaration_0; }
		
		//"axiom"
		public Keyword getAxiomAxiomKeyword_0_0() { return cAxiomAxiomKeyword_0_0; }
		
		//conjecture
		public EnumLiteralDeclaration getConjectureEnumLiteralDeclaration_1() { return cConjectureEnumLiteralDeclaration_1; }
		
		//"conjecture"
		public Keyword getConjectureConjectureKeyword_1_0() { return cConjectureConjectureKeyword_1_0; }
		
		//hypothesis
		public EnumLiteralDeclaration getHypothesisEnumLiteralDeclaration_2() { return cHypothesisEnumLiteralDeclaration_2; }
		
		//"hypothesis"
		public Keyword getHypothesisHypothesisKeyword_2_0() { return cHypothesisHypothesisKeyword_2_0; }
		
		//definition
		public EnumLiteralDeclaration getDefinitionEnumLiteralDeclaration_3() { return cDefinitionEnumLiteralDeclaration_3; }
		
		//"definition"
		public Keyword getDefinitionDefinitionKeyword_3_0() { return cDefinitionDefinitionKeyword_3_0; }
		
		//assumption
		public EnumLiteralDeclaration getAssumptionEnumLiteralDeclaration_4() { return cAssumptionEnumLiteralDeclaration_4; }
		
		//"assumption"
		public Keyword getAssumptionAssumptionKeyword_4_0() { return cAssumptionAssumptionKeyword_4_0; }
		
		//lemma
		public EnumLiteralDeclaration getLemmaEnumLiteralDeclaration_5() { return cLemmaEnumLiteralDeclaration_5; }
		
		//"lemma"
		public Keyword getLemmaLemmaKeyword_5_0() { return cLemmaLemmaKeyword_5_0; }
		
		//theorem
		public EnumLiteralDeclaration getTheoremEnumLiteralDeclaration_6() { return cTheoremEnumLiteralDeclaration_6; }
		
		//"theorem"
		public Keyword getTheoremTheoremKeyword_6_0() { return cTheoremTheoremKeyword_6_0; }
		
		//corollary
		public EnumLiteralDeclaration getCorollaryEnumLiteralDeclaration_7() { return cCorollaryEnumLiteralDeclaration_7; }
		
		//"corollary"
		public Keyword getCorollaryCorollaryKeyword_7_0() { return cCorollaryCorollaryKeyword_7_0; }
		
		//negated_conjecture
		public EnumLiteralDeclaration getNegated_conjectureEnumLiteralDeclaration_8() { return cNegated_conjectureEnumLiteralDeclaration_8; }
		
		//"negated_conjecture"
		public Keyword getNegated_conjectureNegated_conjectureKeyword_8_0() { return cNegated_conjectureNegated_conjectureKeyword_8_0; }
		
		//plain
		public EnumLiteralDeclaration getPlainEnumLiteralDeclaration_9() { return cPlainEnumLiteralDeclaration_9; }
		
		//"plain"
		public Keyword getPlainPlainKeyword_9_0() { return cPlainPlainKeyword_9_0; }
		
		//type
		public EnumLiteralDeclaration getTypeEnumLiteralDeclaration_10() { return cTypeEnumLiteralDeclaration_10; }
		
		//"type"
		public Keyword getTypeTypeKeyword_10_0() { return cTypeTypeKeyword_10_0; }
		
		//fi_domain
		public EnumLiteralDeclaration getFi_domainEnumLiteralDeclaration_11() { return cFi_domainEnumLiteralDeclaration_11; }
		
		//"fi_domain"
		public Keyword getFi_domainFi_domainKeyword_11_0() { return cFi_domainFi_domainKeyword_11_0; }
		
		//fi_functors
		public EnumLiteralDeclaration getFi_functorsEnumLiteralDeclaration_12() { return cFi_functorsEnumLiteralDeclaration_12; }
		
		//"fi_functors"
		public Keyword getFi_functorsFi_functorsKeyword_12_0() { return cFi_functorsFi_functorsKeyword_12_0; }
		
		//fi_predicates
		public EnumLiteralDeclaration getFi_predicatesEnumLiteralDeclaration_13() { return cFi_predicatesEnumLiteralDeclaration_13; }
		
		//"fi_predicates"
		public Keyword getFi_predicatesFi_predicatesKeyword_13_0() { return cFi_predicatesFi_predicatesKeyword_13_0; }
		
		//unknown
		public EnumLiteralDeclaration getUnknownEnumLiteralDeclaration_14() { return cUnknownEnumLiteralDeclaration_14; }
		
		//"unknown"
		public Keyword getUnknownUnknownKeyword_14_0() { return cUnknownUnknownKeyword_14_0; }
	}
	
	private final VampireModelElements pVampireModel;
	private final TerminalRule tALPHA_NUMERIC;
	private final TerminalRule tUPPER_WORD_ID;
	private final TerminalRule tLOWER_WORD_ID;
	private final TerminalRule tDOUBLE_QUOTE;
	private final TerminalRule tSINGLE_QUOTE;
	private final TerminalRule tDOLLAR_ID;
	private final TerminalRule tDOUBLE_DOLLAR_ID;
	private final TerminalRule tUNSIGNED_INT_ID;
	private final TerminalRule tSIGNED_INT_ID;
	private final TerminalRule tUNSIGNED_REAL_FRAC_ID;
	private final TerminalRule tUNSIGNED_REAL_EXP_ID;
	private final TerminalRule tSIGNED_REAL_ID;
	private final TerminalRule tUNSIGNED_RAT_ID;
	private final TerminalRule tSIGNED_RAT_ID;
	private final TerminalRule tANY_OTHER;
	private final TerminalRule tSINGLE_COMMENT;
	private final VLSCommentElements pVLSComment;
	private final VLSFofFormulaElements pVLSFofFormula;
	private final VLSRoleElements eVLSRole;
	private final VLSAnnotationElements pVLSAnnotation;
	private final Closure_RuleElements pClosure_Rule;
	private final VLSTermElements pVLSTerm;
	private final VLSBinaryElements pVLSBinary;
	private final VLSUnitaryFormulaElements pVLSUnitaryFormula;
	private final VLSUniversalQuantifierElements pVLSUniversalQuantifier;
	private final VLSExistentialQuantifierElements pVLSExistentialQuantifier;
	private final VLSUnaryNegationElements pVLSUnaryNegation;
	private final VLSUnaryInfixElements pVLSUnaryInfix;
	private final VLSFunctionElements pVLSFunction;
	private final VLSFofTermElements pVLSFofTerm;
	private final VLSVariableElements pVLSVariable;
	private final VLSFunctionFofElements pVLSFunctionFof;
	private final VLSDefinedTermElements pVLSDefinedTerm;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public VampireLanguageGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pVampireModel = new VampireModelElements();
		this.tALPHA_NUMERIC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.VampireLanguage.ALPHA_NUMERIC");
		this.tUPPER_WORD_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.VampireLanguage.UPPER_WORD_ID");
		this.tLOWER_WORD_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.VampireLanguage.LOWER_WORD_ID");
		this.tDOUBLE_QUOTE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.VampireLanguage.DOUBLE_QUOTE");
		this.tSINGLE_QUOTE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.VampireLanguage.SINGLE_QUOTE");
		this.tDOLLAR_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.VampireLanguage.DOLLAR_ID");
		this.tDOUBLE_DOLLAR_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.VampireLanguage.DOUBLE_DOLLAR_ID");
		this.tUNSIGNED_INT_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.VampireLanguage.UNSIGNED_INT_ID");
		this.tSIGNED_INT_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.VampireLanguage.SIGNED_INT_ID");
		this.tUNSIGNED_REAL_FRAC_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.VampireLanguage.UNSIGNED_REAL_FRAC_ID");
		this.tUNSIGNED_REAL_EXP_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.VampireLanguage.UNSIGNED_REAL_EXP_ID");
		this.tSIGNED_REAL_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.VampireLanguage.SIGNED_REAL_ID");
		this.tUNSIGNED_RAT_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.VampireLanguage.UNSIGNED_RAT_ID");
		this.tSIGNED_RAT_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.VampireLanguage.SIGNED_RAT_ID");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.VampireLanguage.ANY_OTHER");
		this.tSINGLE_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.VampireLanguage.SINGLE_COMMENT");
		this.pVLSComment = new VLSCommentElements();
		this.pVLSFofFormula = new VLSFofFormulaElements();
		this.eVLSRole = new VLSRoleElements();
		this.pVLSAnnotation = new VLSAnnotationElements();
		this.pClosure_Rule = new Closure_RuleElements();
		this.pVLSTerm = new VLSTermElements();
		this.pVLSBinary = new VLSBinaryElements();
		this.pVLSUnitaryFormula = new VLSUnitaryFormulaElements();
		this.pVLSUniversalQuantifier = new VLSUniversalQuantifierElements();
		this.pVLSExistentialQuantifier = new VLSExistentialQuantifierElements();
		this.pVLSUnaryNegation = new VLSUnaryNegationElements();
		this.pVLSUnaryInfix = new VLSUnaryInfixElements();
		this.pVLSFunction = new VLSFunctionElements();
		this.pVLSFofTerm = new VLSFofTermElements();
		this.pVLSVariable = new VLSVariableElements();
		this.pVLSFunctionFof = new VLSFunctionFofElements();
		this.pVLSDefinedTerm = new VLSDefinedTermElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("hu.bme.mit.inf.dslreasoner.VampireLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////@@@@@@@@@@@
	////2 things TODO:
	////1. fix anotations (ln77)
	////2. can only use declared variables in formula (ln 158)
	////@@@@@@@@@@@
	//VampireModel:
	//	(comments+=VLSComment | formulas+=VLSFofFormula)*;
	public VampireModelElements getVampireModelAccess() {
		return pVampireModel;
	}
	
	public ParserRule getVampireModelRule() {
		return getVampireModelAccess().getRule();
	}
	
	//terminal ALPHA_NUMERIC:
	//	'a'..'z' | 'A'..'Z' | '0'..'9' | '_';
	public TerminalRule getALPHA_NUMERICRule() {
		return tALPHA_NUMERIC;
	}
	
	//terminal UPPER_WORD_ID:
	//	'A'..'Z' ALPHA_NUMERIC*;
	public TerminalRule getUPPER_WORD_IDRule() {
		return tUPPER_WORD_ID;
	}
	
	//terminal LOWER_WORD_ID:
	//	'a'..'z' ALPHA_NUMERIC*;
	public TerminalRule getLOWER_WORD_IDRule() {
		return tLOWER_WORD_ID;
	}
	
	//terminal DOUBLE_QUOTE:
	//	'"' ('\\' ('"' | '\\') | !('\\' | '"'))* '"';
	public TerminalRule getDOUBLE_QUOTERule() {
		return tDOUBLE_QUOTE;
	}
	
	//terminal SINGLE_QUOTE:
	//	"'" ('\\' ("'" | '\\') | !('\\' | "'"))+ "'";
	public TerminalRule getSINGLE_QUOTERule() {
		return tSINGLE_QUOTE;
	}
	
	//terminal DOLLAR_ID:
	//	'$' LOWER_WORD_ID;
	public TerminalRule getDOLLAR_IDRule() {
		return tDOLLAR_ID;
	}
	
	//terminal DOUBLE_DOLLAR_ID:
	//	'$$' LOWER_WORD_ID;
	public TerminalRule getDOUBLE_DOLLAR_IDRule() {
		return tDOUBLE_DOLLAR_ID;
	}
	
	//terminal UNSIGNED_INT_ID:
	//	'0' | '1'..'9' INT?;
	public TerminalRule getUNSIGNED_INT_IDRule() {
		return tUNSIGNED_INT_ID;
	}
	
	//terminal SIGNED_INT_ID:
	//	('+' | '-')? UNSIGNED_INT_ID;
	public TerminalRule getSIGNED_INT_IDRule() {
		return tSIGNED_INT_ID;
	}
	
	//terminal UNSIGNED_REAL_FRAC_ID:
	//	UNSIGNED_INT_ID '.' INT;
	public TerminalRule getUNSIGNED_REAL_FRAC_IDRule() {
		return tUNSIGNED_REAL_FRAC_ID;
	}
	
	//terminal UNSIGNED_REAL_EXP_ID:
	//	(UNSIGNED_INT_ID | UNSIGNED_REAL_FRAC_ID) 'Ee' ('+' | '-')? INT;
	public TerminalRule getUNSIGNED_REAL_EXP_IDRule() {
		return tUNSIGNED_REAL_EXP_ID;
	}
	
	//terminal SIGNED_REAL_ID:
	//	('+' | '-')? (UNSIGNED_REAL_FRAC_ID | UNSIGNED_REAL_EXP_ID);
	public TerminalRule getSIGNED_REAL_IDRule() {
		return tSIGNED_REAL_ID;
	}
	
	//terminal UNSIGNED_RAT_ID:
	//	UNSIGNED_INT_ID '/' '1'..'9' INT?;
	public TerminalRule getUNSIGNED_RAT_IDRule() {
		return tUNSIGNED_RAT_ID;
	}
	
	//terminal SIGNED_RAT_ID:
	//	('+' | '-')? UNSIGNED_RAT_ID;
	public TerminalRule getSIGNED_RAT_IDRule() {
		return tSIGNED_RAT_ID;
	}
	
	//terminal ANY_OTHER:
	//	'%' !('\n' | '\r')* '\r';
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	}
	
	//terminal SINGLE_COMMENT:
	//	ANY_OTHER;
	public TerminalRule getSINGLE_COMMENTRule() {
		return tSINGLE_COMMENT;
	}
	
	////terminal ID:  ( !('('|')'|'\r'|'\n') )+ ;
	////ANNOTATION_ID: ID;
	////terminal ANNOTATION_ID: LOWER_WORD_ID;
	////////////////////////////////////
	//// VLS types
	////////////////////////////////////
	//// <COMMENT>
	//VLSComment:
	//	comment=SINGLE_COMMENT;
	public VLSCommentElements getVLSCommentAccess() {
		return pVLSComment;
	}
	
	public ParserRule getVLSCommentRule() {
		return getVLSCommentAccess().getRule();
	}
	
	////Formulas
	//VLSFofFormula:
	//	'fof' '(' name=(LOWER_WORD_ID | SIGNED_INT_ID | SINGLE_QUOTE) ',' fofRole=VLSRole ',' fofFormula=VLSTerm (','
	//	annotations=VLSAnnotation)? ')' '.';
	public VLSFofFormulaElements getVLSFofFormulaAccess() {
		return pVLSFofFormula;
	}
	
	public ParserRule getVLSFofFormulaRule() {
		return getVLSFofFormulaAccess().getRule();
	}
	
	//enum VLSRole:
	//	axiom | conjecture | hypothesis | definition |
	//	assumption | lemma | theorem | corollary | negated_conjecture |
	//	plain | type | fi_domain | fi_functors | fi_predicates | unknown;
	public VLSRoleElements getVLSRoleAccess() {
		return eVLSRole;
	}
	
	public EnumRule getVLSRoleRule() {
		return getVLSRoleAccess().getRule();
	}
	
	//// <ANNOTATION>
	////TODO POTENTIAL MAKE THE ANNOTATION STRUCTURE BETTER, Includes modifying terminal rule
	//// Not at all based on the website. based on what we think the output will be like 
	//VLSAnnotation:
	//	name=LOWER_WORD_ID? closure_rule=Closure_Rule;
	public VLSAnnotationElements getVLSAnnotationAccess() {
		return pVLSAnnotation;
	}
	
	public ParserRule getVLSAnnotationRule() {
		return getVLSAnnotationAccess().getRule();
	}
	
	//Closure_Rule VLSAnnotation:
	//	name=LOWER_WORD_ID | '(' VLSAnnotation ')';
	public Closure_RuleElements getClosure_RuleAccess() {
		return pClosure_Rule;
	}
	
	public ParserRule getClosure_RuleRule() {
		return getClosure_RuleAccess().getRule();
	}
	
	////////////////////////////////////
	//// VLS Terms
	////////////////////////////////////
	//VLSTerm:
	//	VLSBinary;
	public VLSTermElements getVLSTermAccess() {
		return pVLSTerm;
	}
	
	public ParserRule getVLSTermRule() {
		return getVLSTermAccess().getRule();
	}
	
	////*
	////VLSBinaryFormula
	//VLSBinary VLSTerm:
	//	VLSUnitaryFormula (({VLSEquivalent.left=current} "<=>" | {VLSImplies.left=current} "=>" |
	//	{VLSRevImplies.left=current} "<=" | {VLSXnor.left=current} "<~>" | {VLSNor.left=current} "~|" |
	//	{VLSNand.left=current} "~&") right=VLSUnitaryFormula | ({VLSAnd.left=current} '&' right=VLSUnitaryFormula)+
	//	| ({VLSOr.left=current} '|' right=VLSUnitaryFormula)+)?;
	public VLSBinaryElements getVLSBinaryAccess() {
		return pVLSBinary;
	}
	
	public ParserRule getVLSBinaryRule() {
		return getVLSBinaryAccess().getRule();
	}
	
	////VLSUnitaryFormula
	//VLSUnitaryFormula VLSTerm:
	//	VLSUniversalQuantifier | VLSExistentialQuantifier | VLSUnaryNegation | VLSUnaryInfix | '(' VLSTerm ')';
	public VLSUnitaryFormulaElements getVLSUnitaryFormulaAccess() {
		return pVLSUnitaryFormula;
	}
	
	public ParserRule getVLSUnitaryFormulaRule() {
		return getVLSUnitaryFormulaAccess().getRule();
	}
	
	//VLSUniversalQuantifier VLSTerm:
	//	{VLSUniversalQuantifier} ("!" '[' variables+=VLSVariable (',' variables+=VLSVariable)* ']' ':')
	//	operand=VLSUnitaryFormula;
	public VLSUniversalQuantifierElements getVLSUniversalQuantifierAccess() {
		return pVLSUniversalQuantifier;
	}
	
	public ParserRule getVLSUniversalQuantifierRule() {
		return getVLSUniversalQuantifierAccess().getRule();
	}
	
	//VLSExistentialQuantifier VLSTerm:
	//	{VLSExistentialQuantifier} ("?" '[' variables+=VLSVariable (',' variables+=VLSVariable)* ']' ':')
	//	operand=VLSUnitaryFormula;
	public VLSExistentialQuantifierElements getVLSExistentialQuantifierAccess() {
		return pVLSExistentialQuantifier;
	}
	
	public ParserRule getVLSExistentialQuantifierRule() {
		return getVLSExistentialQuantifierAccess().getRule();
	}
	
	//VLSUnaryNegation VLSTerm:
	//	{VLSUnaryNegation} '~' operand=VLSUnitaryFormula;
	public VLSUnaryNegationElements getVLSUnaryNegationAccess() {
		return pVLSUnaryNegation;
	}
	
	public ParserRule getVLSUnaryNegationRule() {
		return getVLSUnaryNegationAccess().getRule();
	}
	
	//VLSUnaryInfix VLSTerm:
	//	VLSFunction (({VLSInequality.left=current} "!=" | {VLSEquality.left=current} "=" | {VLSAssignment.left=current} ":=")
	//	right=VLSFunction)?;
	public VLSUnaryInfixElements getVLSUnaryInfixAccess() {
		return pVLSUnaryInfix;
	}
	
	public ParserRule getVLSUnaryInfixRule() {
		return getVLSUnaryInfixAccess().getRule();
	}
	
	///*
	//enum VLSDefinedFunctor:
	//		UMINUS='$uminus' | SUM='$sum' | DIFFERENCE='$difference' | PRODUCT='$product' | QUOTIENT='$quotient' | 
	//		QUOTIENT_E='$quotient_e' | QUOTIENT_T='$quotient_t' | QUOTIENT_F='$quotient_f' | REMAINDER_E='$remainder_e' |
	//		 REMAINDER_T='$remainder_t' | REMAINDER_F='$remainder_f' | FLOOR='$floor' | CEILING='$ceiling' |
	//		 TRUNCATE='$truncate' | ROUND='$round' | TO_INT='$to_int' | TO_RAT='$to_rat' | TO_REAL='$to_real'
	//    ;
	//*/ VLSFunction VLSTerm:
	//	{VLSFunction} constant=(LOWER_WORD_ID | SINGLE_QUOTE | DOLLAR_ID | DOUBLE_DOLLAR_ID) ('(' terms+=VLSFofTerm (','
	//	terms+=VLSFofTerm)* ')')?;
	public VLSFunctionElements getVLSFunctionAccess() {
		return pVLSFunction;
	}
	
	public ParserRule getVLSFunctionRule() {
		return getVLSFunctionAccess().getRule();
	}
	
	//VLSFofTerm:
	//	VLSVariable | VLSFunctionFof | VLSDefinedTerm;
	public VLSFofTermElements getVLSFofTermAccess() {
		return pVLSFofTerm;
	}
	
	public ParserRule getVLSFofTermRule() {
		return getVLSFofTermAccess().getRule();
	}
	
	//VLSVariable:
	//	name=UPPER_WORD_ID;
	public VLSVariableElements getVLSVariableAccess() {
		return pVLSVariable;
	}
	
	public ParserRule getVLSVariableRule() {
		return getVLSVariableAccess().getRule();
	}
	
	//VLSFunctionFof:
	//	name=(LOWER_WORD_ID | SINGLE_QUOTE | DOLLAR_ID | DOUBLE_DOLLAR_ID) ('(' terms+=VLSFofTerm (',' terms+=VLSFofTerm)*
	//	')')?;
	public VLSFunctionFofElements getVLSFunctionFofAccess() {
		return pVLSFunctionFof;
	}
	
	public ParserRule getVLSFunctionFofRule() {
		return getVLSFunctionFofAccess().getRule();
	}
	
	//VLSDefinedTerm:
	//	name=(DOUBLE_QUOTE | SIGNED_INT_ID | SIGNED_REAL_ID | SIGNED_RAT_ID);
	public VLSDefinedTermElements getVLSDefinedTermAccess() {
		return pVLSDefinedTerm;
	}
	
	public ParserRule getVLSDefinedTermRule() {
		return getVLSDefinedTermAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
}

/**
 * generated by Xtext 2.12.0
 */
package hu.bme.mit.inf.dslreasoner.vampireLanguage.impl;

import hu.bme.mit.inf.dslreasoner.vampireLanguage.VLSAnnotation;
import hu.bme.mit.inf.dslreasoner.vampireLanguage.VampireLanguagePackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>VLS Annotation</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link hu.bme.mit.inf.dslreasoner.vampireLanguage.impl.VLSAnnotationImpl#getName <em>Name</em>}</li>
 *   <li>{@link hu.bme.mit.inf.dslreasoner.vampireLanguage.impl.VLSAnnotationImpl#getClosure_rule <em>Closure rule</em>}</li>
 * </ul>
 *
 * @generated
 */
public class VLSAnnotationImpl extends MinimalEObjectImpl.Container implements VLSAnnotation
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getClosure_rule() <em>Closure rule</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getClosure_rule()
   * @generated
   * @ordered
   */
  protected VLSAnnotation closure_rule;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected VLSAnnotationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return VampireLanguagePackage.Literals.VLS_ANNOTATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, VampireLanguagePackage.VLS_ANNOTATION__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VLSAnnotation getClosure_rule()
  {
    return closure_rule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetClosure_rule(VLSAnnotation newClosure_rule, NotificationChain msgs)
  {
    VLSAnnotation oldClosure_rule = closure_rule;
    closure_rule = newClosure_rule;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, VampireLanguagePackage.VLS_ANNOTATION__CLOSURE_RULE, oldClosure_rule, newClosure_rule);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setClosure_rule(VLSAnnotation newClosure_rule)
  {
    if (newClosure_rule != closure_rule)
    {
      NotificationChain msgs = null;
      if (closure_rule != null)
        msgs = ((InternalEObject)closure_rule).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - VampireLanguagePackage.VLS_ANNOTATION__CLOSURE_RULE, null, msgs);
      if (newClosure_rule != null)
        msgs = ((InternalEObject)newClosure_rule).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - VampireLanguagePackage.VLS_ANNOTATION__CLOSURE_RULE, null, msgs);
      msgs = basicSetClosure_rule(newClosure_rule, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, VampireLanguagePackage.VLS_ANNOTATION__CLOSURE_RULE, newClosure_rule, newClosure_rule));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case VampireLanguagePackage.VLS_ANNOTATION__CLOSURE_RULE:
        return basicSetClosure_rule(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case VampireLanguagePackage.VLS_ANNOTATION__NAME:
        return getName();
      case VampireLanguagePackage.VLS_ANNOTATION__CLOSURE_RULE:
        return getClosure_rule();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case VampireLanguagePackage.VLS_ANNOTATION__NAME:
        setName((String)newValue);
        return;
      case VampireLanguagePackage.VLS_ANNOTATION__CLOSURE_RULE:
        setClosure_rule((VLSAnnotation)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case VampireLanguagePackage.VLS_ANNOTATION__NAME:
        setName(NAME_EDEFAULT);
        return;
      case VampireLanguagePackage.VLS_ANNOTATION__CLOSURE_RULE:
        setClosure_rule((VLSAnnotation)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case VampireLanguagePackage.VLS_ANNOTATION__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case VampireLanguagePackage.VLS_ANNOTATION__CLOSURE_RULE:
        return closure_rule != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //VLSAnnotationImpl

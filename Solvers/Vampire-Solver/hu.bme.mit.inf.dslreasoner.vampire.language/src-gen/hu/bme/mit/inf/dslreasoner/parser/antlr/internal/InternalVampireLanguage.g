/*
 * generated by Xtext 2.12.0
 */
grammar InternalVampireLanguage;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package hu.bme.mit.inf.dslreasoner.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package hu.bme.mit.inf.dslreasoner.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import hu.bme.mit.inf.dslreasoner.services.VampireLanguageGrammarAccess;

}

@parser::members {

 	private VampireLanguageGrammarAccess grammarAccess;

    public InternalVampireLanguageParser(TokenStream input, VampireLanguageGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "VampireModel";
   	}

   	@Override
   	protected VampireLanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleVampireModel
entryRuleVampireModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVampireModelRule()); }
	iv_ruleVampireModel=ruleVampireModel
	{ $current=$iv_ruleVampireModel.current; }
	EOF;

// Rule VampireModel
ruleVampireModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getVampireModelAccess().getCommentsVLSCommentParserRuleCall_0_0());
				}
				lv_comments_0_0=ruleVLSComment
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVampireModelRule());
					}
					add(
						$current,
						"comments",
						lv_comments_0_0,
						"hu.bme.mit.inf.dslreasoner.VampireLanguage.VLSComment");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getVampireModelAccess().getFormulasVLSFofFormulaParserRuleCall_1_0());
				}
				lv_formulas_1_0=ruleVLSFofFormula
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVampireModelRule());
					}
					add(
						$current,
						"formulas",
						lv_formulas_1_0,
						"hu.bme.mit.inf.dslreasoner.VampireLanguage.VLSFofFormula");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)*
;

// Entry rule entryRuleVLSComment
entryRuleVLSComment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVLSCommentRule()); }
	iv_ruleVLSComment=ruleVLSComment
	{ $current=$iv_ruleVLSComment.current; }
	EOF;

// Rule VLSComment
ruleVLSComment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_comment_0_0=RULE_SINGLE_COMMENT
			{
				newLeafNode(lv_comment_0_0, grammarAccess.getVLSCommentAccess().getCommentSINGLE_COMMENTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getVLSCommentRule());
				}
				setWithLastConsumed(
					$current,
					"comment",
					lv_comment_0_0,
					"hu.bme.mit.inf.dslreasoner.VampireLanguage.SINGLE_COMMENT");
			}
		)
	)
;

// Entry rule entryRuleVLSFofFormula
entryRuleVLSFofFormula returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVLSFofFormulaRule()); }
	iv_ruleVLSFofFormula=ruleVLSFofFormula
	{ $current=$iv_ruleVLSFofFormula.current; }
	EOF;

// Rule VLSFofFormula
ruleVLSFofFormula returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='fof'
		{
			newLeafNode(otherlv_0, grammarAccess.getVLSFofFormulaAccess().getFofKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getVLSFofFormulaAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				(
					lv_name_2_1=RULE_LOWER_WORD_ID
					{
						newLeafNode(lv_name_2_1, grammarAccess.getVLSFofFormulaAccess().getNameLOWER_WORD_IDTerminalRuleCall_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVLSFofFormulaRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_2_1,
							"hu.bme.mit.inf.dslreasoner.VampireLanguage.LOWER_WORD_ID");
					}
					    |
					lv_name_2_2=RULE_SIGNED_INT_ID
					{
						newLeafNode(lv_name_2_2, grammarAccess.getVLSFofFormulaAccess().getNameSIGNED_INT_IDTerminalRuleCall_2_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVLSFofFormulaRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_2_2,
							"hu.bme.mit.inf.dslreasoner.VampireLanguage.SIGNED_INT_ID");
					}
					    |
					lv_name_2_3=RULE_SINGLE_QUOTE
					{
						newLeafNode(lv_name_2_3, grammarAccess.getVLSFofFormulaAccess().getNameSINGLE_QUOTETerminalRuleCall_2_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVLSFofFormulaRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_2_3,
							"hu.bme.mit.inf.dslreasoner.VampireLanguage.SINGLE_QUOTE");
					}
				)
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getVLSFofFormulaAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVLSFofFormulaAccess().getFofRoleVLSRoleEnumRuleCall_4_0());
				}
				lv_fofRole_4_0=ruleVLSRole
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVLSFofFormulaRule());
					}
					set(
						$current,
						"fofRole",
						lv_fofRole_4_0,
						"hu.bme.mit.inf.dslreasoner.VampireLanguage.VLSRole");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=','
		{
			newLeafNode(otherlv_5, grammarAccess.getVLSFofFormulaAccess().getCommaKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVLSFofFormulaAccess().getFofFormulaVLSTermParserRuleCall_6_0());
				}
				lv_fofFormula_6_0=ruleVLSTerm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVLSFofFormulaRule());
					}
					set(
						$current,
						"fofFormula",
						lv_fofFormula_6_0,
						"hu.bme.mit.inf.dslreasoner.VampireLanguage.VLSTerm");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_7=','
			{
				newLeafNode(otherlv_7, grammarAccess.getVLSFofFormulaAccess().getCommaKeyword_7_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVLSFofFormulaAccess().getAnnotationsVLSAnnotationParserRuleCall_7_1_0());
					}
					lv_annotations_8_0=ruleVLSAnnotation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVLSFofFormulaRule());
						}
						set(
							$current,
							"annotations",
							lv_annotations_8_0,
							"hu.bme.mit.inf.dslreasoner.VampireLanguage.VLSAnnotation");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_9=')'
		{
			newLeafNode(otherlv_9, grammarAccess.getVLSFofFormulaAccess().getRightParenthesisKeyword_8());
		}
		otherlv_10='.'
		{
			newLeafNode(otherlv_10, grammarAccess.getVLSFofFormulaAccess().getFullStopKeyword_9());
		}
	)
;

// Entry rule entryRuleVLSAnnotation
entryRuleVLSAnnotation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVLSAnnotationRule()); }
	iv_ruleVLSAnnotation=ruleVLSAnnotation
	{ $current=$iv_ruleVLSAnnotation.current; }
	EOF;

// Rule VLSAnnotation
ruleVLSAnnotation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_LOWER_WORD_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getVLSAnnotationAccess().getNameLOWER_WORD_IDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVLSAnnotationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"hu.bme.mit.inf.dslreasoner.VampireLanguage.LOWER_WORD_ID");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getVLSAnnotationAccess().getClosure_ruleClosure_RuleParserRuleCall_1_0());
				}
				lv_closure_rule_1_0=ruleClosure_Rule
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVLSAnnotationRule());
					}
					set(
						$current,
						"closure_rule",
						lv_closure_rule_1_0,
						"hu.bme.mit.inf.dslreasoner.VampireLanguage.Closure_Rule");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleClosure_Rule
entryRuleClosure_Rule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClosure_RuleRule()); }
	iv_ruleClosure_Rule=ruleClosure_Rule
	{ $current=$iv_ruleClosure_Rule.current; }
	EOF;

// Rule Closure_Rule
ruleClosure_Rule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_LOWER_WORD_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getClosure_RuleAccess().getNameLOWER_WORD_IDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getClosure_RuleRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"hu.bme.mit.inf.dslreasoner.VampireLanguage.LOWER_WORD_ID");
				}
			)
		)
		    |
		(
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getClosure_RuleAccess().getLeftParenthesisKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getClosure_RuleAccess().getVLSAnnotationParserRuleCall_1_1());
			}
			this_VLSAnnotation_2=ruleVLSAnnotation
			{
				$current = $this_VLSAnnotation_2.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_3=')'
			{
				newLeafNode(otherlv_3, grammarAccess.getClosure_RuleAccess().getRightParenthesisKeyword_1_2());
			}
		)
	)
;

// Entry rule entryRuleVLSTerm
entryRuleVLSTerm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVLSTermRule()); }
	iv_ruleVLSTerm=ruleVLSTerm
	{ $current=$iv_ruleVLSTerm.current; }
	EOF;

// Rule VLSTerm
ruleVLSTerm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getVLSTermAccess().getVLSBinaryParserRuleCall());
	}
	this_VLSBinary_0=ruleVLSBinary
	{
		$current = $this_VLSBinary_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleVLSBinary
entryRuleVLSBinary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVLSBinaryRule()); }
	iv_ruleVLSBinary=ruleVLSBinary
	{ $current=$iv_ruleVLSBinary.current; }
	EOF;

// Rule VLSBinary
ruleVLSBinary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getVLSBinaryAccess().getVLSUnitaryFormulaParserRuleCall_0());
		}
		this_VLSUnitaryFormula_0=ruleVLSUnitaryFormula
		{
			$current = $this_VLSUnitaryFormula_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					(
						(
							{
								$current = forceCreateModelElementAndSet(
									grammarAccess.getVLSBinaryAccess().getVLSEquivalentLeftAction_1_0_0_0_0(),
									$current);
							}
						)
						otherlv_2='<=>'
						{
							newLeafNode(otherlv_2, grammarAccess.getVLSBinaryAccess().getLessThanSignEqualsSignGreaterThanSignKeyword_1_0_0_0_1());
						}
					)
					    |
					(
						(
							{
								$current = forceCreateModelElementAndSet(
									grammarAccess.getVLSBinaryAccess().getVLSImpliesLeftAction_1_0_0_1_0(),
									$current);
							}
						)
						otherlv_4='=>'
						{
							newLeafNode(otherlv_4, grammarAccess.getVLSBinaryAccess().getEqualsSignGreaterThanSignKeyword_1_0_0_1_1());
						}
					)
					    |
					(
						(
							{
								$current = forceCreateModelElementAndSet(
									grammarAccess.getVLSBinaryAccess().getVLSRevImpliesLeftAction_1_0_0_2_0(),
									$current);
							}
						)
						otherlv_6='<='
						{
							newLeafNode(otherlv_6, grammarAccess.getVLSBinaryAccess().getLessThanSignEqualsSignKeyword_1_0_0_2_1());
						}
					)
					    |
					(
						(
							{
								$current = forceCreateModelElementAndSet(
									grammarAccess.getVLSBinaryAccess().getVLSXnorLeftAction_1_0_0_3_0(),
									$current);
							}
						)
						otherlv_8='<~>'
						{
							newLeafNode(otherlv_8, grammarAccess.getVLSBinaryAccess().getLessThanSignTildeGreaterThanSignKeyword_1_0_0_3_1());
						}
					)
					    |
					(
						(
							{
								$current = forceCreateModelElementAndSet(
									grammarAccess.getVLSBinaryAccess().getVLSNorLeftAction_1_0_0_4_0(),
									$current);
							}
						)
						otherlv_10='~|'
						{
							newLeafNode(otherlv_10, grammarAccess.getVLSBinaryAccess().getTildeVerticalLineKeyword_1_0_0_4_1());
						}
					)
					    |
					(
						(
							{
								$current = forceCreateModelElementAndSet(
									grammarAccess.getVLSBinaryAccess().getVLSNandLeftAction_1_0_0_5_0(),
									$current);
							}
						)
						otherlv_12='~&'
						{
							newLeafNode(otherlv_12, grammarAccess.getVLSBinaryAccess().getTildeAmpersandKeyword_1_0_0_5_1());
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getVLSBinaryAccess().getRightVLSUnitaryFormulaParserRuleCall_1_0_1_0());
						}
						lv_right_13_0=ruleVLSUnitaryFormula
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getVLSBinaryRule());
							}
							set(
								$current,
								"right",
								lv_right_13_0,
								"hu.bme.mit.inf.dslreasoner.VampireLanguage.VLSUnitaryFormula");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getVLSBinaryAccess().getVLSAndLeftAction_1_1_0(),
							$current);
					}
				)
				otherlv_15='&'
				{
					newLeafNode(otherlv_15, grammarAccess.getVLSBinaryAccess().getAmpersandKeyword_1_1_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getVLSBinaryAccess().getRightVLSUnitaryFormulaParserRuleCall_1_1_2_0());
						}
						lv_right_16_0=ruleVLSUnitaryFormula
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getVLSBinaryRule());
							}
							set(
								$current,
								"right",
								lv_right_16_0,
								"hu.bme.mit.inf.dslreasoner.VampireLanguage.VLSUnitaryFormula");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)+
			    |
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getVLSBinaryAccess().getVLSOrLeftAction_1_2_0(),
							$current);
					}
				)
				otherlv_18='|'
				{
					newLeafNode(otherlv_18, grammarAccess.getVLSBinaryAccess().getVerticalLineKeyword_1_2_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getVLSBinaryAccess().getRightVLSUnitaryFormulaParserRuleCall_1_2_2_0());
						}
						lv_right_19_0=ruleVLSUnitaryFormula
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getVLSBinaryRule());
							}
							set(
								$current,
								"right",
								lv_right_19_0,
								"hu.bme.mit.inf.dslreasoner.VampireLanguage.VLSUnitaryFormula");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)+
		)?
	)
;

// Entry rule entryRuleVLSUnitaryFormula
entryRuleVLSUnitaryFormula returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVLSUnitaryFormulaRule()); }
	iv_ruleVLSUnitaryFormula=ruleVLSUnitaryFormula
	{ $current=$iv_ruleVLSUnitaryFormula.current; }
	EOF;

// Rule VLSUnitaryFormula
ruleVLSUnitaryFormula returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getVLSUnitaryFormulaAccess().getVLSUniversalQuantifierParserRuleCall_0());
		}
		this_VLSUniversalQuantifier_0=ruleVLSUniversalQuantifier
		{
			$current = $this_VLSUniversalQuantifier_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getVLSUnitaryFormulaAccess().getVLSExistentialQuantifierParserRuleCall_1());
		}
		this_VLSExistentialQuantifier_1=ruleVLSExistentialQuantifier
		{
			$current = $this_VLSExistentialQuantifier_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getVLSUnitaryFormulaAccess().getVLSUnaryNegationParserRuleCall_2());
		}
		this_VLSUnaryNegation_2=ruleVLSUnaryNegation
		{
			$current = $this_VLSUnaryNegation_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getVLSUnitaryFormulaAccess().getVLSUnaryInfixParserRuleCall_3());
		}
		this_VLSUnaryInfix_3=ruleVLSUnaryInfix
		{
			$current = $this_VLSUnaryInfix_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_4='('
			{
				newLeafNode(otherlv_4, grammarAccess.getVLSUnitaryFormulaAccess().getLeftParenthesisKeyword_4_0());
			}
			{
				newCompositeNode(grammarAccess.getVLSUnitaryFormulaAccess().getVLSTermParserRuleCall_4_1());
			}
			this_VLSTerm_5=ruleVLSTerm
			{
				$current = $this_VLSTerm_5.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_6=')'
			{
				newLeafNode(otherlv_6, grammarAccess.getVLSUnitaryFormulaAccess().getRightParenthesisKeyword_4_2());
			}
		)
	)
;

// Entry rule entryRuleVLSUniversalQuantifier
entryRuleVLSUniversalQuantifier returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVLSUniversalQuantifierRule()); }
	iv_ruleVLSUniversalQuantifier=ruleVLSUniversalQuantifier
	{ $current=$iv_ruleVLSUniversalQuantifier.current; }
	EOF;

// Rule VLSUniversalQuantifier
ruleVLSUniversalQuantifier returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getVLSUniversalQuantifierAccess().getVLSUniversalQuantifierAction_0(),
					$current);
			}
		)
		(
			otherlv_1='!'
			{
				newLeafNode(otherlv_1, grammarAccess.getVLSUniversalQuantifierAccess().getExclamationMarkKeyword_1_0());
			}
			otherlv_2='['
			{
				newLeafNode(otherlv_2, grammarAccess.getVLSUniversalQuantifierAccess().getLeftSquareBracketKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVLSUniversalQuantifierAccess().getVariablesVLSVariableParserRuleCall_1_2_0());
					}
					lv_variables_3_0=ruleVLSVariable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVLSUniversalQuantifierRule());
						}
						add(
							$current,
							"variables",
							lv_variables_3_0,
							"hu.bme.mit.inf.dslreasoner.VampireLanguage.VLSVariable");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getVLSUniversalQuantifierAccess().getCommaKeyword_1_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getVLSUniversalQuantifierAccess().getVariablesVLSVariableParserRuleCall_1_3_1_0());
						}
						lv_variables_5_0=ruleVLSVariable
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getVLSUniversalQuantifierRule());
							}
							add(
								$current,
								"variables",
								lv_variables_5_0,
								"hu.bme.mit.inf.dslreasoner.VampireLanguage.VLSVariable");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_6=']'
			{
				newLeafNode(otherlv_6, grammarAccess.getVLSUniversalQuantifierAccess().getRightSquareBracketKeyword_1_4());
			}
			otherlv_7=':'
			{
				newLeafNode(otherlv_7, grammarAccess.getVLSUniversalQuantifierAccess().getColonKeyword_1_5());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getVLSUniversalQuantifierAccess().getOperandVLSUnitaryFormulaParserRuleCall_2_0());
				}
				lv_operand_8_0=ruleVLSUnitaryFormula
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVLSUniversalQuantifierRule());
					}
					set(
						$current,
						"operand",
						lv_operand_8_0,
						"hu.bme.mit.inf.dslreasoner.VampireLanguage.VLSUnitaryFormula");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleVLSExistentialQuantifier
entryRuleVLSExistentialQuantifier returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVLSExistentialQuantifierRule()); }
	iv_ruleVLSExistentialQuantifier=ruleVLSExistentialQuantifier
	{ $current=$iv_ruleVLSExistentialQuantifier.current; }
	EOF;

// Rule VLSExistentialQuantifier
ruleVLSExistentialQuantifier returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getVLSExistentialQuantifierAccess().getVLSExistentialQuantifierAction_0(),
					$current);
			}
		)
		(
			otherlv_1='?'
			{
				newLeafNode(otherlv_1, grammarAccess.getVLSExistentialQuantifierAccess().getQuestionMarkKeyword_1_0());
			}
			otherlv_2='['
			{
				newLeafNode(otherlv_2, grammarAccess.getVLSExistentialQuantifierAccess().getLeftSquareBracketKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVLSExistentialQuantifierAccess().getVariablesVLSVariableParserRuleCall_1_2_0());
					}
					lv_variables_3_0=ruleVLSVariable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVLSExistentialQuantifierRule());
						}
						add(
							$current,
							"variables",
							lv_variables_3_0,
							"hu.bme.mit.inf.dslreasoner.VampireLanguage.VLSVariable");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getVLSExistentialQuantifierAccess().getCommaKeyword_1_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getVLSExistentialQuantifierAccess().getVariablesVLSVariableParserRuleCall_1_3_1_0());
						}
						lv_variables_5_0=ruleVLSVariable
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getVLSExistentialQuantifierRule());
							}
							add(
								$current,
								"variables",
								lv_variables_5_0,
								"hu.bme.mit.inf.dslreasoner.VampireLanguage.VLSVariable");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_6=']'
			{
				newLeafNode(otherlv_6, grammarAccess.getVLSExistentialQuantifierAccess().getRightSquareBracketKeyword_1_4());
			}
			otherlv_7=':'
			{
				newLeafNode(otherlv_7, grammarAccess.getVLSExistentialQuantifierAccess().getColonKeyword_1_5());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getVLSExistentialQuantifierAccess().getOperandVLSUnitaryFormulaParserRuleCall_2_0());
				}
				lv_operand_8_0=ruleVLSUnitaryFormula
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVLSExistentialQuantifierRule());
					}
					set(
						$current,
						"operand",
						lv_operand_8_0,
						"hu.bme.mit.inf.dslreasoner.VampireLanguage.VLSUnitaryFormula");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleVLSUnaryNegation
entryRuleVLSUnaryNegation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVLSUnaryNegationRule()); }
	iv_ruleVLSUnaryNegation=ruleVLSUnaryNegation
	{ $current=$iv_ruleVLSUnaryNegation.current; }
	EOF;

// Rule VLSUnaryNegation
ruleVLSUnaryNegation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getVLSUnaryNegationAccess().getVLSUnaryNegationAction_0(),
					$current);
			}
		)
		otherlv_1='~'
		{
			newLeafNode(otherlv_1, grammarAccess.getVLSUnaryNegationAccess().getTildeKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVLSUnaryNegationAccess().getOperandVLSUnitaryFormulaParserRuleCall_2_0());
				}
				lv_operand_2_0=ruleVLSUnitaryFormula
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVLSUnaryNegationRule());
					}
					set(
						$current,
						"operand",
						lv_operand_2_0,
						"hu.bme.mit.inf.dslreasoner.VampireLanguage.VLSUnitaryFormula");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleVLSUnaryInfix
entryRuleVLSUnaryInfix returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVLSUnaryInfixRule()); }
	iv_ruleVLSUnaryInfix=ruleVLSUnaryInfix
	{ $current=$iv_ruleVLSUnaryInfix.current; }
	EOF;

// Rule VLSUnaryInfix
ruleVLSUnaryInfix returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getVLSUnaryInfixAccess().getVLSFunctionParserRuleCall_0());
		}
		this_VLSFunction_0=ruleVLSFunction
		{
			$current = $this_VLSFunction_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getVLSUnaryInfixAccess().getVLSInequalityLeftAction_1_0_0_0(),
								$current);
						}
					)
					otherlv_2='!='
					{
						newLeafNode(otherlv_2, grammarAccess.getVLSUnaryInfixAccess().getExclamationMarkEqualsSignKeyword_1_0_0_1());
					}
				)
				    |
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getVLSUnaryInfixAccess().getVLSEqualityLeftAction_1_0_1_0(),
								$current);
						}
					)
					otherlv_4='='
					{
						newLeafNode(otherlv_4, grammarAccess.getVLSUnaryInfixAccess().getEqualsSignKeyword_1_0_1_1());
					}
				)
				    |
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getVLSUnaryInfixAccess().getVLSAssignmentLeftAction_1_0_2_0(),
								$current);
						}
					)
					otherlv_6=':='
					{
						newLeafNode(otherlv_6, grammarAccess.getVLSUnaryInfixAccess().getColonEqualsSignKeyword_1_0_2_1());
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getVLSUnaryInfixAccess().getRightVLSFunctionParserRuleCall_1_1_0());
					}
					lv_right_7_0=ruleVLSFunction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVLSUnaryInfixRule());
						}
						set(
							$current,
							"right",
							lv_right_7_0,
							"hu.bme.mit.inf.dslreasoner.VampireLanguage.VLSFunction");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleVLSFunction
entryRuleVLSFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVLSFunctionRule()); }
	iv_ruleVLSFunction=ruleVLSFunction
	{ $current=$iv_ruleVLSFunction.current; }
	EOF;

// Rule VLSFunction
ruleVLSFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getVLSFunctionAccess().getVLSFunctionAction_0(),
					$current);
			}
		)
		(
			(
				(
					lv_constant_1_1=RULE_LOWER_WORD_ID
					{
						newLeafNode(lv_constant_1_1, grammarAccess.getVLSFunctionAccess().getConstantLOWER_WORD_IDTerminalRuleCall_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVLSFunctionRule());
						}
						setWithLastConsumed(
							$current,
							"constant",
							lv_constant_1_1,
							"hu.bme.mit.inf.dslreasoner.VampireLanguage.LOWER_WORD_ID");
					}
					    |
					lv_constant_1_2=RULE_SINGLE_QUOTE
					{
						newLeafNode(lv_constant_1_2, grammarAccess.getVLSFunctionAccess().getConstantSINGLE_QUOTETerminalRuleCall_1_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVLSFunctionRule());
						}
						setWithLastConsumed(
							$current,
							"constant",
							lv_constant_1_2,
							"hu.bme.mit.inf.dslreasoner.VampireLanguage.SINGLE_QUOTE");
					}
					    |
					lv_constant_1_3=RULE_DOLLAR_ID
					{
						newLeafNode(lv_constant_1_3, grammarAccess.getVLSFunctionAccess().getConstantDOLLAR_IDTerminalRuleCall_1_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVLSFunctionRule());
						}
						setWithLastConsumed(
							$current,
							"constant",
							lv_constant_1_3,
							"hu.bme.mit.inf.dslreasoner.VampireLanguage.DOLLAR_ID");
					}
					    |
					lv_constant_1_4=RULE_DOUBLE_DOLLAR_ID
					{
						newLeafNode(lv_constant_1_4, grammarAccess.getVLSFunctionAccess().getConstantDOUBLE_DOLLAR_IDTerminalRuleCall_1_0_3());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVLSFunctionRule());
						}
						setWithLastConsumed(
							$current,
							"constant",
							lv_constant_1_4,
							"hu.bme.mit.inf.dslreasoner.VampireLanguage.DOUBLE_DOLLAR_ID");
					}
				)
			)
		)
		(
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getVLSFunctionAccess().getLeftParenthesisKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVLSFunctionAccess().getTermsVLSFofTermParserRuleCall_2_1_0());
					}
					lv_terms_3_0=ruleVLSFofTerm
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVLSFunctionRule());
						}
						add(
							$current,
							"terms",
							lv_terms_3_0,
							"hu.bme.mit.inf.dslreasoner.VampireLanguage.VLSFofTerm");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getVLSFunctionAccess().getCommaKeyword_2_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getVLSFunctionAccess().getTermsVLSFofTermParserRuleCall_2_2_1_0());
						}
						lv_terms_5_0=ruleVLSFofTerm
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getVLSFunctionRule());
							}
							add(
								$current,
								"terms",
								lv_terms_5_0,
								"hu.bme.mit.inf.dslreasoner.VampireLanguage.VLSFofTerm");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_6=')'
			{
				newLeafNode(otherlv_6, grammarAccess.getVLSFunctionAccess().getRightParenthesisKeyword_2_3());
			}
		)?
	)
;

// Entry rule entryRuleVLSFofTerm
entryRuleVLSFofTerm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVLSFofTermRule()); }
	iv_ruleVLSFofTerm=ruleVLSFofTerm
	{ $current=$iv_ruleVLSFofTerm.current; }
	EOF;

// Rule VLSFofTerm
ruleVLSFofTerm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getVLSFofTermAccess().getVLSVariableParserRuleCall_0());
		}
		this_VLSVariable_0=ruleVLSVariable
		{
			$current = $this_VLSVariable_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getVLSFofTermAccess().getVLSFunctionFofParserRuleCall_1());
		}
		this_VLSFunctionFof_1=ruleVLSFunctionFof
		{
			$current = $this_VLSFunctionFof_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getVLSFofTermAccess().getVLSDefinedTermParserRuleCall_2());
		}
		this_VLSDefinedTerm_2=ruleVLSDefinedTerm
		{
			$current = $this_VLSDefinedTerm_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleVLSVariable
entryRuleVLSVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVLSVariableRule()); }
	iv_ruleVLSVariable=ruleVLSVariable
	{ $current=$iv_ruleVLSVariable.current; }
	EOF;

// Rule VLSVariable
ruleVLSVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_UPPER_WORD_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getVLSVariableAccess().getNameUPPER_WORD_IDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getVLSVariableRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"hu.bme.mit.inf.dslreasoner.VampireLanguage.UPPER_WORD_ID");
			}
		)
	)
;

// Entry rule entryRuleVLSFunctionFof
entryRuleVLSFunctionFof returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVLSFunctionFofRule()); }
	iv_ruleVLSFunctionFof=ruleVLSFunctionFof
	{ $current=$iv_ruleVLSFunctionFof.current; }
	EOF;

// Rule VLSFunctionFof
ruleVLSFunctionFof returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_name_0_1=RULE_LOWER_WORD_ID
					{
						newLeafNode(lv_name_0_1, grammarAccess.getVLSFunctionFofAccess().getNameLOWER_WORD_IDTerminalRuleCall_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVLSFunctionFofRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_0_1,
							"hu.bme.mit.inf.dslreasoner.VampireLanguage.LOWER_WORD_ID");
					}
					    |
					lv_name_0_2=RULE_SINGLE_QUOTE
					{
						newLeafNode(lv_name_0_2, grammarAccess.getVLSFunctionFofAccess().getNameSINGLE_QUOTETerminalRuleCall_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVLSFunctionFofRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_0_2,
							"hu.bme.mit.inf.dslreasoner.VampireLanguage.SINGLE_QUOTE");
					}
					    |
					lv_name_0_3=RULE_DOLLAR_ID
					{
						newLeafNode(lv_name_0_3, grammarAccess.getVLSFunctionFofAccess().getNameDOLLAR_IDTerminalRuleCall_0_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVLSFunctionFofRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_0_3,
							"hu.bme.mit.inf.dslreasoner.VampireLanguage.DOLLAR_ID");
					}
					    |
					lv_name_0_4=RULE_DOUBLE_DOLLAR_ID
					{
						newLeafNode(lv_name_0_4, grammarAccess.getVLSFunctionFofAccess().getNameDOUBLE_DOLLAR_IDTerminalRuleCall_0_0_3());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVLSFunctionFofRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_0_4,
							"hu.bme.mit.inf.dslreasoner.VampireLanguage.DOUBLE_DOLLAR_ID");
					}
				)
			)
		)
		(
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getVLSFunctionFofAccess().getLeftParenthesisKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVLSFunctionFofAccess().getTermsVLSFofTermParserRuleCall_1_1_0());
					}
					lv_terms_2_0=ruleVLSFofTerm
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVLSFunctionFofRule());
						}
						add(
							$current,
							"terms",
							lv_terms_2_0,
							"hu.bme.mit.inf.dslreasoner.VampireLanguage.VLSFofTerm");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getVLSFunctionFofAccess().getCommaKeyword_1_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getVLSFunctionFofAccess().getTermsVLSFofTermParserRuleCall_1_2_1_0());
						}
						lv_terms_4_0=ruleVLSFofTerm
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getVLSFunctionFofRule());
							}
							add(
								$current,
								"terms",
								lv_terms_4_0,
								"hu.bme.mit.inf.dslreasoner.VampireLanguage.VLSFofTerm");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_5=')'
			{
				newLeafNode(otherlv_5, grammarAccess.getVLSFunctionFofAccess().getRightParenthesisKeyword_1_3());
			}
		)?
	)
;

// Entry rule entryRuleVLSDefinedTerm
entryRuleVLSDefinedTerm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVLSDefinedTermRule()); }
	iv_ruleVLSDefinedTerm=ruleVLSDefinedTerm
	{ $current=$iv_ruleVLSDefinedTerm.current; }
	EOF;

// Rule VLSDefinedTerm
ruleVLSDefinedTerm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_1=RULE_DOUBLE_QUOTE
				{
					newLeafNode(lv_name_0_1, grammarAccess.getVLSDefinedTermAccess().getNameDOUBLE_QUOTETerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVLSDefinedTermRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_1,
						"hu.bme.mit.inf.dslreasoner.VampireLanguage.DOUBLE_QUOTE");
				}
				    |
				lv_name_0_2=RULE_SIGNED_INT_ID
				{
					newLeafNode(lv_name_0_2, grammarAccess.getVLSDefinedTermAccess().getNameSIGNED_INT_IDTerminalRuleCall_0_1());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVLSDefinedTermRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_2,
						"hu.bme.mit.inf.dslreasoner.VampireLanguage.SIGNED_INT_ID");
				}
				    |
				lv_name_0_3=RULE_SIGNED_REAL_ID
				{
					newLeafNode(lv_name_0_3, grammarAccess.getVLSDefinedTermAccess().getNameSIGNED_REAL_IDTerminalRuleCall_0_2());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVLSDefinedTermRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_3,
						"hu.bme.mit.inf.dslreasoner.VampireLanguage.SIGNED_REAL_ID");
				}
				    |
				lv_name_0_4=RULE_SIGNED_RAT_ID
				{
					newLeafNode(lv_name_0_4, grammarAccess.getVLSDefinedTermAccess().getNameSIGNED_RAT_IDTerminalRuleCall_0_3());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVLSDefinedTermRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_4,
						"hu.bme.mit.inf.dslreasoner.VampireLanguage.SIGNED_RAT_ID");
				}
			)
		)
	)
;

// Rule VLSRole
ruleVLSRole returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='axiom'
			{
				$current = grammarAccess.getVLSRoleAccess().getAxiomEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getVLSRoleAccess().getAxiomEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='conjecture'
			{
				$current = grammarAccess.getVLSRoleAccess().getConjectureEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getVLSRoleAccess().getConjectureEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='hypothesis'
			{
				$current = grammarAccess.getVLSRoleAccess().getHypothesisEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getVLSRoleAccess().getHypothesisEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='definition'
			{
				$current = grammarAccess.getVLSRoleAccess().getDefinitionEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getVLSRoleAccess().getDefinitionEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='assumption'
			{
				$current = grammarAccess.getVLSRoleAccess().getAssumptionEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getVLSRoleAccess().getAssumptionEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='lemma'
			{
				$current = grammarAccess.getVLSRoleAccess().getLemmaEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getVLSRoleAccess().getLemmaEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='theorem'
			{
				$current = grammarAccess.getVLSRoleAccess().getTheoremEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getVLSRoleAccess().getTheoremEnumLiteralDeclaration_6());
			}
		)
		    |
		(
			enumLiteral_7='corollary'
			{
				$current = grammarAccess.getVLSRoleAccess().getCorollaryEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_7, grammarAccess.getVLSRoleAccess().getCorollaryEnumLiteralDeclaration_7());
			}
		)
		    |
		(
			enumLiteral_8='negated_conjecture'
			{
				$current = grammarAccess.getVLSRoleAccess().getNegated_conjectureEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_8, grammarAccess.getVLSRoleAccess().getNegated_conjectureEnumLiteralDeclaration_8());
			}
		)
		    |
		(
			enumLiteral_9='plain'
			{
				$current = grammarAccess.getVLSRoleAccess().getPlainEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_9, grammarAccess.getVLSRoleAccess().getPlainEnumLiteralDeclaration_9());
			}
		)
		    |
		(
			enumLiteral_10='type'
			{
				$current = grammarAccess.getVLSRoleAccess().getTypeEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_10, grammarAccess.getVLSRoleAccess().getTypeEnumLiteralDeclaration_10());
			}
		)
		    |
		(
			enumLiteral_11='fi_domain'
			{
				$current = grammarAccess.getVLSRoleAccess().getFi_domainEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_11, grammarAccess.getVLSRoleAccess().getFi_domainEnumLiteralDeclaration_11());
			}
		)
		    |
		(
			enumLiteral_12='fi_functors'
			{
				$current = grammarAccess.getVLSRoleAccess().getFi_functorsEnumLiteralDeclaration_12().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_12, grammarAccess.getVLSRoleAccess().getFi_functorsEnumLiteralDeclaration_12());
			}
		)
		    |
		(
			enumLiteral_13='fi_predicates'
			{
				$current = grammarAccess.getVLSRoleAccess().getFi_predicatesEnumLiteralDeclaration_13().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_13, grammarAccess.getVLSRoleAccess().getFi_predicatesEnumLiteralDeclaration_13());
			}
		)
		    |
		(
			enumLiteral_14='unknown'
			{
				$current = grammarAccess.getVLSRoleAccess().getUnknownEnumLiteralDeclaration_14().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_14, grammarAccess.getVLSRoleAccess().getUnknownEnumLiteralDeclaration_14());
			}
		)
	)
;

fragment RULE_ALPHA_NUMERIC : ('a'..'z'|'A'..'Z'|'0'..'9'|'_');

RULE_UPPER_WORD_ID : 'A'..'Z' RULE_ALPHA_NUMERIC*;

RULE_LOWER_WORD_ID : 'a'..'z' RULE_ALPHA_NUMERIC*;

RULE_DOUBLE_QUOTE : '"' ('\\' ('"'|'\\')|~(('\\'|'"')))* '"';

RULE_SINGLE_QUOTE : '\'' ('\\' ('\''|'\\')|~(('\\'|'\'')))+ '\'';

RULE_DOLLAR_ID : '$' RULE_LOWER_WORD_ID;

RULE_DOUBLE_DOLLAR_ID : '$$' RULE_LOWER_WORD_ID;

fragment RULE_UNSIGNED_INT_ID : ('0'|'1'..'9' RULE_INT?);

RULE_SIGNED_INT_ID : ('+'|'-')? RULE_UNSIGNED_INT_ID;

fragment RULE_UNSIGNED_REAL_FRAC_ID : RULE_UNSIGNED_INT_ID '.' RULE_INT;

fragment RULE_UNSIGNED_REAL_EXP_ID : (RULE_UNSIGNED_INT_ID|RULE_UNSIGNED_REAL_FRAC_ID) 'Ee' ('+'|'-')? RULE_INT;

RULE_SIGNED_REAL_ID : ('+'|'-')? (RULE_UNSIGNED_REAL_FRAC_ID|RULE_UNSIGNED_REAL_EXP_ID);

fragment RULE_UNSIGNED_RAT_ID : RULE_UNSIGNED_INT_ID '/' '1'..'9' RULE_INT?;

RULE_SIGNED_RAT_ID : ('+'|'-')? RULE_UNSIGNED_RAT_ID;

fragment RULE_ANY_OTHER : '%' ~(('\n'|'\r'))* '\r';

RULE_SINGLE_COMMENT : RULE_ANY_OTHER;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

fragment RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

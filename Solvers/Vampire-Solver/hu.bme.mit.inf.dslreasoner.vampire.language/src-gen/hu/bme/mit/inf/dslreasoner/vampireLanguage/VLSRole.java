/**
 * generated by Xtext 2.12.0
 */
package hu.bme.mit.inf.dslreasoner.vampireLanguage;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.eclipse.emf.common.util.Enumerator;

/**
 * <!-- begin-user-doc -->
 * A representation of the literals of the enumeration '<em><b>VLS Role</b></em>',
 * and utility methods for working with them.
 * <!-- end-user-doc -->
 * @see hu.bme.mit.inf.dslreasoner.vampireLanguage.VampireLanguagePackage#getVLSRole()
 * @model
 * @generated
 */
public enum VLSRole implements Enumerator
{
  /**
   * The '<em><b>Axiom</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #AXIOM_VALUE
   * @generated
   * @ordered
   */
  AXIOM(0, "axiom", "axiom"),

  /**
   * The '<em><b>Conjecture</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #CONJECTURE_VALUE
   * @generated
   * @ordered
   */
  CONJECTURE(1, "conjecture", "conjecture"),

  /**
   * The '<em><b>Hypothesis</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #HYPOTHESIS_VALUE
   * @generated
   * @ordered
   */
  HYPOTHESIS(2, "hypothesis", "hypothesis"),

  /**
   * The '<em><b>Definition</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #DEFINITION_VALUE
   * @generated
   * @ordered
   */
  DEFINITION(3, "definition", "definition"),

  /**
   * The '<em><b>Assumption</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #ASSUMPTION_VALUE
   * @generated
   * @ordered
   */
  ASSUMPTION(4, "assumption", "assumption"),

  /**
   * The '<em><b>Lemma</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #LEMMA_VALUE
   * @generated
   * @ordered
   */
  LEMMA(5, "lemma", "lemma"),

  /**
   * The '<em><b>Theorem</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #THEOREM_VALUE
   * @generated
   * @ordered
   */
  THEOREM(6, "theorem", "theorem"),

  /**
   * The '<em><b>Corollary</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #COROLLARY_VALUE
   * @generated
   * @ordered
   */
  COROLLARY(7, "corollary", "corollary"),

  /**
   * The '<em><b>Negated conjecture</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #NEGATED_CONJECTURE_VALUE
   * @generated
   * @ordered
   */
  NEGATED_CONJECTURE(8, "negated_conjecture", "negated_conjecture"),

  /**
   * The '<em><b>Plain</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #PLAIN_VALUE
   * @generated
   * @ordered
   */
  PLAIN(9, "plain", "plain"),

  /**
   * The '<em><b>Type</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #TYPE_VALUE
   * @generated
   * @ordered
   */
  TYPE(10, "type", "type"),

  /**
   * The '<em><b>Fi domain</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #FI_DOMAIN_VALUE
   * @generated
   * @ordered
   */
  FI_DOMAIN(11, "fi_domain", "fi_domain"),

  /**
   * The '<em><b>Fi functors</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #FI_FUNCTORS_VALUE
   * @generated
   * @ordered
   */
  FI_FUNCTORS(12, "fi_functors", "fi_functors"),

  /**
   * The '<em><b>Fi predicates</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #FI_PREDICATES_VALUE
   * @generated
   * @ordered
   */
  FI_PREDICATES(13, "fi_predicates", "fi_predicates"),

  /**
   * The '<em><b>Unknown</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #UNKNOWN_VALUE
   * @generated
   * @ordered
   */
  UNKNOWN(14, "unknown", "unknown");

  /**
   * The '<em><b>Axiom</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Axiom</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #AXIOM
   * @model name="axiom"
   * @generated
   * @ordered
   */
  public static final int AXIOM_VALUE = 0;

  /**
   * The '<em><b>Conjecture</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Conjecture</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #CONJECTURE
   * @model name="conjecture"
   * @generated
   * @ordered
   */
  public static final int CONJECTURE_VALUE = 1;

  /**
   * The '<em><b>Hypothesis</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Hypothesis</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #HYPOTHESIS
   * @model name="hypothesis"
   * @generated
   * @ordered
   */
  public static final int HYPOTHESIS_VALUE = 2;

  /**
   * The '<em><b>Definition</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Definition</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #DEFINITION
   * @model name="definition"
   * @generated
   * @ordered
   */
  public static final int DEFINITION_VALUE = 3;

  /**
   * The '<em><b>Assumption</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Assumption</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #ASSUMPTION
   * @model name="assumption"
   * @generated
   * @ordered
   */
  public static final int ASSUMPTION_VALUE = 4;

  /**
   * The '<em><b>Lemma</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Lemma</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #LEMMA
   * @model name="lemma"
   * @generated
   * @ordered
   */
  public static final int LEMMA_VALUE = 5;

  /**
   * The '<em><b>Theorem</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Theorem</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #THEOREM
   * @model name="theorem"
   * @generated
   * @ordered
   */
  public static final int THEOREM_VALUE = 6;

  /**
   * The '<em><b>Corollary</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Corollary</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #COROLLARY
   * @model name="corollary"
   * @generated
   * @ordered
   */
  public static final int COROLLARY_VALUE = 7;

  /**
   * The '<em><b>Negated conjecture</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Negated conjecture</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #NEGATED_CONJECTURE
   * @model name="negated_conjecture"
   * @generated
   * @ordered
   */
  public static final int NEGATED_CONJECTURE_VALUE = 8;

  /**
   * The '<em><b>Plain</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Plain</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #PLAIN
   * @model name="plain"
   * @generated
   * @ordered
   */
  public static final int PLAIN_VALUE = 9;

  /**
   * The '<em><b>Type</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Type</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #TYPE
   * @model name="type"
   * @generated
   * @ordered
   */
  public static final int TYPE_VALUE = 10;

  /**
   * The '<em><b>Fi domain</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Fi domain</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #FI_DOMAIN
   * @model name="fi_domain"
   * @generated
   * @ordered
   */
  public static final int FI_DOMAIN_VALUE = 11;

  /**
   * The '<em><b>Fi functors</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Fi functors</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #FI_FUNCTORS
   * @model name="fi_functors"
   * @generated
   * @ordered
   */
  public static final int FI_FUNCTORS_VALUE = 12;

  /**
   * The '<em><b>Fi predicates</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Fi predicates</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #FI_PREDICATES
   * @model name="fi_predicates"
   * @generated
   * @ordered
   */
  public static final int FI_PREDICATES_VALUE = 13;

  /**
   * The '<em><b>Unknown</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Unknown</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #UNKNOWN
   * @model name="unknown"
   * @generated
   * @ordered
   */
  public static final int UNKNOWN_VALUE = 14;

  /**
   * An array of all the '<em><b>VLS Role</b></em>' enumerators.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static final VLSRole[] VALUES_ARRAY =
    new VLSRole[]
    {
      AXIOM,
      CONJECTURE,
      HYPOTHESIS,
      DEFINITION,
      ASSUMPTION,
      LEMMA,
      THEOREM,
      COROLLARY,
      NEGATED_CONJECTURE,
      PLAIN,
      TYPE,
      FI_DOMAIN,
      FI_FUNCTORS,
      FI_PREDICATES,
      UNKNOWN,
    };

  /**
   * A public read-only list of all the '<em><b>VLS Role</b></em>' enumerators.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static final List<VLSRole> VALUES = Collections.unmodifiableList(Arrays.asList(VALUES_ARRAY));

  /**
   * Returns the '<em><b>VLS Role</b></em>' literal with the specified literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param literal the literal.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static VLSRole get(String literal)
  {
    for (int i = 0; i < VALUES_ARRAY.length; ++i)
    {
      VLSRole result = VALUES_ARRAY[i];
      if (result.toString().equals(literal))
      {
        return result;
      }
    }
    return null;
  }

  /**
   * Returns the '<em><b>VLS Role</b></em>' literal with the specified name.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param name the name.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static VLSRole getByName(String name)
  {
    for (int i = 0; i < VALUES_ARRAY.length; ++i)
    {
      VLSRole result = VALUES_ARRAY[i];
      if (result.getName().equals(name))
      {
        return result;
      }
    }
    return null;
  }

  /**
   * Returns the '<em><b>VLS Role</b></em>' literal with the specified integer value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the integer value.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static VLSRole get(int value)
  {
    switch (value)
    {
      case AXIOM_VALUE: return AXIOM;
      case CONJECTURE_VALUE: return CONJECTURE;
      case HYPOTHESIS_VALUE: return HYPOTHESIS;
      case DEFINITION_VALUE: return DEFINITION;
      case ASSUMPTION_VALUE: return ASSUMPTION;
      case LEMMA_VALUE: return LEMMA;
      case THEOREM_VALUE: return THEOREM;
      case COROLLARY_VALUE: return COROLLARY;
      case NEGATED_CONJECTURE_VALUE: return NEGATED_CONJECTURE;
      case PLAIN_VALUE: return PLAIN;
      case TYPE_VALUE: return TYPE;
      case FI_DOMAIN_VALUE: return FI_DOMAIN;
      case FI_FUNCTORS_VALUE: return FI_FUNCTORS;
      case FI_PREDICATES_VALUE: return FI_PREDICATES;
      case UNKNOWN_VALUE: return UNKNOWN;
    }
    return null;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final int value;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final String name;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final String literal;

  /**
   * Only this class can construct instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private VLSRole(int value, String name, String literal)
  {
    this.value = value;
    this.name = name;
    this.literal = literal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getValue()
  {
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getLiteral()
  {
    return literal;
  }

  /**
   * Returns the literal value of the enumerator, which is its string representation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    return literal;
  }
  
} //VLSRole

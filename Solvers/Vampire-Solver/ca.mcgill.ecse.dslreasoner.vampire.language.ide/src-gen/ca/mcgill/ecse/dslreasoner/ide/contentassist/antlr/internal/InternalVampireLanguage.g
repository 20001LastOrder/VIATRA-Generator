/*
 * generated by Xtext 2.14.0
 */
grammar InternalVampireLanguage;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package ca.mcgill.ecse.dslreasoner.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package ca.mcgill.ecse.dslreasoner.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import ca.mcgill.ecse.dslreasoner.services.VampireLanguageGrammarAccess;

}
@parser::members {
	private VampireLanguageGrammarAccess grammarAccess;

	public void setGrammarAccess(VampireLanguageGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleVampireModel
entryRuleVampireModel
:
{ before(grammarAccess.getVampireModelRule()); }
	 ruleVampireModel
{ after(grammarAccess.getVampireModelRule()); } 
	 EOF 
;

// Rule VampireModel
ruleVampireModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVampireModelAccess().getAlternatives()); }
		(rule__VampireModel__Alternatives)*
		{ after(grammarAccess.getVampireModelAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVLSInclude
entryRuleVLSInclude
:
{ before(grammarAccess.getVLSIncludeRule()); }
	 ruleVLSInclude
{ after(grammarAccess.getVLSIncludeRule()); } 
	 EOF 
;

// Rule VLSInclude
ruleVLSInclude 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVLSIncludeAccess().getGroup()); }
		(rule__VLSInclude__Group__0)
		{ after(grammarAccess.getVLSIncludeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVLSName
entryRuleVLSName
:
{ before(grammarAccess.getVLSNameRule()); }
	 ruleVLSName
{ after(grammarAccess.getVLSNameRule()); } 
	 EOF 
;

// Rule VLSName
ruleVLSName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVLSNameAccess().getNameAssignment()); }
		(rule__VLSName__NameAssignment)
		{ after(grammarAccess.getVLSNameAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVLSComment
entryRuleVLSComment
:
{ before(grammarAccess.getVLSCommentRule()); }
	 ruleVLSComment
{ after(grammarAccess.getVLSCommentRule()); } 
	 EOF 
;

// Rule VLSComment
ruleVLSComment 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVLSCommentAccess().getGroup()); }
		(rule__VLSComment__Group__0)
		{ after(grammarAccess.getVLSCommentAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVLSConfirmations
entryRuleVLSConfirmations
:
{ before(grammarAccess.getVLSConfirmationsRule()); }
	 ruleVLSConfirmations
{ after(grammarAccess.getVLSConfirmationsRule()); } 
	 EOF 
;

// Rule VLSConfirmations
ruleVLSConfirmations 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVLSConfirmationsAccess().getVLSSatisfiableParserRuleCall()); }
		ruleVLSSatisfiable
		{ after(grammarAccess.getVLSConfirmationsAccess().getVLSSatisfiableParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVLSSatisfiable
entryRuleVLSSatisfiable
:
{ before(grammarAccess.getVLSSatisfiableRule()); }
	 ruleVLSSatisfiable
{ after(grammarAccess.getVLSSatisfiableRule()); } 
	 EOF 
;

// Rule VLSSatisfiable
ruleVLSSatisfiable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVLSSatisfiableAccess().getGroup()); }
		(rule__VLSSatisfiable__Group__0)
		{ after(grammarAccess.getVLSSatisfiableAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVLSFofFormula
entryRuleVLSFofFormula
:
{ before(grammarAccess.getVLSFofFormulaRule()); }
	 ruleVLSFofFormula
{ after(grammarAccess.getVLSFofFormulaRule()); } 
	 EOF 
;

// Rule VLSFofFormula
ruleVLSFofFormula 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVLSFofFormulaAccess().getGroup()); }
		(rule__VLSFofFormula__Group__0)
		{ after(grammarAccess.getVLSFofFormulaAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVLSTffFormula
entryRuleVLSTffFormula
:
{ before(grammarAccess.getVLSTffFormulaRule()); }
	 ruleVLSTffFormula
{ after(grammarAccess.getVLSTffFormulaRule()); } 
	 EOF 
;

// Rule VLSTffFormula
ruleVLSTffFormula 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVLSTffFormulaAccess().getGroup()); }
		(rule__VLSTffFormula__Group__0)
		{ after(grammarAccess.getVLSTffFormulaAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVLSRole
entryRuleVLSRole
:
{ before(grammarAccess.getVLSRoleRule()); }
	 ruleVLSRole
{ after(grammarAccess.getVLSRoleRule()); } 
	 EOF 
;

// Rule VLSRole
ruleVLSRole 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVLSRoleAccess().getAlternatives()); }
		(rule__VLSRole__Alternatives)
		{ after(grammarAccess.getVLSRoleAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVLSAnnotation
entryRuleVLSAnnotation
:
{ before(grammarAccess.getVLSAnnotationRule()); }
	 ruleVLSAnnotation
{ after(grammarAccess.getVLSAnnotationRule()); } 
	 EOF 
;

// Rule VLSAnnotation
ruleVLSAnnotation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVLSAnnotationAccess().getGroup()); }
		(rule__VLSAnnotation__Group__0)
		{ after(grammarAccess.getVLSAnnotationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVLSAnnotationTerms
entryRuleVLSAnnotationTerms
:
{ before(grammarAccess.getVLSAnnotationTermsRule()); }
	 ruleVLSAnnotationTerms
{ after(grammarAccess.getVLSAnnotationTermsRule()); } 
	 EOF 
;

// Rule VLSAnnotationTerms
ruleVLSAnnotationTerms 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVLSAnnotationTermsAccess().getGroup()); }
		(rule__VLSAnnotationTerms__Group__0)
		{ after(grammarAccess.getVLSAnnotationTermsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVLSTerm
entryRuleVLSTerm
:
{ before(grammarAccess.getVLSTermRule()); }
	 ruleVLSTerm
{ after(grammarAccess.getVLSTermRule()); } 
	 EOF 
;

// Rule VLSTerm
ruleVLSTerm 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVLSTermAccess().getVLSBinaryParserRuleCall()); }
		ruleVLSBinary
		{ after(grammarAccess.getVLSTermAccess().getVLSBinaryParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVLSBinary
entryRuleVLSBinary
:
{ before(grammarAccess.getVLSBinaryRule()); }
	 ruleVLSBinary
{ after(grammarAccess.getVLSBinaryRule()); } 
	 EOF 
;

// Rule VLSBinary
ruleVLSBinary 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVLSBinaryAccess().getGroup()); }
		(rule__VLSBinary__Group__0)
		{ after(grammarAccess.getVLSBinaryAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVLSUnitaryFormula
entryRuleVLSUnitaryFormula
:
{ before(grammarAccess.getVLSUnitaryFormulaRule()); }
	 ruleVLSUnitaryFormula
{ after(grammarAccess.getVLSUnitaryFormulaRule()); } 
	 EOF 
;

// Rule VLSUnitaryFormula
ruleVLSUnitaryFormula 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVLSUnitaryFormulaAccess().getAlternatives()); }
		(rule__VLSUnitaryFormula__Alternatives)
		{ after(grammarAccess.getVLSUnitaryFormulaAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVLSUniversalQuantifier
entryRuleVLSUniversalQuantifier
:
{ before(grammarAccess.getVLSUniversalQuantifierRule()); }
	 ruleVLSUniversalQuantifier
{ after(grammarAccess.getVLSUniversalQuantifierRule()); } 
	 EOF 
;

// Rule VLSUniversalQuantifier
ruleVLSUniversalQuantifier 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVLSUniversalQuantifierAccess().getGroup()); }
		(rule__VLSUniversalQuantifier__Group__0)
		{ after(grammarAccess.getVLSUniversalQuantifierAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVLSExistentialQuantifier
entryRuleVLSExistentialQuantifier
:
{ before(grammarAccess.getVLSExistentialQuantifierRule()); }
	 ruleVLSExistentialQuantifier
{ after(grammarAccess.getVLSExistentialQuantifierRule()); } 
	 EOF 
;

// Rule VLSExistentialQuantifier
ruleVLSExistentialQuantifier 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVLSExistentialQuantifierAccess().getGroup()); }
		(rule__VLSExistentialQuantifier__Group__0)
		{ after(grammarAccess.getVLSExistentialQuantifierAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVLSUnaryNegation
entryRuleVLSUnaryNegation
:
{ before(grammarAccess.getVLSUnaryNegationRule()); }
	 ruleVLSUnaryNegation
{ after(grammarAccess.getVLSUnaryNegationRule()); } 
	 EOF 
;

// Rule VLSUnaryNegation
ruleVLSUnaryNegation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVLSUnaryNegationAccess().getGroup()); }
		(rule__VLSUnaryNegation__Group__0)
		{ after(grammarAccess.getVLSUnaryNegationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVLSUnaryInfix
entryRuleVLSUnaryInfix
:
{ before(grammarAccess.getVLSUnaryInfixRule()); }
	 ruleVLSUnaryInfix
{ after(grammarAccess.getVLSUnaryInfixRule()); } 
	 EOF 
;

// Rule VLSUnaryInfix
ruleVLSUnaryInfix 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVLSUnaryInfixAccess().getGroup()); }
		(rule__VLSUnaryInfix__Group__0)
		{ after(grammarAccess.getVLSUnaryInfixAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVLSAtomic
entryRuleVLSAtomic
:
{ before(grammarAccess.getVLSAtomicRule()); }
	 ruleVLSAtomic
{ after(grammarAccess.getVLSAtomicRule()); } 
	 EOF 
;

// Rule VLSAtomic
ruleVLSAtomic 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVLSAtomicAccess().getAlternatives()); }
		(rule__VLSAtomic__Alternatives)
		{ after(grammarAccess.getVLSAtomicAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVLSAtomicConstant
entryRuleVLSAtomicConstant
:
{ before(grammarAccess.getVLSAtomicConstantRule()); }
	 ruleVLSAtomicConstant
{ after(grammarAccess.getVLSAtomicConstantRule()); } 
	 EOF 
;

// Rule VLSAtomicConstant
ruleVLSAtomicConstant 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVLSAtomicConstantAccess().getAlternatives()); }
		(rule__VLSAtomicConstant__Alternatives)
		{ after(grammarAccess.getVLSAtomicConstantAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVLSAtomicFunction
entryRuleVLSAtomicFunction
:
{ before(grammarAccess.getVLSAtomicFunctionRule()); }
	 ruleVLSAtomicFunction
{ after(grammarAccess.getVLSAtomicFunctionRule()); } 
	 EOF 
;

// Rule VLSAtomicFunction
ruleVLSAtomicFunction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVLSAtomicFunctionAccess().getAlternatives()); }
		(rule__VLSAtomicFunction__Alternatives)
		{ after(grammarAccess.getVLSAtomicFunctionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVLSVariable
entryRuleVLSVariable
:
{ before(grammarAccess.getVLSVariableRule()); }
	 ruleVLSVariable
{ after(grammarAccess.getVLSVariableRule()); } 
	 EOF 
;

// Rule VLSVariable
ruleVLSVariable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVLSVariableAccess().getNameAssignment()); }
		(rule__VLSVariable__NameAssignment)
		{ after(grammarAccess.getVLSVariableAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVLSFofTerm
entryRuleVLSFofTerm
:
{ before(grammarAccess.getVLSFofTermRule()); }
	 ruleVLSFofTerm
{ after(grammarAccess.getVLSFofTermRule()); } 
	 EOF 
;

// Rule VLSFofTerm
ruleVLSFofTerm 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVLSFofTermAccess().getAlternatives()); }
		(rule__VLSFofTerm__Alternatives)
		{ after(grammarAccess.getVLSFofTermAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVLSFunctionAsTerm
entryRuleVLSFunctionAsTerm
:
{ before(grammarAccess.getVLSFunctionAsTermRule()); }
	 ruleVLSFunctionAsTerm
{ after(grammarAccess.getVLSFunctionAsTermRule()); } 
	 EOF 
;

// Rule VLSFunctionAsTerm
ruleVLSFunctionAsTerm 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVLSFunctionAsTermAccess().getGroup()); }
		(rule__VLSFunctionAsTerm__Group__0)
		{ after(grammarAccess.getVLSFunctionAsTermAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVLSDefinedTerm
entryRuleVLSDefinedTerm
:
{ before(grammarAccess.getVLSDefinedTermRule()); }
	 ruleVLSDefinedTerm
{ after(grammarAccess.getVLSDefinedTermRule()); } 
	 EOF 
;

// Rule VLSDefinedTerm
ruleVLSDefinedTerm 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVLSDefinedTermAccess().getAlternatives()); }
		(rule__VLSDefinedTerm__Alternatives)
		{ after(grammarAccess.getVLSDefinedTermAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VampireModel__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVampireModelAccess().getIncludesAssignment_0()); }
		(rule__VampireModel__IncludesAssignment_0)
		{ after(grammarAccess.getVampireModelAccess().getIncludesAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getVampireModelAccess().getCommentsAssignment_1()); }
		(rule__VampireModel__CommentsAssignment_1)
		{ after(grammarAccess.getVampireModelAccess().getCommentsAssignment_1()); }
	)
	|
	(
		{ before(grammarAccess.getVampireModelAccess().getConfirmationsAssignment_2()); }
		(rule__VampireModel__ConfirmationsAssignment_2)
		{ after(grammarAccess.getVampireModelAccess().getConfirmationsAssignment_2()); }
	)
	|
	(
		{ before(grammarAccess.getVampireModelAccess().getFormulasAssignment_3()); }
		(rule__VampireModel__FormulasAssignment_3)
		{ after(grammarAccess.getVampireModelAccess().getFormulasAssignment_3()); }
	)
	|
	(
		{ before(grammarAccess.getVampireModelAccess().getTfformulasAssignment_4()); }
		(rule__VampireModel__TfformulasAssignment_4)
		{ after(grammarAccess.getVampireModelAccess().getTfformulasAssignment_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSName__NameAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSNameAccess().getNameLOWER_WORD_IDTerminalRuleCall_0_0()); }
		RULE_LOWER_WORD_ID
		{ after(grammarAccess.getVLSNameAccess().getNameLOWER_WORD_IDTerminalRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getVLSNameAccess().getNameSINGLE_QUOTETerminalRuleCall_0_1()); }
		RULE_SINGLE_QUOTE
		{ after(grammarAccess.getVLSNameAccess().getNameSINGLE_QUOTETerminalRuleCall_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getVLSNameAccess().getNameLITERALTerminalRuleCall_0_2()); }
		RULE_LITERAL
		{ after(grammarAccess.getVLSNameAccess().getNameLITERALTerminalRuleCall_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getVLSNameAccess().getNameSIGNED_LITERALTerminalRuleCall_0_3()); }
		RULE_SIGNED_LITERAL
		{ after(grammarAccess.getVLSNameAccess().getNameSIGNED_LITERALTerminalRuleCall_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFofFormula__NameAlternatives_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSFofFormulaAccess().getNameLOWER_WORD_IDTerminalRuleCall_2_0_0()); }
		RULE_LOWER_WORD_ID
		{ after(grammarAccess.getVLSFofFormulaAccess().getNameLOWER_WORD_IDTerminalRuleCall_2_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getVLSFofFormulaAccess().getNameSIGNED_LITERALTerminalRuleCall_2_0_1()); }
		RULE_SIGNED_LITERAL
		{ after(grammarAccess.getVLSFofFormulaAccess().getNameSIGNED_LITERALTerminalRuleCall_2_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getVLSFofFormulaAccess().getNameSINGLE_QUOTETerminalRuleCall_2_0_2()); }
		RULE_SINGLE_QUOTE
		{ after(grammarAccess.getVLSFofFormulaAccess().getNameSINGLE_QUOTETerminalRuleCall_2_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSTffFormula__NameAlternatives_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSTffFormulaAccess().getNameLOWER_WORD_IDTerminalRuleCall_2_0_0()); }
		RULE_LOWER_WORD_ID
		{ after(grammarAccess.getVLSTffFormulaAccess().getNameLOWER_WORD_IDTerminalRuleCall_2_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getVLSTffFormulaAccess().getNameSIGNED_LITERALTerminalRuleCall_2_0_1()); }
		RULE_SIGNED_LITERAL
		{ after(grammarAccess.getVLSTffFormulaAccess().getNameSIGNED_LITERALTerminalRuleCall_2_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getVLSTffFormulaAccess().getNameSINGLE_QUOTETerminalRuleCall_2_0_2()); }
		RULE_SINGLE_QUOTE
		{ after(grammarAccess.getVLSTffFormulaAccess().getNameSINGLE_QUOTETerminalRuleCall_2_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSRole__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSRoleAccess().getAxiomKeyword_0()); }
		'axiom'
		{ after(grammarAccess.getVLSRoleAccess().getAxiomKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getVLSRoleAccess().getConjectureKeyword_1()); }
		'conjecture'
		{ after(grammarAccess.getVLSRoleAccess().getConjectureKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getVLSRoleAccess().getHypothesisKeyword_2()); }
		'hypothesis'
		{ after(grammarAccess.getVLSRoleAccess().getHypothesisKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getVLSRoleAccess().getDefinitionKeyword_3()); }
		'definition'
		{ after(grammarAccess.getVLSRoleAccess().getDefinitionKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getVLSRoleAccess().getAssumptionKeyword_4()); }
		'assumption'
		{ after(grammarAccess.getVLSRoleAccess().getAssumptionKeyword_4()); }
	)
	|
	(
		{ before(grammarAccess.getVLSRoleAccess().getLemmaKeyword_5()); }
		'lemma'
		{ after(grammarAccess.getVLSRoleAccess().getLemmaKeyword_5()); }
	)
	|
	(
		{ before(grammarAccess.getVLSRoleAccess().getTheoremKeyword_6()); }
		'theorem'
		{ after(grammarAccess.getVLSRoleAccess().getTheoremKeyword_6()); }
	)
	|
	(
		{ before(grammarAccess.getVLSRoleAccess().getCorollaryKeyword_7()); }
		'corollary'
		{ after(grammarAccess.getVLSRoleAccess().getCorollaryKeyword_7()); }
	)
	|
	(
		{ before(grammarAccess.getVLSRoleAccess().getNegated_conjectureKeyword_8()); }
		'negated_conjecture'
		{ after(grammarAccess.getVLSRoleAccess().getNegated_conjectureKeyword_8()); }
	)
	|
	(
		{ before(grammarAccess.getVLSRoleAccess().getPlainKeyword_9()); }
		'plain'
		{ after(grammarAccess.getVLSRoleAccess().getPlainKeyword_9()); }
	)
	|
	(
		{ before(grammarAccess.getVLSRoleAccess().getTypeKeyword_10()); }
		'type'
		{ after(grammarAccess.getVLSRoleAccess().getTypeKeyword_10()); }
	)
	|
	(
		{ before(grammarAccess.getVLSRoleAccess().getFi_domainKeyword_11()); }
		'fi_domain'
		{ after(grammarAccess.getVLSRoleAccess().getFi_domainKeyword_11()); }
	)
	|
	(
		{ before(grammarAccess.getVLSRoleAccess().getFi_functorsKeyword_12()); }
		'fi_functors'
		{ after(grammarAccess.getVLSRoleAccess().getFi_functorsKeyword_12()); }
	)
	|
	(
		{ before(grammarAccess.getVLSRoleAccess().getFi_predicatesKeyword_13()); }
		'fi_predicates'
		{ after(grammarAccess.getVLSRoleAccess().getFi_predicatesKeyword_13()); }
	)
	|
	(
		{ before(grammarAccess.getVLSRoleAccess().getUnknownKeyword_14()); }
		'unknown'
		{ after(grammarAccess.getVLSRoleAccess().getUnknownKeyword_14()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAnnotation__NameAlternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSAnnotationAccess().getNameLOWER_WORD_IDTerminalRuleCall_1_0_0()); }
		RULE_LOWER_WORD_ID
		{ after(grammarAccess.getVLSAnnotationAccess().getNameLOWER_WORD_IDTerminalRuleCall_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getVLSAnnotationAccess().getNameSINGLE_QUOTETerminalRuleCall_1_0_1()); }
		RULE_SINGLE_QUOTE
		{ after(grammarAccess.getVLSAnnotationAccess().getNameSINGLE_QUOTETerminalRuleCall_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getVLSAnnotationAccess().getNameVLSRoleParserRuleCall_1_0_2()); }
		ruleVLSRole
		{ after(grammarAccess.getVLSAnnotationAccess().getNameVLSRoleParserRuleCall_1_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSBinaryAccess().getGroup_1_0()); }
		(rule__VLSBinary__Group_1_0__0)
		{ after(grammarAccess.getVLSBinaryAccess().getGroup_1_0()); }
	)
	|
	(
		(
			{ before(grammarAccess.getVLSBinaryAccess().getGroup_1_1()); }
			(rule__VLSBinary__Group_1_1__0)
			{ after(grammarAccess.getVLSBinaryAccess().getGroup_1_1()); }
		)
		(
			{ before(grammarAccess.getVLSBinaryAccess().getGroup_1_1()); }
			(rule__VLSBinary__Group_1_1__0)*
			{ after(grammarAccess.getVLSBinaryAccess().getGroup_1_1()); }
		)
	)
	|
	(
		(
			{ before(grammarAccess.getVLSBinaryAccess().getGroup_1_2()); }
			(rule__VLSBinary__Group_1_2__0)
			{ after(grammarAccess.getVLSBinaryAccess().getGroup_1_2()); }
		)
		(
			{ before(grammarAccess.getVLSBinaryAccess().getGroup_1_2()); }
			(rule__VLSBinary__Group_1_2__0)*
			{ after(grammarAccess.getVLSBinaryAccess().getGroup_1_2()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Alternatives_1_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSBinaryAccess().getGroup_1_0_0_0()); }
		(rule__VLSBinary__Group_1_0_0_0__0)
		{ after(grammarAccess.getVLSBinaryAccess().getGroup_1_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getVLSBinaryAccess().getGroup_1_0_0_1()); }
		(rule__VLSBinary__Group_1_0_0_1__0)
		{ after(grammarAccess.getVLSBinaryAccess().getGroup_1_0_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getVLSBinaryAccess().getGroup_1_0_0_2()); }
		(rule__VLSBinary__Group_1_0_0_2__0)
		{ after(grammarAccess.getVLSBinaryAccess().getGroup_1_0_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getVLSBinaryAccess().getGroup_1_0_0_3()); }
		(rule__VLSBinary__Group_1_0_0_3__0)
		{ after(grammarAccess.getVLSBinaryAccess().getGroup_1_0_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getVLSBinaryAccess().getGroup_1_0_0_4()); }
		(rule__VLSBinary__Group_1_0_0_4__0)
		{ after(grammarAccess.getVLSBinaryAccess().getGroup_1_0_0_4()); }
	)
	|
	(
		{ before(grammarAccess.getVLSBinaryAccess().getGroup_1_0_0_5()); }
		(rule__VLSBinary__Group_1_0_0_5__0)
		{ after(grammarAccess.getVLSBinaryAccess().getGroup_1_0_0_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUnitaryFormula__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSUnitaryFormulaAccess().getVLSUniversalQuantifierParserRuleCall_0()); }
		ruleVLSUniversalQuantifier
		{ after(grammarAccess.getVLSUnitaryFormulaAccess().getVLSUniversalQuantifierParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getVLSUnitaryFormulaAccess().getVLSExistentialQuantifierParserRuleCall_1()); }
		ruleVLSExistentialQuantifier
		{ after(grammarAccess.getVLSUnitaryFormulaAccess().getVLSExistentialQuantifierParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getVLSUnitaryFormulaAccess().getVLSUnaryNegationParserRuleCall_2()); }
		ruleVLSUnaryNegation
		{ after(grammarAccess.getVLSUnitaryFormulaAccess().getVLSUnaryNegationParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getVLSUnitaryFormulaAccess().getVLSUnaryInfixParserRuleCall_3()); }
		ruleVLSUnaryInfix
		{ after(grammarAccess.getVLSUnitaryFormulaAccess().getVLSUnaryInfixParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getVLSUnitaryFormulaAccess().getGroup_4()); }
		(rule__VLSUnitaryFormula__Group_4__0)
		{ after(grammarAccess.getVLSUnitaryFormulaAccess().getGroup_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUnaryInfix__Alternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSUnaryInfixAccess().getGroup_1_0_0()); }
		(rule__VLSUnaryInfix__Group_1_0_0__0)
		{ after(grammarAccess.getVLSUnaryInfixAccess().getGroup_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getVLSUnaryInfixAccess().getGroup_1_0_1()); }
		(rule__VLSUnaryInfix__Group_1_0_1__0)
		{ after(grammarAccess.getVLSUnaryInfixAccess().getGroup_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getVLSUnaryInfixAccess().getGroup_1_0_2()); }
		(rule__VLSUnaryInfix__Group_1_0_2__0)
		{ after(grammarAccess.getVLSUnaryInfixAccess().getGroup_1_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAtomic__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSAtomicAccess().getVLSAtomicConstantParserRuleCall_0()); }
		ruleVLSAtomicConstant
		{ after(grammarAccess.getVLSAtomicAccess().getVLSAtomicConstantParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getVLSAtomicAccess().getVLSAtomicFunctionParserRuleCall_1()); }
		ruleVLSAtomicFunction
		{ after(grammarAccess.getVLSAtomicAccess().getVLSAtomicFunctionParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getVLSAtomicAccess().getVLSVariableParserRuleCall_2()); }
		ruleVLSVariable
		{ after(grammarAccess.getVLSAtomicAccess().getVLSVariableParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getVLSAtomicAccess().getVLSDefinedTermParserRuleCall_3()); }
		ruleVLSDefinedTerm
		{ after(grammarAccess.getVLSAtomicAccess().getVLSDefinedTermParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAtomicConstant__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSAtomicConstantAccess().getGroup_0()); }
		(rule__VLSAtomicConstant__Group_0__0)
		{ after(grammarAccess.getVLSAtomicConstantAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getVLSAtomicConstantAccess().getGroup_1()); }
		(rule__VLSAtomicConstant__Group_1__0)
		{ after(grammarAccess.getVLSAtomicConstantAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getVLSAtomicConstantAccess().getGroup_2()); }
		(rule__VLSAtomicConstant__Group_2__0)
		{ after(grammarAccess.getVLSAtomicConstantAccess().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAtomicConstant__NameAlternatives_0_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSAtomicConstantAccess().getNameLOWER_WORD_IDTerminalRuleCall_0_1_0_0()); }
		RULE_LOWER_WORD_ID
		{ after(grammarAccess.getVLSAtomicConstantAccess().getNameLOWER_WORD_IDTerminalRuleCall_0_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getVLSAtomicConstantAccess().getNameSINGLE_QUOTETerminalRuleCall_0_1_0_1()); }
		RULE_SINGLE_QUOTE
		{ after(grammarAccess.getVLSAtomicConstantAccess().getNameSINGLE_QUOTETerminalRuleCall_0_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getVLSAtomicConstantAccess().getNameDOLLAR_IDTerminalRuleCall_0_1_0_2()); }
		RULE_DOLLAR_ID
		{ after(grammarAccess.getVLSAtomicConstantAccess().getNameDOLLAR_IDTerminalRuleCall_0_1_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getVLSAtomicConstantAccess().getNameDOUBLE_DOLLAR_IDTerminalRuleCall_0_1_0_3()); }
		RULE_DOUBLE_DOLLAR_ID
		{ after(grammarAccess.getVLSAtomicConstantAccess().getNameDOUBLE_DOLLAR_IDTerminalRuleCall_0_1_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getVLSAtomicConstantAccess().getNameVLSRoleParserRuleCall_0_1_0_4()); }
		ruleVLSRole
		{ after(grammarAccess.getVLSAtomicConstantAccess().getNameVLSRoleParserRuleCall_0_1_0_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAtomicFunction__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSAtomicFunctionAccess().getGroup_0()); }
		(rule__VLSAtomicFunction__Group_0__0)
		{ after(grammarAccess.getVLSAtomicFunctionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getVLSAtomicFunctionAccess().getGroup_1()); }
		(rule__VLSAtomicFunction__Group_1__0)
		{ after(grammarAccess.getVLSAtomicFunctionAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAtomicFunction__ConstantAlternatives_0_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSAtomicFunctionAccess().getConstantLOWER_WORD_IDTerminalRuleCall_0_1_0_0()); }
		RULE_LOWER_WORD_ID
		{ after(grammarAccess.getVLSAtomicFunctionAccess().getConstantLOWER_WORD_IDTerminalRuleCall_0_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getVLSAtomicFunctionAccess().getConstantSINGLE_QUOTETerminalRuleCall_0_1_0_1()); }
		RULE_SINGLE_QUOTE
		{ after(grammarAccess.getVLSAtomicFunctionAccess().getConstantSINGLE_QUOTETerminalRuleCall_0_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getVLSAtomicFunctionAccess().getConstantDOLLAR_IDTerminalRuleCall_0_1_0_2()); }
		RULE_DOLLAR_ID
		{ after(grammarAccess.getVLSAtomicFunctionAccess().getConstantDOLLAR_IDTerminalRuleCall_0_1_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getVLSAtomicFunctionAccess().getConstantDOUBLE_DOLLAR_IDTerminalRuleCall_0_1_0_3()); }
		RULE_DOUBLE_DOLLAR_ID
		{ after(grammarAccess.getVLSAtomicFunctionAccess().getConstantDOUBLE_DOLLAR_IDTerminalRuleCall_0_1_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getVLSAtomicFunctionAccess().getConstantVLSRoleParserRuleCall_0_1_0_4()); }
		ruleVLSRole
		{ after(grammarAccess.getVLSAtomicFunctionAccess().getConstantVLSRoleParserRuleCall_0_1_0_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFofTerm__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSFofTermAccess().getVLSVariableParserRuleCall_0()); }
		ruleVLSVariable
		{ after(grammarAccess.getVLSFofTermAccess().getVLSVariableParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getVLSFofTermAccess().getVLSFunctionAsTermParserRuleCall_1()); }
		ruleVLSFunctionAsTerm
		{ after(grammarAccess.getVLSFofTermAccess().getVLSFunctionAsTermParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getVLSFofTermAccess().getVLSDefinedTermParserRuleCall_2()); }
		ruleVLSDefinedTerm
		{ after(grammarAccess.getVLSFofTermAccess().getVLSDefinedTermParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFunctionAsTerm__FunctorAlternatives_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSFunctionAsTermAccess().getFunctorLOWER_WORD_IDTerminalRuleCall_0_0_0()); }
		RULE_LOWER_WORD_ID
		{ after(grammarAccess.getVLSFunctionAsTermAccess().getFunctorLOWER_WORD_IDTerminalRuleCall_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getVLSFunctionAsTermAccess().getFunctorSINGLE_QUOTETerminalRuleCall_0_0_1()); }
		RULE_SINGLE_QUOTE
		{ after(grammarAccess.getVLSFunctionAsTermAccess().getFunctorSINGLE_QUOTETerminalRuleCall_0_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getVLSFunctionAsTermAccess().getFunctorDOLLAR_IDTerminalRuleCall_0_0_2()); }
		RULE_DOLLAR_ID
		{ after(grammarAccess.getVLSFunctionAsTermAccess().getFunctorDOLLAR_IDTerminalRuleCall_0_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getVLSFunctionAsTermAccess().getFunctorDOUBLE_DOLLAR_IDTerminalRuleCall_0_0_3()); }
		RULE_DOUBLE_DOLLAR_ID
		{ after(grammarAccess.getVLSFunctionAsTermAccess().getFunctorDOUBLE_DOLLAR_IDTerminalRuleCall_0_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSDefinedTerm__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSDefinedTermAccess().getGroup_0()); }
		(rule__VLSDefinedTerm__Group_0__0)
		{ after(grammarAccess.getVLSDefinedTermAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getVLSDefinedTermAccess().getGroup_1()); }
		(rule__VLSDefinedTerm__Group_1__0)
		{ after(grammarAccess.getVLSDefinedTermAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getVLSDefinedTermAccess().getGroup_2()); }
		(rule__VLSDefinedTerm__Group_2__0)
		{ after(grammarAccess.getVLSDefinedTermAccess().getGroup_2()); }
	)
	|
	(
		{ before(grammarAccess.getVLSDefinedTermAccess().getGroup_3()); }
		(rule__VLSDefinedTerm__Group_3__0)
		{ after(grammarAccess.getVLSDefinedTermAccess().getGroup_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSInclude__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSInclude__Group__0__Impl
	rule__VLSInclude__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSInclude__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSIncludeAccess().getIncludeKeyword_0()); }
	'include('
	{ after(grammarAccess.getVLSIncludeAccess().getIncludeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSInclude__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSInclude__Group__1__Impl
	rule__VLSInclude__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSInclude__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSIncludeAccess().getFileNameAssignment_1()); }
	(rule__VLSInclude__FileNameAssignment_1)
	{ after(grammarAccess.getVLSIncludeAccess().getFileNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSInclude__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSInclude__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSInclude__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSIncludeAccess().getGroup_2()); }
	(rule__VLSInclude__Group_2__0)?
	{ after(grammarAccess.getVLSIncludeAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSInclude__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSInclude__Group_2__0__Impl
	rule__VLSInclude__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSInclude__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSIncludeAccess().getCommaLeftSquareBracketKeyword_2_0()); }
	',['
	{ after(grammarAccess.getVLSIncludeAccess().getCommaLeftSquareBracketKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSInclude__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSInclude__Group_2__1__Impl
	rule__VLSInclude__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSInclude__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSIncludeAccess().getNamesAssignment_2_1()); }
	(rule__VLSInclude__NamesAssignment_2_1)
	{ after(grammarAccess.getVLSIncludeAccess().getNamesAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSInclude__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSInclude__Group_2__2__Impl
	rule__VLSInclude__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSInclude__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSIncludeAccess().getGroup_2_2()); }
	(rule__VLSInclude__Group_2_2__0)*
	{ after(grammarAccess.getVLSIncludeAccess().getGroup_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSInclude__Group_2__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSInclude__Group_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSInclude__Group_2__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSIncludeAccess().getRightSquareBracketKeyword_2_3()); }
	']'
	{ after(grammarAccess.getVLSIncludeAccess().getRightSquareBracketKeyword_2_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSInclude__Group_2_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSInclude__Group_2_2__0__Impl
	rule__VLSInclude__Group_2_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSInclude__Group_2_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSIncludeAccess().getCommaKeyword_2_2_0()); }
	','
	{ after(grammarAccess.getVLSIncludeAccess().getCommaKeyword_2_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSInclude__Group_2_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSInclude__Group_2_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSInclude__Group_2_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSIncludeAccess().getNamesAssignment_2_2_1()); }
	(rule__VLSInclude__NamesAssignment_2_2_1)
	{ after(grammarAccess.getVLSIncludeAccess().getNamesAssignment_2_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSComment__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSComment__Group__0__Impl
	rule__VLSComment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSComment__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSCommentAccess().getPercentSignKeyword_0()); }
	'%'
	{ after(grammarAccess.getVLSCommentAccess().getPercentSignKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSComment__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSComment__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSComment__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSCommentAccess().getCommentAssignment_1()); }
	(rule__VLSComment__CommentAssignment_1)
	{ after(grammarAccess.getVLSCommentAccess().getCommentAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSSatisfiable__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSSatisfiable__Group__0__Impl
	rule__VLSSatisfiable__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSSatisfiable__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSSatisfiableAccess().getVLSSatisfiableAction_0()); }
	()
	{ after(grammarAccess.getVLSSatisfiableAccess().getVLSSatisfiableAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSSatisfiable__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSSatisfiable__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSSatisfiable__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSSatisfiableAccess().getSatisfiableKeyword_1()); }
	'Satisfiable!'
	{ after(grammarAccess.getVLSSatisfiableAccess().getSatisfiableKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSFofFormula__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSFofFormula__Group__0__Impl
	rule__VLSFofFormula__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFofFormula__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSFofFormulaAccess().getFofKeyword_0()); }
	'fof'
	{ after(grammarAccess.getVLSFofFormulaAccess().getFofKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFofFormula__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSFofFormula__Group__1__Impl
	rule__VLSFofFormula__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFofFormula__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSFofFormulaAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getVLSFofFormulaAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFofFormula__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSFofFormula__Group__2__Impl
	rule__VLSFofFormula__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFofFormula__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSFofFormulaAccess().getNameAssignment_2()); }
	(rule__VLSFofFormula__NameAssignment_2)
	{ after(grammarAccess.getVLSFofFormulaAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFofFormula__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSFofFormula__Group__3__Impl
	rule__VLSFofFormula__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFofFormula__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSFofFormulaAccess().getCommaKeyword_3()); }
	','
	{ after(grammarAccess.getVLSFofFormulaAccess().getCommaKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFofFormula__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSFofFormula__Group__4__Impl
	rule__VLSFofFormula__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFofFormula__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSFofFormulaAccess().getFofRoleAssignment_4()); }
	(rule__VLSFofFormula__FofRoleAssignment_4)
	{ after(grammarAccess.getVLSFofFormulaAccess().getFofRoleAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFofFormula__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSFofFormula__Group__5__Impl
	rule__VLSFofFormula__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFofFormula__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSFofFormulaAccess().getCommaKeyword_5()); }
	','
	{ after(grammarAccess.getVLSFofFormulaAccess().getCommaKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFofFormula__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSFofFormula__Group__6__Impl
	rule__VLSFofFormula__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFofFormula__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSFofFormulaAccess().getFofFormulaAssignment_6()); }
	(rule__VLSFofFormula__FofFormulaAssignment_6)
	{ after(grammarAccess.getVLSFofFormulaAccess().getFofFormulaAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFofFormula__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSFofFormula__Group__7__Impl
	rule__VLSFofFormula__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFofFormula__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSFofFormulaAccess().getGroup_7()); }
	(rule__VLSFofFormula__Group_7__0)?
	{ after(grammarAccess.getVLSFofFormulaAccess().getGroup_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFofFormula__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSFofFormula__Group__8__Impl
	rule__VLSFofFormula__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFofFormula__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSFofFormulaAccess().getRightParenthesisKeyword_8()); }
	')'
	{ after(grammarAccess.getVLSFofFormulaAccess().getRightParenthesisKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFofFormula__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSFofFormula__Group__9__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFofFormula__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSFofFormulaAccess().getFullStopKeyword_9()); }
	'.'
	{ after(grammarAccess.getVLSFofFormulaAccess().getFullStopKeyword_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSFofFormula__Group_7__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSFofFormula__Group_7__0__Impl
	rule__VLSFofFormula__Group_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFofFormula__Group_7__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSFofFormulaAccess().getCommaKeyword_7_0()); }
	','
	{ after(grammarAccess.getVLSFofFormulaAccess().getCommaKeyword_7_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFofFormula__Group_7__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSFofFormula__Group_7__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFofFormula__Group_7__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSFofFormulaAccess().getAnnotationsAssignment_7_1()); }
	(rule__VLSFofFormula__AnnotationsAssignment_7_1)
	{ after(grammarAccess.getVLSFofFormulaAccess().getAnnotationsAssignment_7_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSTffFormula__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSTffFormula__Group__0__Impl
	rule__VLSTffFormula__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSTffFormula__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSTffFormulaAccess().getTffKeyword_0()); }
	'tff'
	{ after(grammarAccess.getVLSTffFormulaAccess().getTffKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSTffFormula__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSTffFormula__Group__1__Impl
	rule__VLSTffFormula__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSTffFormula__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSTffFormulaAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getVLSTffFormulaAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSTffFormula__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSTffFormula__Group__2__Impl
	rule__VLSTffFormula__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSTffFormula__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSTffFormulaAccess().getNameAssignment_2()); }
	(rule__VLSTffFormula__NameAssignment_2)
	{ after(grammarAccess.getVLSTffFormulaAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSTffFormula__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSTffFormula__Group__3__Impl
	rule__VLSTffFormula__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSTffFormula__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSTffFormulaAccess().getCommaKeyword_3()); }
	','
	{ after(grammarAccess.getVLSTffFormulaAccess().getCommaKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSTffFormula__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSTffFormula__Group__4__Impl
	rule__VLSTffFormula__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSTffFormula__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSTffFormulaAccess().getFofRoleAssignment_4()); }
	(rule__VLSTffFormula__FofRoleAssignment_4)
	{ after(grammarAccess.getVLSTffFormulaAccess().getFofRoleAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSTffFormula__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSTffFormula__Group__5__Impl
	rule__VLSTffFormula__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSTffFormula__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSTffFormulaAccess().getCommaKeyword_5()); }
	','
	{ after(grammarAccess.getVLSTffFormulaAccess().getCommaKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSTffFormula__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSTffFormula__Group__6__Impl
	rule__VLSTffFormula__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSTffFormula__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSTffFormulaAccess().getFofFormulaAssignment_6()); }
	(rule__VLSTffFormula__FofFormulaAssignment_6)
	{ after(grammarAccess.getVLSTffFormulaAccess().getFofFormulaAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSTffFormula__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSTffFormula__Group__7__Impl
	rule__VLSTffFormula__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSTffFormula__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSTffFormulaAccess().getGroup_7()); }
	(rule__VLSTffFormula__Group_7__0)?
	{ after(grammarAccess.getVLSTffFormulaAccess().getGroup_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSTffFormula__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSTffFormula__Group__8__Impl
	rule__VLSTffFormula__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSTffFormula__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSTffFormulaAccess().getRightParenthesisKeyword_8()); }
	')'
	{ after(grammarAccess.getVLSTffFormulaAccess().getRightParenthesisKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSTffFormula__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSTffFormula__Group__9__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSTffFormula__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSTffFormulaAccess().getFullStopKeyword_9()); }
	'.'
	{ after(grammarAccess.getVLSTffFormulaAccess().getFullStopKeyword_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSTffFormula__Group_7__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSTffFormula__Group_7__0__Impl
	rule__VLSTffFormula__Group_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSTffFormula__Group_7__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSTffFormulaAccess().getCommaKeyword_7_0()); }
	','
	{ after(grammarAccess.getVLSTffFormulaAccess().getCommaKeyword_7_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSTffFormula__Group_7__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSTffFormula__Group_7__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSTffFormula__Group_7__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSTffFormulaAccess().getAnnotationsAssignment_7_1()); }
	(rule__VLSTffFormula__AnnotationsAssignment_7_1)
	{ after(grammarAccess.getVLSTffFormulaAccess().getAnnotationsAssignment_7_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSAnnotation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSAnnotation__Group__0__Impl
	rule__VLSAnnotation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAnnotation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSAnnotationAccess().getLeftSquareBracketKeyword_0()); }
	('[')?
	{ after(grammarAccess.getVLSAnnotationAccess().getLeftSquareBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAnnotation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSAnnotation__Group__1__Impl
	rule__VLSAnnotation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAnnotation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSAnnotationAccess().getNameAssignment_1()); }
	(rule__VLSAnnotation__NameAssignment_1)?
	{ after(grammarAccess.getVLSAnnotationAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAnnotation__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSAnnotation__Group__2__Impl
	rule__VLSAnnotation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAnnotation__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSAnnotationAccess().getGroup_2()); }
	(rule__VLSAnnotation__Group_2__0)?
	{ after(grammarAccess.getVLSAnnotationAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAnnotation__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSAnnotation__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAnnotation__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSAnnotationAccess().getRightSquareBracketKeyword_3()); }
	(']')?
	{ after(grammarAccess.getVLSAnnotationAccess().getRightSquareBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSAnnotation__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSAnnotation__Group_2__0__Impl
	rule__VLSAnnotation__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAnnotation__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSAnnotationAccess().getLeftParenthesisKeyword_2_0()); }
	'('
	{ after(grammarAccess.getVLSAnnotationAccess().getLeftParenthesisKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAnnotation__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSAnnotation__Group_2__1__Impl
	rule__VLSAnnotation__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAnnotation__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSAnnotationAccess().getFollowupAssignment_2_1()); }
	(rule__VLSAnnotation__FollowupAssignment_2_1)
	{ after(grammarAccess.getVLSAnnotationAccess().getFollowupAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAnnotation__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSAnnotation__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAnnotation__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSAnnotationAccess().getRightParenthesisKeyword_2_2()); }
	')'
	{ after(grammarAccess.getVLSAnnotationAccess().getRightParenthesisKeyword_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSAnnotationTerms__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSAnnotationTerms__Group__0__Impl
	rule__VLSAnnotationTerms__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAnnotationTerms__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSAnnotationTermsAccess().getTermsAssignment_0()); }
	(rule__VLSAnnotationTerms__TermsAssignment_0)
	{ after(grammarAccess.getVLSAnnotationTermsAccess().getTermsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAnnotationTerms__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSAnnotationTerms__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAnnotationTerms__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSAnnotationTermsAccess().getGroup_1()); }
	(rule__VLSAnnotationTerms__Group_1__0)*
	{ after(grammarAccess.getVLSAnnotationTermsAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSAnnotationTerms__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSAnnotationTerms__Group_1__0__Impl
	rule__VLSAnnotationTerms__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAnnotationTerms__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSAnnotationTermsAccess().getCommaKeyword_1_0()); }
	','
	{ after(grammarAccess.getVLSAnnotationTermsAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAnnotationTerms__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSAnnotationTerms__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAnnotationTerms__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSAnnotationTermsAccess().getTermsAssignment_1_1()); }
	(rule__VLSAnnotationTerms__TermsAssignment_1_1)
	{ after(grammarAccess.getVLSAnnotationTermsAccess().getTermsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSBinary__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSBinary__Group__0__Impl
	rule__VLSBinary__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSBinaryAccess().getVLSUnitaryFormulaParserRuleCall_0()); }
	ruleVLSUnitaryFormula
	{ after(grammarAccess.getVLSBinaryAccess().getVLSUnitaryFormulaParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSBinary__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSBinaryAccess().getAlternatives_1()); }
	(rule__VLSBinary__Alternatives_1)?
	{ after(grammarAccess.getVLSBinaryAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSBinary__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSBinary__Group_1_0__0__Impl
	rule__VLSBinary__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSBinaryAccess().getAlternatives_1_0_0()); }
	(rule__VLSBinary__Alternatives_1_0_0)
	{ after(grammarAccess.getVLSBinaryAccess().getAlternatives_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSBinary__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSBinaryAccess().getRightAssignment_1_0_1()); }
	(rule__VLSBinary__RightAssignment_1_0_1)
	{ after(grammarAccess.getVLSBinaryAccess().getRightAssignment_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSBinary__Group_1_0_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSBinary__Group_1_0_0_0__0__Impl
	rule__VLSBinary__Group_1_0_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group_1_0_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSBinaryAccess().getVLSEquivalentLeftAction_1_0_0_0_0()); }
	()
	{ after(grammarAccess.getVLSBinaryAccess().getVLSEquivalentLeftAction_1_0_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group_1_0_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSBinary__Group_1_0_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group_1_0_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSBinaryAccess().getLessThanSignEqualsSignGreaterThanSignKeyword_1_0_0_0_1()); }
	'<=>'
	{ after(grammarAccess.getVLSBinaryAccess().getLessThanSignEqualsSignGreaterThanSignKeyword_1_0_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSBinary__Group_1_0_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSBinary__Group_1_0_0_1__0__Impl
	rule__VLSBinary__Group_1_0_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group_1_0_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSBinaryAccess().getVLSImpliesLeftAction_1_0_0_1_0()); }
	()
	{ after(grammarAccess.getVLSBinaryAccess().getVLSImpliesLeftAction_1_0_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group_1_0_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSBinary__Group_1_0_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group_1_0_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSBinaryAccess().getEqualsSignGreaterThanSignKeyword_1_0_0_1_1()); }
	'=>'
	{ after(grammarAccess.getVLSBinaryAccess().getEqualsSignGreaterThanSignKeyword_1_0_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSBinary__Group_1_0_0_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSBinary__Group_1_0_0_2__0__Impl
	rule__VLSBinary__Group_1_0_0_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group_1_0_0_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSBinaryAccess().getVLSRevImpliesLeftAction_1_0_0_2_0()); }
	()
	{ after(grammarAccess.getVLSBinaryAccess().getVLSRevImpliesLeftAction_1_0_0_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group_1_0_0_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSBinary__Group_1_0_0_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group_1_0_0_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSBinaryAccess().getLessThanSignEqualsSignKeyword_1_0_0_2_1()); }
	'<='
	{ after(grammarAccess.getVLSBinaryAccess().getLessThanSignEqualsSignKeyword_1_0_0_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSBinary__Group_1_0_0_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSBinary__Group_1_0_0_3__0__Impl
	rule__VLSBinary__Group_1_0_0_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group_1_0_0_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSBinaryAccess().getVLSXnorLeftAction_1_0_0_3_0()); }
	()
	{ after(grammarAccess.getVLSBinaryAccess().getVLSXnorLeftAction_1_0_0_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group_1_0_0_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSBinary__Group_1_0_0_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group_1_0_0_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSBinaryAccess().getLessThanSignTildeGreaterThanSignKeyword_1_0_0_3_1()); }
	'<~>'
	{ after(grammarAccess.getVLSBinaryAccess().getLessThanSignTildeGreaterThanSignKeyword_1_0_0_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSBinary__Group_1_0_0_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSBinary__Group_1_0_0_4__0__Impl
	rule__VLSBinary__Group_1_0_0_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group_1_0_0_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSBinaryAccess().getVLSNorLeftAction_1_0_0_4_0()); }
	()
	{ after(grammarAccess.getVLSBinaryAccess().getVLSNorLeftAction_1_0_0_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group_1_0_0_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSBinary__Group_1_0_0_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group_1_0_0_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSBinaryAccess().getTildeVerticalLineKeyword_1_0_0_4_1()); }
	'~|'
	{ after(grammarAccess.getVLSBinaryAccess().getTildeVerticalLineKeyword_1_0_0_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSBinary__Group_1_0_0_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSBinary__Group_1_0_0_5__0__Impl
	rule__VLSBinary__Group_1_0_0_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group_1_0_0_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSBinaryAccess().getVLSNandLeftAction_1_0_0_5_0()); }
	()
	{ after(grammarAccess.getVLSBinaryAccess().getVLSNandLeftAction_1_0_0_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group_1_0_0_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSBinary__Group_1_0_0_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group_1_0_0_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSBinaryAccess().getTildeAmpersandKeyword_1_0_0_5_1()); }
	'~&'
	{ after(grammarAccess.getVLSBinaryAccess().getTildeAmpersandKeyword_1_0_0_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSBinary__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSBinary__Group_1_1__0__Impl
	rule__VLSBinary__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSBinaryAccess().getVLSAndLeftAction_1_1_0()); }
	()
	{ after(grammarAccess.getVLSBinaryAccess().getVLSAndLeftAction_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSBinary__Group_1_1__1__Impl
	rule__VLSBinary__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSBinaryAccess().getAmpersandKeyword_1_1_1()); }
	'&'
	{ after(grammarAccess.getVLSBinaryAccess().getAmpersandKeyword_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group_1_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSBinary__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group_1_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSBinaryAccess().getRightAssignment_1_1_2()); }
	(rule__VLSBinary__RightAssignment_1_1_2)
	{ after(grammarAccess.getVLSBinaryAccess().getRightAssignment_1_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSBinary__Group_1_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSBinary__Group_1_2__0__Impl
	rule__VLSBinary__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group_1_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSBinaryAccess().getVLSOrLeftAction_1_2_0()); }
	()
	{ after(grammarAccess.getVLSBinaryAccess().getVLSOrLeftAction_1_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group_1_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSBinary__Group_1_2__1__Impl
	rule__VLSBinary__Group_1_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group_1_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSBinaryAccess().getVerticalLineKeyword_1_2_1()); }
	'|'
	{ after(grammarAccess.getVLSBinaryAccess().getVerticalLineKeyword_1_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group_1_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSBinary__Group_1_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group_1_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSBinaryAccess().getRightAssignment_1_2_2()); }
	(rule__VLSBinary__RightAssignment_1_2_2)
	{ after(grammarAccess.getVLSBinaryAccess().getRightAssignment_1_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSUnitaryFormula__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSUnitaryFormula__Group_4__0__Impl
	rule__VLSUnitaryFormula__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUnitaryFormula__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSUnitaryFormulaAccess().getLeftParenthesisKeyword_4_0()); }
	'('
	{ after(grammarAccess.getVLSUnitaryFormulaAccess().getLeftParenthesisKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUnitaryFormula__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSUnitaryFormula__Group_4__1__Impl
	rule__VLSUnitaryFormula__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUnitaryFormula__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSUnitaryFormulaAccess().getVLSTermParserRuleCall_4_1()); }
	ruleVLSTerm
	{ after(grammarAccess.getVLSUnitaryFormulaAccess().getVLSTermParserRuleCall_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUnitaryFormula__Group_4__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSUnitaryFormula__Group_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUnitaryFormula__Group_4__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSUnitaryFormulaAccess().getRightParenthesisKeyword_4_2()); }
	')'
	{ after(grammarAccess.getVLSUnitaryFormulaAccess().getRightParenthesisKeyword_4_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSUniversalQuantifier__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSUniversalQuantifier__Group__0__Impl
	rule__VLSUniversalQuantifier__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUniversalQuantifier__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSUniversalQuantifierAccess().getVLSUniversalQuantifierAction_0()); }
	()
	{ after(grammarAccess.getVLSUniversalQuantifierAccess().getVLSUniversalQuantifierAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUniversalQuantifier__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSUniversalQuantifier__Group__1__Impl
	rule__VLSUniversalQuantifier__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUniversalQuantifier__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSUniversalQuantifierAccess().getGroup_1()); }
	(rule__VLSUniversalQuantifier__Group_1__0)
	{ after(grammarAccess.getVLSUniversalQuantifierAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUniversalQuantifier__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSUniversalQuantifier__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUniversalQuantifier__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSUniversalQuantifierAccess().getOperandAssignment_2()); }
	(rule__VLSUniversalQuantifier__OperandAssignment_2)
	{ after(grammarAccess.getVLSUniversalQuantifierAccess().getOperandAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSUniversalQuantifier__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSUniversalQuantifier__Group_1__0__Impl
	rule__VLSUniversalQuantifier__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUniversalQuantifier__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSUniversalQuantifierAccess().getExclamationMarkKeyword_1_0()); }
	'!'
	{ after(grammarAccess.getVLSUniversalQuantifierAccess().getExclamationMarkKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUniversalQuantifier__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSUniversalQuantifier__Group_1__1__Impl
	rule__VLSUniversalQuantifier__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUniversalQuantifier__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSUniversalQuantifierAccess().getLeftSquareBracketKeyword_1_1()); }
	'['
	{ after(grammarAccess.getVLSUniversalQuantifierAccess().getLeftSquareBracketKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUniversalQuantifier__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSUniversalQuantifier__Group_1__2__Impl
	rule__VLSUniversalQuantifier__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUniversalQuantifier__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSUniversalQuantifierAccess().getVariablesAssignment_1_2()); }
	(rule__VLSUniversalQuantifier__VariablesAssignment_1_2)
	{ after(grammarAccess.getVLSUniversalQuantifierAccess().getVariablesAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUniversalQuantifier__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSUniversalQuantifier__Group_1__3__Impl
	rule__VLSUniversalQuantifier__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUniversalQuantifier__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSUniversalQuantifierAccess().getGroup_1_3()); }
	(rule__VLSUniversalQuantifier__Group_1_3__0)*
	{ after(grammarAccess.getVLSUniversalQuantifierAccess().getGroup_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUniversalQuantifier__Group_1__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSUniversalQuantifier__Group_1__4__Impl
	rule__VLSUniversalQuantifier__Group_1__5
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUniversalQuantifier__Group_1__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSUniversalQuantifierAccess().getRightSquareBracketKeyword_1_4()); }
	']'
	{ after(grammarAccess.getVLSUniversalQuantifierAccess().getRightSquareBracketKeyword_1_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUniversalQuantifier__Group_1__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSUniversalQuantifier__Group_1__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUniversalQuantifier__Group_1__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSUniversalQuantifierAccess().getColonKeyword_1_5()); }
	':'
	{ after(grammarAccess.getVLSUniversalQuantifierAccess().getColonKeyword_1_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSUniversalQuantifier__Group_1_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSUniversalQuantifier__Group_1_3__0__Impl
	rule__VLSUniversalQuantifier__Group_1_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUniversalQuantifier__Group_1_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSUniversalQuantifierAccess().getCommaKeyword_1_3_0()); }
	','
	{ after(grammarAccess.getVLSUniversalQuantifierAccess().getCommaKeyword_1_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUniversalQuantifier__Group_1_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSUniversalQuantifier__Group_1_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUniversalQuantifier__Group_1_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSUniversalQuantifierAccess().getVariablesAssignment_1_3_1()); }
	(rule__VLSUniversalQuantifier__VariablesAssignment_1_3_1)
	{ after(grammarAccess.getVLSUniversalQuantifierAccess().getVariablesAssignment_1_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSExistentialQuantifier__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSExistentialQuantifier__Group__0__Impl
	rule__VLSExistentialQuantifier__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSExistentialQuantifier__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSExistentialQuantifierAccess().getVLSExistentialQuantifierAction_0()); }
	()
	{ after(grammarAccess.getVLSExistentialQuantifierAccess().getVLSExistentialQuantifierAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSExistentialQuantifier__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSExistentialQuantifier__Group__1__Impl
	rule__VLSExistentialQuantifier__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSExistentialQuantifier__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSExistentialQuantifierAccess().getGroup_1()); }
	(rule__VLSExistentialQuantifier__Group_1__0)
	{ after(grammarAccess.getVLSExistentialQuantifierAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSExistentialQuantifier__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSExistentialQuantifier__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSExistentialQuantifier__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSExistentialQuantifierAccess().getOperandAssignment_2()); }
	(rule__VLSExistentialQuantifier__OperandAssignment_2)
	{ after(grammarAccess.getVLSExistentialQuantifierAccess().getOperandAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSExistentialQuantifier__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSExistentialQuantifier__Group_1__0__Impl
	rule__VLSExistentialQuantifier__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSExistentialQuantifier__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSExistentialQuantifierAccess().getQuestionMarkKeyword_1_0()); }
	'?'
	{ after(grammarAccess.getVLSExistentialQuantifierAccess().getQuestionMarkKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSExistentialQuantifier__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSExistentialQuantifier__Group_1__1__Impl
	rule__VLSExistentialQuantifier__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSExistentialQuantifier__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSExistentialQuantifierAccess().getLeftSquareBracketKeyword_1_1()); }
	'['
	{ after(grammarAccess.getVLSExistentialQuantifierAccess().getLeftSquareBracketKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSExistentialQuantifier__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSExistentialQuantifier__Group_1__2__Impl
	rule__VLSExistentialQuantifier__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSExistentialQuantifier__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSExistentialQuantifierAccess().getVariablesAssignment_1_2()); }
	(rule__VLSExistentialQuantifier__VariablesAssignment_1_2)
	{ after(grammarAccess.getVLSExistentialQuantifierAccess().getVariablesAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSExistentialQuantifier__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSExistentialQuantifier__Group_1__3__Impl
	rule__VLSExistentialQuantifier__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSExistentialQuantifier__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSExistentialQuantifierAccess().getGroup_1_3()); }
	(rule__VLSExistentialQuantifier__Group_1_3__0)*
	{ after(grammarAccess.getVLSExistentialQuantifierAccess().getGroup_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSExistentialQuantifier__Group_1__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSExistentialQuantifier__Group_1__4__Impl
	rule__VLSExistentialQuantifier__Group_1__5
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSExistentialQuantifier__Group_1__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSExistentialQuantifierAccess().getRightSquareBracketKeyword_1_4()); }
	']'
	{ after(grammarAccess.getVLSExistentialQuantifierAccess().getRightSquareBracketKeyword_1_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSExistentialQuantifier__Group_1__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSExistentialQuantifier__Group_1__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSExistentialQuantifier__Group_1__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSExistentialQuantifierAccess().getColonKeyword_1_5()); }
	':'
	{ after(grammarAccess.getVLSExistentialQuantifierAccess().getColonKeyword_1_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSExistentialQuantifier__Group_1_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSExistentialQuantifier__Group_1_3__0__Impl
	rule__VLSExistentialQuantifier__Group_1_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSExistentialQuantifier__Group_1_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSExistentialQuantifierAccess().getCommaKeyword_1_3_0()); }
	','
	{ after(grammarAccess.getVLSExistentialQuantifierAccess().getCommaKeyword_1_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSExistentialQuantifier__Group_1_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSExistentialQuantifier__Group_1_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSExistentialQuantifier__Group_1_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSExistentialQuantifierAccess().getVariablesAssignment_1_3_1()); }
	(rule__VLSExistentialQuantifier__VariablesAssignment_1_3_1)
	{ after(grammarAccess.getVLSExistentialQuantifierAccess().getVariablesAssignment_1_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSUnaryNegation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSUnaryNegation__Group__0__Impl
	rule__VLSUnaryNegation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUnaryNegation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSUnaryNegationAccess().getVLSUnaryNegationAction_0()); }
	()
	{ after(grammarAccess.getVLSUnaryNegationAccess().getVLSUnaryNegationAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUnaryNegation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSUnaryNegation__Group__1__Impl
	rule__VLSUnaryNegation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUnaryNegation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSUnaryNegationAccess().getTildeKeyword_1()); }
	'~'
	{ after(grammarAccess.getVLSUnaryNegationAccess().getTildeKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUnaryNegation__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSUnaryNegation__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUnaryNegation__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSUnaryNegationAccess().getOperandAssignment_2()); }
	(rule__VLSUnaryNegation__OperandAssignment_2)
	{ after(grammarAccess.getVLSUnaryNegationAccess().getOperandAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSUnaryInfix__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSUnaryInfix__Group__0__Impl
	rule__VLSUnaryInfix__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUnaryInfix__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSUnaryInfixAccess().getVLSAtomicParserRuleCall_0()); }
	ruleVLSAtomic
	{ after(grammarAccess.getVLSUnaryInfixAccess().getVLSAtomicParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUnaryInfix__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSUnaryInfix__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUnaryInfix__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSUnaryInfixAccess().getGroup_1()); }
	(rule__VLSUnaryInfix__Group_1__0)?
	{ after(grammarAccess.getVLSUnaryInfixAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSUnaryInfix__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSUnaryInfix__Group_1__0__Impl
	rule__VLSUnaryInfix__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUnaryInfix__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSUnaryInfixAccess().getAlternatives_1_0()); }
	(rule__VLSUnaryInfix__Alternatives_1_0)
	{ after(grammarAccess.getVLSUnaryInfixAccess().getAlternatives_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUnaryInfix__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSUnaryInfix__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUnaryInfix__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSUnaryInfixAccess().getRightAssignment_1_1()); }
	(rule__VLSUnaryInfix__RightAssignment_1_1)
	{ after(grammarAccess.getVLSUnaryInfixAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSUnaryInfix__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSUnaryInfix__Group_1_0_0__0__Impl
	rule__VLSUnaryInfix__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUnaryInfix__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSUnaryInfixAccess().getVLSInequalityLeftAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getVLSUnaryInfixAccess().getVLSInequalityLeftAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUnaryInfix__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSUnaryInfix__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUnaryInfix__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSUnaryInfixAccess().getExclamationMarkEqualsSignKeyword_1_0_0_1()); }
	'!='
	{ after(grammarAccess.getVLSUnaryInfixAccess().getExclamationMarkEqualsSignKeyword_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSUnaryInfix__Group_1_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSUnaryInfix__Group_1_0_1__0__Impl
	rule__VLSUnaryInfix__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUnaryInfix__Group_1_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSUnaryInfixAccess().getVLSEqualityLeftAction_1_0_1_0()); }
	()
	{ after(grammarAccess.getVLSUnaryInfixAccess().getVLSEqualityLeftAction_1_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUnaryInfix__Group_1_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSUnaryInfix__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUnaryInfix__Group_1_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSUnaryInfixAccess().getEqualsSignKeyword_1_0_1_1()); }
	'='
	{ after(grammarAccess.getVLSUnaryInfixAccess().getEqualsSignKeyword_1_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSUnaryInfix__Group_1_0_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSUnaryInfix__Group_1_0_2__0__Impl
	rule__VLSUnaryInfix__Group_1_0_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUnaryInfix__Group_1_0_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSUnaryInfixAccess().getVLSAssignmentLeftAction_1_0_2_0()); }
	()
	{ after(grammarAccess.getVLSUnaryInfixAccess().getVLSAssignmentLeftAction_1_0_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUnaryInfix__Group_1_0_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSUnaryInfix__Group_1_0_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUnaryInfix__Group_1_0_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSUnaryInfixAccess().getColonEqualsSignKeyword_1_0_2_1()); }
	':='
	{ after(grammarAccess.getVLSUnaryInfixAccess().getColonEqualsSignKeyword_1_0_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSAtomicConstant__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSAtomicConstant__Group_0__0__Impl
	rule__VLSAtomicConstant__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAtomicConstant__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSAtomicConstantAccess().getVLSConstantAction_0_0()); }
	()
	{ after(grammarAccess.getVLSAtomicConstantAccess().getVLSConstantAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAtomicConstant__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSAtomicConstant__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAtomicConstant__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSAtomicConstantAccess().getNameAssignment_0_1()); }
	(rule__VLSAtomicConstant__NameAssignment_0_1)
	{ after(grammarAccess.getVLSAtomicConstantAccess().getNameAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSAtomicConstant__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSAtomicConstant__Group_1__0__Impl
	rule__VLSAtomicConstant__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAtomicConstant__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSAtomicConstantAccess().getVLSTrueAction_1_0()); }
	()
	{ after(grammarAccess.getVLSAtomicConstantAccess().getVLSTrueAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAtomicConstant__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSAtomicConstant__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAtomicConstant__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSAtomicConstantAccess().getTrueKeyword_1_1()); }
	'$true'
	{ after(grammarAccess.getVLSAtomicConstantAccess().getTrueKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSAtomicConstant__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSAtomicConstant__Group_2__0__Impl
	rule__VLSAtomicConstant__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAtomicConstant__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSAtomicConstantAccess().getVLSFalseAction_2_0()); }
	()
	{ after(grammarAccess.getVLSAtomicConstantAccess().getVLSFalseAction_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAtomicConstant__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSAtomicConstant__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAtomicConstant__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSAtomicConstantAccess().getFalseKeyword_2_1()); }
	'$false'
	{ after(grammarAccess.getVLSAtomicConstantAccess().getFalseKeyword_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSAtomicFunction__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSAtomicFunction__Group_0__0__Impl
	rule__VLSAtomicFunction__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAtomicFunction__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSAtomicFunctionAccess().getVLSFunctionAction_0_0()); }
	()
	{ after(grammarAccess.getVLSAtomicFunctionAccess().getVLSFunctionAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAtomicFunction__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSAtomicFunction__Group_0__1__Impl
	rule__VLSAtomicFunction__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAtomicFunction__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSAtomicFunctionAccess().getConstantAssignment_0_1()); }
	(rule__VLSAtomicFunction__ConstantAssignment_0_1)
	{ after(grammarAccess.getVLSAtomicFunctionAccess().getConstantAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAtomicFunction__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSAtomicFunction__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAtomicFunction__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSAtomicFunctionAccess().getGroup_0_2()); }
	(rule__VLSAtomicFunction__Group_0_2__0)
	{ after(grammarAccess.getVLSAtomicFunctionAccess().getGroup_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSAtomicFunction__Group_0_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSAtomicFunction__Group_0_2__0__Impl
	rule__VLSAtomicFunction__Group_0_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAtomicFunction__Group_0_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSAtomicFunctionAccess().getLeftParenthesisKeyword_0_2_0()); }
	'('
	{ after(grammarAccess.getVLSAtomicFunctionAccess().getLeftParenthesisKeyword_0_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAtomicFunction__Group_0_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSAtomicFunction__Group_0_2__1__Impl
	rule__VLSAtomicFunction__Group_0_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAtomicFunction__Group_0_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSAtomicFunctionAccess().getTermsAssignment_0_2_1()); }
	(rule__VLSAtomicFunction__TermsAssignment_0_2_1)
	{ after(grammarAccess.getVLSAtomicFunctionAccess().getTermsAssignment_0_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAtomicFunction__Group_0_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSAtomicFunction__Group_0_2__2__Impl
	rule__VLSAtomicFunction__Group_0_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAtomicFunction__Group_0_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSAtomicFunctionAccess().getGroup_0_2_2()); }
	(rule__VLSAtomicFunction__Group_0_2_2__0)*
	{ after(grammarAccess.getVLSAtomicFunctionAccess().getGroup_0_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAtomicFunction__Group_0_2__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSAtomicFunction__Group_0_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAtomicFunction__Group_0_2__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSAtomicFunctionAccess().getRightParenthesisKeyword_0_2_3()); }
	')'
	{ after(grammarAccess.getVLSAtomicFunctionAccess().getRightParenthesisKeyword_0_2_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSAtomicFunction__Group_0_2_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSAtomicFunction__Group_0_2_2__0__Impl
	rule__VLSAtomicFunction__Group_0_2_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAtomicFunction__Group_0_2_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSAtomicFunctionAccess().getCommaKeyword_0_2_2_0()); }
	','
	{ after(grammarAccess.getVLSAtomicFunctionAccess().getCommaKeyword_0_2_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAtomicFunction__Group_0_2_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSAtomicFunction__Group_0_2_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAtomicFunction__Group_0_2_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSAtomicFunctionAccess().getTermsAssignment_0_2_2_1()); }
	(rule__VLSAtomicFunction__TermsAssignment_0_2_2_1)
	{ after(grammarAccess.getVLSAtomicFunctionAccess().getTermsAssignment_0_2_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSAtomicFunction__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSAtomicFunction__Group_1__0__Impl
	rule__VLSAtomicFunction__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAtomicFunction__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSAtomicFunctionAccess().getVLSLessAction_1_0()); }
	()
	{ after(grammarAccess.getVLSAtomicFunctionAccess().getVLSLessAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAtomicFunction__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSAtomicFunction__Group_1__1__Impl
	rule__VLSAtomicFunction__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAtomicFunction__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSAtomicFunctionAccess().getNameAssignment_1_1()); }
	(rule__VLSAtomicFunction__NameAssignment_1_1)
	{ after(grammarAccess.getVLSAtomicFunctionAccess().getNameAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAtomicFunction__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSAtomicFunction__Group_1__2__Impl
	rule__VLSAtomicFunction__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAtomicFunction__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSAtomicFunctionAccess().getLeftParenthesisKeyword_1_2()); }
	'('
	{ after(grammarAccess.getVLSAtomicFunctionAccess().getLeftParenthesisKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAtomicFunction__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSAtomicFunction__Group_1__3__Impl
	rule__VLSAtomicFunction__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAtomicFunction__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSAtomicFunctionAccess().getTermsAssignment_1_3()); }
	(rule__VLSAtomicFunction__TermsAssignment_1_3)
	{ after(grammarAccess.getVLSAtomicFunctionAccess().getTermsAssignment_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAtomicFunction__Group_1__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSAtomicFunction__Group_1__4__Impl
	rule__VLSAtomicFunction__Group_1__5
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAtomicFunction__Group_1__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSAtomicFunctionAccess().getCommaKeyword_1_4()); }
	','
	{ after(grammarAccess.getVLSAtomicFunctionAccess().getCommaKeyword_1_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAtomicFunction__Group_1__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSAtomicFunction__Group_1__5__Impl
	rule__VLSAtomicFunction__Group_1__6
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAtomicFunction__Group_1__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSAtomicFunctionAccess().getTermsAssignment_1_5()); }
	(rule__VLSAtomicFunction__TermsAssignment_1_5)
	{ after(grammarAccess.getVLSAtomicFunctionAccess().getTermsAssignment_1_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAtomicFunction__Group_1__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSAtomicFunction__Group_1__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAtomicFunction__Group_1__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSAtomicFunctionAccess().getRightParenthesisKeyword_1_6()); }
	')'
	{ after(grammarAccess.getVLSAtomicFunctionAccess().getRightParenthesisKeyword_1_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSFunctionAsTerm__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSFunctionAsTerm__Group__0__Impl
	rule__VLSFunctionAsTerm__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFunctionAsTerm__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSFunctionAsTermAccess().getFunctorAssignment_0()); }
	(rule__VLSFunctionAsTerm__FunctorAssignment_0)
	{ after(grammarAccess.getVLSFunctionAsTermAccess().getFunctorAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFunctionAsTerm__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSFunctionAsTerm__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFunctionAsTerm__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSFunctionAsTermAccess().getGroup_1()); }
	(rule__VLSFunctionAsTerm__Group_1__0)?
	{ after(grammarAccess.getVLSFunctionAsTermAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSFunctionAsTerm__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSFunctionAsTerm__Group_1__0__Impl
	rule__VLSFunctionAsTerm__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFunctionAsTerm__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSFunctionAsTermAccess().getLeftParenthesisKeyword_1_0()); }
	'('
	{ after(grammarAccess.getVLSFunctionAsTermAccess().getLeftParenthesisKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFunctionAsTerm__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSFunctionAsTerm__Group_1__1__Impl
	rule__VLSFunctionAsTerm__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFunctionAsTerm__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSFunctionAsTermAccess().getTermsAssignment_1_1()); }
	(rule__VLSFunctionAsTerm__TermsAssignment_1_1)
	{ after(grammarAccess.getVLSFunctionAsTermAccess().getTermsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFunctionAsTerm__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSFunctionAsTerm__Group_1__2__Impl
	rule__VLSFunctionAsTerm__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFunctionAsTerm__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSFunctionAsTermAccess().getGroup_1_2()); }
	(rule__VLSFunctionAsTerm__Group_1_2__0)*
	{ after(grammarAccess.getVLSFunctionAsTermAccess().getGroup_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFunctionAsTerm__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSFunctionAsTerm__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFunctionAsTerm__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSFunctionAsTermAccess().getRightParenthesisKeyword_1_3()); }
	')'
	{ after(grammarAccess.getVLSFunctionAsTermAccess().getRightParenthesisKeyword_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSFunctionAsTerm__Group_1_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSFunctionAsTerm__Group_1_2__0__Impl
	rule__VLSFunctionAsTerm__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFunctionAsTerm__Group_1_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSFunctionAsTermAccess().getCommaKeyword_1_2_0()); }
	','
	{ after(grammarAccess.getVLSFunctionAsTermAccess().getCommaKeyword_1_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFunctionAsTerm__Group_1_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSFunctionAsTerm__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFunctionAsTerm__Group_1_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSFunctionAsTermAccess().getTermsAssignment_1_2_1()); }
	(rule__VLSFunctionAsTerm__TermsAssignment_1_2_1)
	{ after(grammarAccess.getVLSFunctionAsTermAccess().getTermsAssignment_1_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSDefinedTerm__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSDefinedTerm__Group_0__0__Impl
	rule__VLSDefinedTerm__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSDefinedTerm__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSDefinedTermAccess().getVLSIntAction_0_0()); }
	()
	{ after(grammarAccess.getVLSDefinedTermAccess().getVLSIntAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSDefinedTerm__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSDefinedTerm__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSDefinedTerm__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSDefinedTermAccess().getValueAssignment_0_1()); }
	(rule__VLSDefinedTerm__ValueAssignment_0_1)
	{ after(grammarAccess.getVLSDefinedTermAccess().getValueAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSDefinedTerm__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSDefinedTerm__Group_1__0__Impl
	rule__VLSDefinedTerm__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSDefinedTerm__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSDefinedTermAccess().getVLSRealAction_1_0()); }
	()
	{ after(grammarAccess.getVLSDefinedTermAccess().getVLSRealAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSDefinedTerm__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSDefinedTerm__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSDefinedTerm__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSDefinedTermAccess().getValueAssignment_1_1()); }
	(rule__VLSDefinedTerm__ValueAssignment_1_1)
	{ after(grammarAccess.getVLSDefinedTermAccess().getValueAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSDefinedTerm__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSDefinedTerm__Group_2__0__Impl
	rule__VLSDefinedTerm__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSDefinedTerm__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSDefinedTermAccess().getVLSRationalAction_2_0()); }
	()
	{ after(grammarAccess.getVLSDefinedTermAccess().getVLSRationalAction_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSDefinedTerm__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSDefinedTerm__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSDefinedTerm__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSDefinedTermAccess().getValueAssignment_2_1()); }
	(rule__VLSDefinedTerm__ValueAssignment_2_1)
	{ after(grammarAccess.getVLSDefinedTermAccess().getValueAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSDefinedTerm__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSDefinedTerm__Group_3__0__Impl
	rule__VLSDefinedTerm__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSDefinedTerm__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSDefinedTermAccess().getVLSDoubleQuoteAction_3_0()); }
	()
	{ after(grammarAccess.getVLSDefinedTermAccess().getVLSDoubleQuoteAction_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSDefinedTerm__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSDefinedTerm__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSDefinedTerm__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSDefinedTermAccess().getValueAssignment_3_1()); }
	(rule__VLSDefinedTerm__ValueAssignment_3_1)
	{ after(grammarAccess.getVLSDefinedTermAccess().getValueAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VampireModel__IncludesAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVampireModelAccess().getIncludesVLSIncludeParserRuleCall_0_0()); }
		ruleVLSInclude
		{ after(grammarAccess.getVampireModelAccess().getIncludesVLSIncludeParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VampireModel__CommentsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVampireModelAccess().getCommentsVLSCommentParserRuleCall_1_0()); }
		ruleVLSComment
		{ after(grammarAccess.getVampireModelAccess().getCommentsVLSCommentParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VampireModel__ConfirmationsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVampireModelAccess().getConfirmationsVLSConfirmationsParserRuleCall_2_0()); }
		ruleVLSConfirmations
		{ after(grammarAccess.getVampireModelAccess().getConfirmationsVLSConfirmationsParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VampireModel__FormulasAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVampireModelAccess().getFormulasVLSFofFormulaParserRuleCall_3_0()); }
		ruleVLSFofFormula
		{ after(grammarAccess.getVampireModelAccess().getFormulasVLSFofFormulaParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VampireModel__TfformulasAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVampireModelAccess().getTfformulasVLSTffFormulaParserRuleCall_4_0()); }
		ruleVLSTffFormula
		{ after(grammarAccess.getVampireModelAccess().getTfformulasVLSTffFormulaParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSInclude__FileNameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSIncludeAccess().getFileNameSINGLE_QUOTETerminalRuleCall_1_0()); }
		RULE_SINGLE_QUOTE
		{ after(grammarAccess.getVLSIncludeAccess().getFileNameSINGLE_QUOTETerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSInclude__NamesAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSIncludeAccess().getNamesVLSNameParserRuleCall_2_1_0()); }
		ruleVLSName
		{ after(grammarAccess.getVLSIncludeAccess().getNamesVLSNameParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSInclude__NamesAssignment_2_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSIncludeAccess().getNamesVLSNameParserRuleCall_2_2_1_0()); }
		ruleVLSName
		{ after(grammarAccess.getVLSIncludeAccess().getNamesVLSNameParserRuleCall_2_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSName__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSNameAccess().getNameAlternatives_0()); }
		(rule__VLSName__NameAlternatives_0)
		{ after(grammarAccess.getVLSNameAccess().getNameAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSComment__CommentAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSCommentAccess().getCommentSINGLE_COMMENTTerminalRuleCall_1_0()); }
		RULE_SINGLE_COMMENT
		{ after(grammarAccess.getVLSCommentAccess().getCommentSINGLE_COMMENTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFofFormula__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSFofFormulaAccess().getNameAlternatives_2_0()); }
		(rule__VLSFofFormula__NameAlternatives_2_0)
		{ after(grammarAccess.getVLSFofFormulaAccess().getNameAlternatives_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFofFormula__FofRoleAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSFofFormulaAccess().getFofRoleVLSRoleParserRuleCall_4_0()); }
		ruleVLSRole
		{ after(grammarAccess.getVLSFofFormulaAccess().getFofRoleVLSRoleParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFofFormula__FofFormulaAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSFofFormulaAccess().getFofFormulaVLSTermParserRuleCall_6_0()); }
		ruleVLSTerm
		{ after(grammarAccess.getVLSFofFormulaAccess().getFofFormulaVLSTermParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFofFormula__AnnotationsAssignment_7_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSFofFormulaAccess().getAnnotationsVLSAnnotationParserRuleCall_7_1_0()); }
		ruleVLSAnnotation
		{ after(grammarAccess.getVLSFofFormulaAccess().getAnnotationsVLSAnnotationParserRuleCall_7_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSTffFormula__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSTffFormulaAccess().getNameAlternatives_2_0()); }
		(rule__VLSTffFormula__NameAlternatives_2_0)
		{ after(grammarAccess.getVLSTffFormulaAccess().getNameAlternatives_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSTffFormula__FofRoleAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSTffFormulaAccess().getFofRoleVLSRoleParserRuleCall_4_0()); }
		ruleVLSRole
		{ after(grammarAccess.getVLSTffFormulaAccess().getFofRoleVLSRoleParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSTffFormula__FofFormulaAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSTffFormulaAccess().getFofFormulaVLSTermParserRuleCall_6_0()); }
		ruleVLSTerm
		{ after(grammarAccess.getVLSTffFormulaAccess().getFofFormulaVLSTermParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSTffFormula__AnnotationsAssignment_7_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSTffFormulaAccess().getAnnotationsVLSAnnotationParserRuleCall_7_1_0()); }
		ruleVLSAnnotation
		{ after(grammarAccess.getVLSTffFormulaAccess().getAnnotationsVLSAnnotationParserRuleCall_7_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAnnotation__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSAnnotationAccess().getNameAlternatives_1_0()); }
		(rule__VLSAnnotation__NameAlternatives_1_0)
		{ after(grammarAccess.getVLSAnnotationAccess().getNameAlternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAnnotation__FollowupAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSAnnotationAccess().getFollowupVLSAnnotationTermsParserRuleCall_2_1_0()); }
		ruleVLSAnnotationTerms
		{ after(grammarAccess.getVLSAnnotationAccess().getFollowupVLSAnnotationTermsParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAnnotationTerms__TermsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSAnnotationTermsAccess().getTermsVLSAnnotationParserRuleCall_0_0()); }
		ruleVLSAnnotation
		{ after(grammarAccess.getVLSAnnotationTermsAccess().getTermsVLSAnnotationParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAnnotationTerms__TermsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSAnnotationTermsAccess().getTermsVLSAnnotationParserRuleCall_1_1_0()); }
		ruleVLSAnnotation
		{ after(grammarAccess.getVLSAnnotationTermsAccess().getTermsVLSAnnotationParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__RightAssignment_1_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSBinaryAccess().getRightVLSUnitaryFormulaParserRuleCall_1_0_1_0()); }
		ruleVLSUnitaryFormula
		{ after(grammarAccess.getVLSBinaryAccess().getRightVLSUnitaryFormulaParserRuleCall_1_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__RightAssignment_1_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSBinaryAccess().getRightVLSUnitaryFormulaParserRuleCall_1_1_2_0()); }
		ruleVLSUnitaryFormula
		{ after(grammarAccess.getVLSBinaryAccess().getRightVLSUnitaryFormulaParserRuleCall_1_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__RightAssignment_1_2_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSBinaryAccess().getRightVLSUnitaryFormulaParserRuleCall_1_2_2_0()); }
		ruleVLSUnitaryFormula
		{ after(grammarAccess.getVLSBinaryAccess().getRightVLSUnitaryFormulaParserRuleCall_1_2_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUniversalQuantifier__VariablesAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSUniversalQuantifierAccess().getVariablesVLSVariableParserRuleCall_1_2_0()); }
		ruleVLSVariable
		{ after(grammarAccess.getVLSUniversalQuantifierAccess().getVariablesVLSVariableParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUniversalQuantifier__VariablesAssignment_1_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSUniversalQuantifierAccess().getVariablesVLSVariableParserRuleCall_1_3_1_0()); }
		ruleVLSVariable
		{ after(grammarAccess.getVLSUniversalQuantifierAccess().getVariablesVLSVariableParserRuleCall_1_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUniversalQuantifier__OperandAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSUniversalQuantifierAccess().getOperandVLSUnitaryFormulaParserRuleCall_2_0()); }
		ruleVLSUnitaryFormula
		{ after(grammarAccess.getVLSUniversalQuantifierAccess().getOperandVLSUnitaryFormulaParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSExistentialQuantifier__VariablesAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSExistentialQuantifierAccess().getVariablesVLSVariableParserRuleCall_1_2_0()); }
		ruleVLSVariable
		{ after(grammarAccess.getVLSExistentialQuantifierAccess().getVariablesVLSVariableParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSExistentialQuantifier__VariablesAssignment_1_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSExistentialQuantifierAccess().getVariablesVLSVariableParserRuleCall_1_3_1_0()); }
		ruleVLSVariable
		{ after(grammarAccess.getVLSExistentialQuantifierAccess().getVariablesVLSVariableParserRuleCall_1_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSExistentialQuantifier__OperandAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSExistentialQuantifierAccess().getOperandVLSUnitaryFormulaParserRuleCall_2_0()); }
		ruleVLSUnitaryFormula
		{ after(grammarAccess.getVLSExistentialQuantifierAccess().getOperandVLSUnitaryFormulaParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUnaryNegation__OperandAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSUnaryNegationAccess().getOperandVLSUnitaryFormulaParserRuleCall_2_0()); }
		ruleVLSUnitaryFormula
		{ after(grammarAccess.getVLSUnaryNegationAccess().getOperandVLSUnitaryFormulaParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUnaryInfix__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSUnaryInfixAccess().getRightVLSAtomicParserRuleCall_1_1_0()); }
		ruleVLSAtomic
		{ after(grammarAccess.getVLSUnaryInfixAccess().getRightVLSAtomicParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAtomicConstant__NameAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSAtomicConstantAccess().getNameAlternatives_0_1_0()); }
		(rule__VLSAtomicConstant__NameAlternatives_0_1_0)
		{ after(grammarAccess.getVLSAtomicConstantAccess().getNameAlternatives_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAtomicFunction__ConstantAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSAtomicFunctionAccess().getConstantAlternatives_0_1_0()); }
		(rule__VLSAtomicFunction__ConstantAlternatives_0_1_0)
		{ after(grammarAccess.getVLSAtomicFunctionAccess().getConstantAlternatives_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAtomicFunction__TermsAssignment_0_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSAtomicFunctionAccess().getTermsVLSFofTermParserRuleCall_0_2_1_0()); }
		ruleVLSFofTerm
		{ after(grammarAccess.getVLSAtomicFunctionAccess().getTermsVLSFofTermParserRuleCall_0_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAtomicFunction__TermsAssignment_0_2_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSAtomicFunctionAccess().getTermsVLSFofTermParserRuleCall_0_2_2_1_0()); }
		ruleVLSFofTerm
		{ after(grammarAccess.getVLSAtomicFunctionAccess().getTermsVLSFofTermParserRuleCall_0_2_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAtomicFunction__NameAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSAtomicFunctionAccess().getNameLessKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getVLSAtomicFunctionAccess().getNameLessKeyword_1_1_0()); }
			'$less'
			{ after(grammarAccess.getVLSAtomicFunctionAccess().getNameLessKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getVLSAtomicFunctionAccess().getNameLessKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAtomicFunction__TermsAssignment_1_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSAtomicFunctionAccess().getTermsVLSFofTermParserRuleCall_1_3_0()); }
		ruleVLSFofTerm
		{ after(grammarAccess.getVLSAtomicFunctionAccess().getTermsVLSFofTermParserRuleCall_1_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAtomicFunction__TermsAssignment_1_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSAtomicFunctionAccess().getTermsVLSFofTermParserRuleCall_1_5_0()); }
		ruleVLSFofTerm
		{ after(grammarAccess.getVLSAtomicFunctionAccess().getTermsVLSFofTermParserRuleCall_1_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSVariable__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSVariableAccess().getNameUPPER_WORD_IDTerminalRuleCall_0()); }
		RULE_UPPER_WORD_ID
		{ after(grammarAccess.getVLSVariableAccess().getNameUPPER_WORD_IDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFunctionAsTerm__FunctorAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSFunctionAsTermAccess().getFunctorAlternatives_0_0()); }
		(rule__VLSFunctionAsTerm__FunctorAlternatives_0_0)
		{ after(grammarAccess.getVLSFunctionAsTermAccess().getFunctorAlternatives_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFunctionAsTerm__TermsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSFunctionAsTermAccess().getTermsVLSFofTermParserRuleCall_1_1_0()); }
		ruleVLSFofTerm
		{ after(grammarAccess.getVLSFunctionAsTermAccess().getTermsVLSFofTermParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFunctionAsTerm__TermsAssignment_1_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSFunctionAsTermAccess().getTermsVLSFofTermParserRuleCall_1_2_1_0()); }
		ruleVLSFofTerm
		{ after(grammarAccess.getVLSFunctionAsTermAccess().getTermsVLSFofTermParserRuleCall_1_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSDefinedTerm__ValueAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSDefinedTermAccess().getValueSIGNED_LITERALTerminalRuleCall_0_1_0()); }
		RULE_SIGNED_LITERAL
		{ after(grammarAccess.getVLSDefinedTermAccess().getValueSIGNED_LITERALTerminalRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSDefinedTerm__ValueAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSDefinedTermAccess().getValueSIGNED_REAL_IDTerminalRuleCall_1_1_0()); }
		RULE_SIGNED_REAL_ID
		{ after(grammarAccess.getVLSDefinedTermAccess().getValueSIGNED_REAL_IDTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSDefinedTerm__ValueAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSDefinedTermAccess().getValueSIGNED_RAT_IDTerminalRuleCall_2_1_0()); }
		RULE_SIGNED_RAT_ID
		{ after(grammarAccess.getVLSDefinedTermAccess().getValueSIGNED_RAT_IDTerminalRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSDefinedTerm__ValueAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSDefinedTermAccess().getValueDOUBLE_QUOTETerminalRuleCall_3_1_0()); }
		RULE_DOUBLE_QUOTE
		{ after(grammarAccess.getVLSDefinedTermAccess().getValueDOUBLE_QUOTETerminalRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

fragment RULE_ALPHA_NUMERIC : ('a'..'z'|'A'..'Z'|'0'..'9'|'_');

RULE_UPPER_WORD_ID : 'A'..'Z' RULE_ALPHA_NUMERIC*;

RULE_LOWER_WORD_ID : 'a'..'z' RULE_ALPHA_NUMERIC*;

RULE_DOUBLE_QUOTE : '"' ('\\' ('"'|'\\')|~(('\\'|'"')))* '"';

RULE_SINGLE_QUOTE : '\'' ('\\' ('\''|'\\')|~(('\\'|'\'')))+ '\'';

fragment RULE_SIGN : ('+'|'-');

RULE_DOLLAR_ID : '$' RULE_LOWER_WORD_ID;

RULE_DOUBLE_DOLLAR_ID : '$$' RULE_LOWER_WORD_ID;

RULE_LITERAL : ('0'|'1'..'9' RULE_INT?);

RULE_SIGNED_LITERAL : RULE_SIGN* RULE_LITERAL;

fragment RULE_UNSIGNED_REAL_FRAC_ID : RULE_LITERAL '.' RULE_INT;

fragment RULE_UNSIGNED_REAL_EXP_ID : (RULE_LITERAL|RULE_UNSIGNED_REAL_FRAC_ID) 'Ee' RULE_SIGN* RULE_INT;

RULE_SIGNED_REAL_ID : RULE_SIGN* (RULE_UNSIGNED_REAL_FRAC_ID|RULE_UNSIGNED_REAL_EXP_ID);

fragment RULE_UNSIGNED_RAT_ID : RULE_LITERAL '/' '1'..'9' RULE_INT?;

RULE_SIGNED_RAT_ID : RULE_SIGN* RULE_UNSIGNED_RAT_ID;

fragment RULE_ID : ~(('\n'|'\r'))*;

fragment RULE_ANY_OTHER : RULE_ID;

RULE_SINGLE_COMMENT : RULE_ANY_OTHER;

fragment RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

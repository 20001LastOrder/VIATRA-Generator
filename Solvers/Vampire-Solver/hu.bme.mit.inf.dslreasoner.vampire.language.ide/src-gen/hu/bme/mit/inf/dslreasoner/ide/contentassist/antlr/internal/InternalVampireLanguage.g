/*
 * generated by Xtext 2.12.0
 */
grammar InternalVampireLanguage;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package hu.bme.mit.inf.dslreasoner.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package hu.bme.mit.inf.dslreasoner.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import hu.bme.mit.inf.dslreasoner.services.VampireLanguageGrammarAccess;

}
@parser::members {
	private VampireLanguageGrammarAccess grammarAccess;

	public void setGrammarAccess(VampireLanguageGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleVampireModel
entryRuleVampireModel
:
{ before(grammarAccess.getVampireModelRule()); }
	 ruleVampireModel
{ after(grammarAccess.getVampireModelRule()); } 
	 EOF 
;

// Rule VampireModel
ruleVampireModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVampireModelAccess().getAlternatives()); }
		(rule__VampireModel__Alternatives)*
		{ after(grammarAccess.getVampireModelAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVLSComment
entryRuleVLSComment
:
{ before(grammarAccess.getVLSCommentRule()); }
	 ruleVLSComment
{ after(grammarAccess.getVLSCommentRule()); } 
	 EOF 
;

// Rule VLSComment
ruleVLSComment 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVLSCommentAccess().getCommentAssignment()); }
		(rule__VLSComment__CommentAssignment)
		{ after(grammarAccess.getVLSCommentAccess().getCommentAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVLSFofFormula
entryRuleVLSFofFormula
:
{ before(grammarAccess.getVLSFofFormulaRule()); }
	 ruleVLSFofFormula
{ after(grammarAccess.getVLSFofFormulaRule()); } 
	 EOF 
;

// Rule VLSFofFormula
ruleVLSFofFormula 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVLSFofFormulaAccess().getGroup()); }
		(rule__VLSFofFormula__Group__0)
		{ after(grammarAccess.getVLSFofFormulaAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVLSAnnotation
entryRuleVLSAnnotation
:
{ before(grammarAccess.getVLSAnnotationRule()); }
	 ruleVLSAnnotation
{ after(grammarAccess.getVLSAnnotationRule()); } 
	 EOF 
;

// Rule VLSAnnotation
ruleVLSAnnotation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVLSAnnotationAccess().getGroup()); }
		(rule__VLSAnnotation__Group__0)
		{ after(grammarAccess.getVLSAnnotationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClosure_Rule
entryRuleClosure_Rule
:
{ before(grammarAccess.getClosure_RuleRule()); }
	 ruleClosure_Rule
{ after(grammarAccess.getClosure_RuleRule()); } 
	 EOF 
;

// Rule Closure_Rule
ruleClosure_Rule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getClosure_RuleAccess().getAlternatives()); }
		(rule__Closure_Rule__Alternatives)
		{ after(grammarAccess.getClosure_RuleAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVLSTerm
entryRuleVLSTerm
:
{ before(grammarAccess.getVLSTermRule()); }
	 ruleVLSTerm
{ after(grammarAccess.getVLSTermRule()); } 
	 EOF 
;

// Rule VLSTerm
ruleVLSTerm 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVLSTermAccess().getVLSBinaryParserRuleCall()); }
		ruleVLSBinary
		{ after(grammarAccess.getVLSTermAccess().getVLSBinaryParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVLSBinary
entryRuleVLSBinary
:
{ before(grammarAccess.getVLSBinaryRule()); }
	 ruleVLSBinary
{ after(grammarAccess.getVLSBinaryRule()); } 
	 EOF 
;

// Rule VLSBinary
ruleVLSBinary 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVLSBinaryAccess().getGroup()); }
		(rule__VLSBinary__Group__0)
		{ after(grammarAccess.getVLSBinaryAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVLSUnitaryFormula
entryRuleVLSUnitaryFormula
:
{ before(grammarAccess.getVLSUnitaryFormulaRule()); }
	 ruleVLSUnitaryFormula
{ after(grammarAccess.getVLSUnitaryFormulaRule()); } 
	 EOF 
;

// Rule VLSUnitaryFormula
ruleVLSUnitaryFormula 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVLSUnitaryFormulaAccess().getAlternatives()); }
		(rule__VLSUnitaryFormula__Alternatives)
		{ after(grammarAccess.getVLSUnitaryFormulaAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVLSUniversalQuantifier
entryRuleVLSUniversalQuantifier
:
{ before(grammarAccess.getVLSUniversalQuantifierRule()); }
	 ruleVLSUniversalQuantifier
{ after(grammarAccess.getVLSUniversalQuantifierRule()); } 
	 EOF 
;

// Rule VLSUniversalQuantifier
ruleVLSUniversalQuantifier 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVLSUniversalQuantifierAccess().getGroup()); }
		(rule__VLSUniversalQuantifier__Group__0)
		{ after(grammarAccess.getVLSUniversalQuantifierAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVLSExistentialQuantifier
entryRuleVLSExistentialQuantifier
:
{ before(grammarAccess.getVLSExistentialQuantifierRule()); }
	 ruleVLSExistentialQuantifier
{ after(grammarAccess.getVLSExistentialQuantifierRule()); } 
	 EOF 
;

// Rule VLSExistentialQuantifier
ruleVLSExistentialQuantifier 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVLSExistentialQuantifierAccess().getGroup()); }
		(rule__VLSExistentialQuantifier__Group__0)
		{ after(grammarAccess.getVLSExistentialQuantifierAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVLSUnaryNegation
entryRuleVLSUnaryNegation
:
{ before(grammarAccess.getVLSUnaryNegationRule()); }
	 ruleVLSUnaryNegation
{ after(grammarAccess.getVLSUnaryNegationRule()); } 
	 EOF 
;

// Rule VLSUnaryNegation
ruleVLSUnaryNegation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVLSUnaryNegationAccess().getGroup()); }
		(rule__VLSUnaryNegation__Group__0)
		{ after(grammarAccess.getVLSUnaryNegationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVLSUnaryInfix
entryRuleVLSUnaryInfix
:
{ before(grammarAccess.getVLSUnaryInfixRule()); }
	 ruleVLSUnaryInfix
{ after(grammarAccess.getVLSUnaryInfixRule()); } 
	 EOF 
;

// Rule VLSUnaryInfix
ruleVLSUnaryInfix 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVLSUnaryInfixAccess().getGroup()); }
		(rule__VLSUnaryInfix__Group__0)
		{ after(grammarAccess.getVLSUnaryInfixAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVLSFunction
entryRuleVLSFunction
:
{ before(grammarAccess.getVLSFunctionRule()); }
	 ruleVLSFunction
{ after(grammarAccess.getVLSFunctionRule()); } 
	 EOF 
;

// Rule VLSFunction
ruleVLSFunction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVLSFunctionAccess().getGroup()); }
		(rule__VLSFunction__Group__0)
		{ after(grammarAccess.getVLSFunctionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVLSFofTerm
entryRuleVLSFofTerm
:
{ before(grammarAccess.getVLSFofTermRule()); }
	 ruleVLSFofTerm
{ after(grammarAccess.getVLSFofTermRule()); } 
	 EOF 
;

// Rule VLSFofTerm
ruleVLSFofTerm 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVLSFofTermAccess().getAlternatives()); }
		(rule__VLSFofTerm__Alternatives)
		{ after(grammarAccess.getVLSFofTermAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVLSVariable
entryRuleVLSVariable
:
{ before(grammarAccess.getVLSVariableRule()); }
	 ruleVLSVariable
{ after(grammarAccess.getVLSVariableRule()); } 
	 EOF 
;

// Rule VLSVariable
ruleVLSVariable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVLSVariableAccess().getNameAssignment()); }
		(rule__VLSVariable__NameAssignment)
		{ after(grammarAccess.getVLSVariableAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVLSFunctionFof
entryRuleVLSFunctionFof
:
{ before(grammarAccess.getVLSFunctionFofRule()); }
	 ruleVLSFunctionFof
{ after(grammarAccess.getVLSFunctionFofRule()); } 
	 EOF 
;

// Rule VLSFunctionFof
ruleVLSFunctionFof 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVLSFunctionFofAccess().getGroup()); }
		(rule__VLSFunctionFof__Group__0)
		{ after(grammarAccess.getVLSFunctionFofAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVLSDefinedTerm
entryRuleVLSDefinedTerm
:
{ before(grammarAccess.getVLSDefinedTermRule()); }
	 ruleVLSDefinedTerm
{ after(grammarAccess.getVLSDefinedTermRule()); } 
	 EOF 
;

// Rule VLSDefinedTerm
ruleVLSDefinedTerm 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVLSDefinedTermAccess().getNameAssignment()); }
		(rule__VLSDefinedTerm__NameAssignment)
		{ after(grammarAccess.getVLSDefinedTermAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule VLSRole
ruleVLSRole
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSRoleAccess().getAlternatives()); }
		(rule__VLSRole__Alternatives)
		{ after(grammarAccess.getVLSRoleAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VampireModel__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVampireModelAccess().getCommentsAssignment_0()); }
		(rule__VampireModel__CommentsAssignment_0)
		{ after(grammarAccess.getVampireModelAccess().getCommentsAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getVampireModelAccess().getFormulasAssignment_1()); }
		(rule__VampireModel__FormulasAssignment_1)
		{ after(grammarAccess.getVampireModelAccess().getFormulasAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFofFormula__NameAlternatives_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSFofFormulaAccess().getNameLOWER_WORD_IDTerminalRuleCall_2_0_0()); }
		RULE_LOWER_WORD_ID
		{ after(grammarAccess.getVLSFofFormulaAccess().getNameLOWER_WORD_IDTerminalRuleCall_2_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getVLSFofFormulaAccess().getNameSIGNED_INT_IDTerminalRuleCall_2_0_1()); }
		RULE_SIGNED_INT_ID
		{ after(grammarAccess.getVLSFofFormulaAccess().getNameSIGNED_INT_IDTerminalRuleCall_2_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getVLSFofFormulaAccess().getNameSINGLE_QUOTETerminalRuleCall_2_0_2()); }
		RULE_SINGLE_QUOTE
		{ after(grammarAccess.getVLSFofFormulaAccess().getNameSINGLE_QUOTETerminalRuleCall_2_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Closure_Rule__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClosure_RuleAccess().getNameAssignment_0()); }
		(rule__Closure_Rule__NameAssignment_0)
		{ after(grammarAccess.getClosure_RuleAccess().getNameAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getClosure_RuleAccess().getGroup_1()); }
		(rule__Closure_Rule__Group_1__0)
		{ after(grammarAccess.getClosure_RuleAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSBinaryAccess().getGroup_1_0()); }
		(rule__VLSBinary__Group_1_0__0)
		{ after(grammarAccess.getVLSBinaryAccess().getGroup_1_0()); }
	)
	|
	(
		(
			{ before(grammarAccess.getVLSBinaryAccess().getGroup_1_1()); }
			(rule__VLSBinary__Group_1_1__0)
			{ after(grammarAccess.getVLSBinaryAccess().getGroup_1_1()); }
		)
		(
			{ before(grammarAccess.getVLSBinaryAccess().getGroup_1_1()); }
			(rule__VLSBinary__Group_1_1__0)*
			{ after(grammarAccess.getVLSBinaryAccess().getGroup_1_1()); }
		)
	)
	|
	(
		(
			{ before(grammarAccess.getVLSBinaryAccess().getGroup_1_2()); }
			(rule__VLSBinary__Group_1_2__0)
			{ after(grammarAccess.getVLSBinaryAccess().getGroup_1_2()); }
		)
		(
			{ before(grammarAccess.getVLSBinaryAccess().getGroup_1_2()); }
			(rule__VLSBinary__Group_1_2__0)*
			{ after(grammarAccess.getVLSBinaryAccess().getGroup_1_2()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Alternatives_1_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSBinaryAccess().getGroup_1_0_0_0()); }
		(rule__VLSBinary__Group_1_0_0_0__0)
		{ after(grammarAccess.getVLSBinaryAccess().getGroup_1_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getVLSBinaryAccess().getGroup_1_0_0_1()); }
		(rule__VLSBinary__Group_1_0_0_1__0)
		{ after(grammarAccess.getVLSBinaryAccess().getGroup_1_0_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getVLSBinaryAccess().getGroup_1_0_0_2()); }
		(rule__VLSBinary__Group_1_0_0_2__0)
		{ after(grammarAccess.getVLSBinaryAccess().getGroup_1_0_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getVLSBinaryAccess().getGroup_1_0_0_3()); }
		(rule__VLSBinary__Group_1_0_0_3__0)
		{ after(grammarAccess.getVLSBinaryAccess().getGroup_1_0_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getVLSBinaryAccess().getGroup_1_0_0_4()); }
		(rule__VLSBinary__Group_1_0_0_4__0)
		{ after(grammarAccess.getVLSBinaryAccess().getGroup_1_0_0_4()); }
	)
	|
	(
		{ before(grammarAccess.getVLSBinaryAccess().getGroup_1_0_0_5()); }
		(rule__VLSBinary__Group_1_0_0_5__0)
		{ after(grammarAccess.getVLSBinaryAccess().getGroup_1_0_0_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUnitaryFormula__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSUnitaryFormulaAccess().getVLSUniversalQuantifierParserRuleCall_0()); }
		ruleVLSUniversalQuantifier
		{ after(grammarAccess.getVLSUnitaryFormulaAccess().getVLSUniversalQuantifierParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getVLSUnitaryFormulaAccess().getVLSExistentialQuantifierParserRuleCall_1()); }
		ruleVLSExistentialQuantifier
		{ after(grammarAccess.getVLSUnitaryFormulaAccess().getVLSExistentialQuantifierParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getVLSUnitaryFormulaAccess().getVLSUnaryNegationParserRuleCall_2()); }
		ruleVLSUnaryNegation
		{ after(grammarAccess.getVLSUnitaryFormulaAccess().getVLSUnaryNegationParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getVLSUnitaryFormulaAccess().getVLSUnaryInfixParserRuleCall_3()); }
		ruleVLSUnaryInfix
		{ after(grammarAccess.getVLSUnitaryFormulaAccess().getVLSUnaryInfixParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getVLSUnitaryFormulaAccess().getGroup_4()); }
		(rule__VLSUnitaryFormula__Group_4__0)
		{ after(grammarAccess.getVLSUnitaryFormulaAccess().getGroup_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUnaryInfix__Alternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSUnaryInfixAccess().getGroup_1_0_0()); }
		(rule__VLSUnaryInfix__Group_1_0_0__0)
		{ after(grammarAccess.getVLSUnaryInfixAccess().getGroup_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getVLSUnaryInfixAccess().getGroup_1_0_1()); }
		(rule__VLSUnaryInfix__Group_1_0_1__0)
		{ after(grammarAccess.getVLSUnaryInfixAccess().getGroup_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getVLSUnaryInfixAccess().getGroup_1_0_2()); }
		(rule__VLSUnaryInfix__Group_1_0_2__0)
		{ after(grammarAccess.getVLSUnaryInfixAccess().getGroup_1_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFunction__ConstantAlternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSFunctionAccess().getConstantLOWER_WORD_IDTerminalRuleCall_1_0_0()); }
		RULE_LOWER_WORD_ID
		{ after(grammarAccess.getVLSFunctionAccess().getConstantLOWER_WORD_IDTerminalRuleCall_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getVLSFunctionAccess().getConstantSINGLE_QUOTETerminalRuleCall_1_0_1()); }
		RULE_SINGLE_QUOTE
		{ after(grammarAccess.getVLSFunctionAccess().getConstantSINGLE_QUOTETerminalRuleCall_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getVLSFunctionAccess().getConstantDOLLAR_IDTerminalRuleCall_1_0_2()); }
		RULE_DOLLAR_ID
		{ after(grammarAccess.getVLSFunctionAccess().getConstantDOLLAR_IDTerminalRuleCall_1_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getVLSFunctionAccess().getConstantDOUBLE_DOLLAR_IDTerminalRuleCall_1_0_3()); }
		RULE_DOUBLE_DOLLAR_ID
		{ after(grammarAccess.getVLSFunctionAccess().getConstantDOUBLE_DOLLAR_IDTerminalRuleCall_1_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFofTerm__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSFofTermAccess().getVLSVariableParserRuleCall_0()); }
		ruleVLSVariable
		{ after(grammarAccess.getVLSFofTermAccess().getVLSVariableParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getVLSFofTermAccess().getVLSFunctionFofParserRuleCall_1()); }
		ruleVLSFunctionFof
		{ after(grammarAccess.getVLSFofTermAccess().getVLSFunctionFofParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getVLSFofTermAccess().getVLSDefinedTermParserRuleCall_2()); }
		ruleVLSDefinedTerm
		{ after(grammarAccess.getVLSFofTermAccess().getVLSDefinedTermParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFunctionFof__NameAlternatives_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSFunctionFofAccess().getNameLOWER_WORD_IDTerminalRuleCall_0_0_0()); }
		RULE_LOWER_WORD_ID
		{ after(grammarAccess.getVLSFunctionFofAccess().getNameLOWER_WORD_IDTerminalRuleCall_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getVLSFunctionFofAccess().getNameSINGLE_QUOTETerminalRuleCall_0_0_1()); }
		RULE_SINGLE_QUOTE
		{ after(grammarAccess.getVLSFunctionFofAccess().getNameSINGLE_QUOTETerminalRuleCall_0_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getVLSFunctionFofAccess().getNameDOLLAR_IDTerminalRuleCall_0_0_2()); }
		RULE_DOLLAR_ID
		{ after(grammarAccess.getVLSFunctionFofAccess().getNameDOLLAR_IDTerminalRuleCall_0_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getVLSFunctionFofAccess().getNameDOUBLE_DOLLAR_IDTerminalRuleCall_0_0_3()); }
		RULE_DOUBLE_DOLLAR_ID
		{ after(grammarAccess.getVLSFunctionFofAccess().getNameDOUBLE_DOLLAR_IDTerminalRuleCall_0_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSDefinedTerm__NameAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSDefinedTermAccess().getNameDOUBLE_QUOTETerminalRuleCall_0_0()); }
		RULE_DOUBLE_QUOTE
		{ after(grammarAccess.getVLSDefinedTermAccess().getNameDOUBLE_QUOTETerminalRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getVLSDefinedTermAccess().getNameSIGNED_INT_IDTerminalRuleCall_0_1()); }
		RULE_SIGNED_INT_ID
		{ after(grammarAccess.getVLSDefinedTermAccess().getNameSIGNED_INT_IDTerminalRuleCall_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getVLSDefinedTermAccess().getNameSIGNED_REAL_IDTerminalRuleCall_0_2()); }
		RULE_SIGNED_REAL_ID
		{ after(grammarAccess.getVLSDefinedTermAccess().getNameSIGNED_REAL_IDTerminalRuleCall_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getVLSDefinedTermAccess().getNameSIGNED_RAT_IDTerminalRuleCall_0_3()); }
		RULE_SIGNED_RAT_ID
		{ after(grammarAccess.getVLSDefinedTermAccess().getNameSIGNED_RAT_IDTerminalRuleCall_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSRole__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSRoleAccess().getAxiomEnumLiteralDeclaration_0()); }
		('axiom')
		{ after(grammarAccess.getVLSRoleAccess().getAxiomEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getVLSRoleAccess().getConjectureEnumLiteralDeclaration_1()); }
		('conjecture')
		{ after(grammarAccess.getVLSRoleAccess().getConjectureEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getVLSRoleAccess().getHypothesisEnumLiteralDeclaration_2()); }
		('hypothesis')
		{ after(grammarAccess.getVLSRoleAccess().getHypothesisEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getVLSRoleAccess().getDefinitionEnumLiteralDeclaration_3()); }
		('definition')
		{ after(grammarAccess.getVLSRoleAccess().getDefinitionEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getVLSRoleAccess().getAssumptionEnumLiteralDeclaration_4()); }
		('assumption')
		{ after(grammarAccess.getVLSRoleAccess().getAssumptionEnumLiteralDeclaration_4()); }
	)
	|
	(
		{ before(grammarAccess.getVLSRoleAccess().getLemmaEnumLiteralDeclaration_5()); }
		('lemma')
		{ after(grammarAccess.getVLSRoleAccess().getLemmaEnumLiteralDeclaration_5()); }
	)
	|
	(
		{ before(grammarAccess.getVLSRoleAccess().getTheoremEnumLiteralDeclaration_6()); }
		('theorem')
		{ after(grammarAccess.getVLSRoleAccess().getTheoremEnumLiteralDeclaration_6()); }
	)
	|
	(
		{ before(grammarAccess.getVLSRoleAccess().getCorollaryEnumLiteralDeclaration_7()); }
		('corollary')
		{ after(grammarAccess.getVLSRoleAccess().getCorollaryEnumLiteralDeclaration_7()); }
	)
	|
	(
		{ before(grammarAccess.getVLSRoleAccess().getNegated_conjectureEnumLiteralDeclaration_8()); }
		('negated_conjecture')
		{ after(grammarAccess.getVLSRoleAccess().getNegated_conjectureEnumLiteralDeclaration_8()); }
	)
	|
	(
		{ before(grammarAccess.getVLSRoleAccess().getPlainEnumLiteralDeclaration_9()); }
		('plain')
		{ after(grammarAccess.getVLSRoleAccess().getPlainEnumLiteralDeclaration_9()); }
	)
	|
	(
		{ before(grammarAccess.getVLSRoleAccess().getTypeEnumLiteralDeclaration_10()); }
		('type')
		{ after(grammarAccess.getVLSRoleAccess().getTypeEnumLiteralDeclaration_10()); }
	)
	|
	(
		{ before(grammarAccess.getVLSRoleAccess().getFi_domainEnumLiteralDeclaration_11()); }
		('fi_domain')
		{ after(grammarAccess.getVLSRoleAccess().getFi_domainEnumLiteralDeclaration_11()); }
	)
	|
	(
		{ before(grammarAccess.getVLSRoleAccess().getFi_functorsEnumLiteralDeclaration_12()); }
		('fi_functors')
		{ after(grammarAccess.getVLSRoleAccess().getFi_functorsEnumLiteralDeclaration_12()); }
	)
	|
	(
		{ before(grammarAccess.getVLSRoleAccess().getFi_predicatesEnumLiteralDeclaration_13()); }
		('fi_predicates')
		{ after(grammarAccess.getVLSRoleAccess().getFi_predicatesEnumLiteralDeclaration_13()); }
	)
	|
	(
		{ before(grammarAccess.getVLSRoleAccess().getUnknownEnumLiteralDeclaration_14()); }
		('unknown')
		{ after(grammarAccess.getVLSRoleAccess().getUnknownEnumLiteralDeclaration_14()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFofFormula__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSFofFormula__Group__0__Impl
	rule__VLSFofFormula__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFofFormula__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSFofFormulaAccess().getFofKeyword_0()); }
	'fof'
	{ after(grammarAccess.getVLSFofFormulaAccess().getFofKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFofFormula__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSFofFormula__Group__1__Impl
	rule__VLSFofFormula__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFofFormula__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSFofFormulaAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getVLSFofFormulaAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFofFormula__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSFofFormula__Group__2__Impl
	rule__VLSFofFormula__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFofFormula__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSFofFormulaAccess().getNameAssignment_2()); }
	(rule__VLSFofFormula__NameAssignment_2)
	{ after(grammarAccess.getVLSFofFormulaAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFofFormula__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSFofFormula__Group__3__Impl
	rule__VLSFofFormula__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFofFormula__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSFofFormulaAccess().getCommaKeyword_3()); }
	','
	{ after(grammarAccess.getVLSFofFormulaAccess().getCommaKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFofFormula__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSFofFormula__Group__4__Impl
	rule__VLSFofFormula__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFofFormula__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSFofFormulaAccess().getFofRoleAssignment_4()); }
	(rule__VLSFofFormula__FofRoleAssignment_4)
	{ after(grammarAccess.getVLSFofFormulaAccess().getFofRoleAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFofFormula__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSFofFormula__Group__5__Impl
	rule__VLSFofFormula__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFofFormula__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSFofFormulaAccess().getCommaKeyword_5()); }
	','
	{ after(grammarAccess.getVLSFofFormulaAccess().getCommaKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFofFormula__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSFofFormula__Group__6__Impl
	rule__VLSFofFormula__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFofFormula__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSFofFormulaAccess().getFofFormulaAssignment_6()); }
	(rule__VLSFofFormula__FofFormulaAssignment_6)
	{ after(grammarAccess.getVLSFofFormulaAccess().getFofFormulaAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFofFormula__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSFofFormula__Group__7__Impl
	rule__VLSFofFormula__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFofFormula__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSFofFormulaAccess().getGroup_7()); }
	(rule__VLSFofFormula__Group_7__0)?
	{ after(grammarAccess.getVLSFofFormulaAccess().getGroup_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFofFormula__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSFofFormula__Group__8__Impl
	rule__VLSFofFormula__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFofFormula__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSFofFormulaAccess().getRightParenthesisKeyword_8()); }
	')'
	{ after(grammarAccess.getVLSFofFormulaAccess().getRightParenthesisKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFofFormula__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSFofFormula__Group__9__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFofFormula__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSFofFormulaAccess().getFullStopKeyword_9()); }
	'.'
	{ after(grammarAccess.getVLSFofFormulaAccess().getFullStopKeyword_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSFofFormula__Group_7__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSFofFormula__Group_7__0__Impl
	rule__VLSFofFormula__Group_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFofFormula__Group_7__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSFofFormulaAccess().getCommaKeyword_7_0()); }
	','
	{ after(grammarAccess.getVLSFofFormulaAccess().getCommaKeyword_7_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFofFormula__Group_7__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSFofFormula__Group_7__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFofFormula__Group_7__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSFofFormulaAccess().getAnnotationsAssignment_7_1()); }
	(rule__VLSFofFormula__AnnotationsAssignment_7_1)
	{ after(grammarAccess.getVLSFofFormulaAccess().getAnnotationsAssignment_7_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSAnnotation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSAnnotation__Group__0__Impl
	rule__VLSAnnotation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAnnotation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSAnnotationAccess().getNameAssignment_0()); }
	(rule__VLSAnnotation__NameAssignment_0)?
	{ after(grammarAccess.getVLSAnnotationAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAnnotation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSAnnotation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAnnotation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSAnnotationAccess().getClosure_ruleAssignment_1()); }
	(rule__VLSAnnotation__Closure_ruleAssignment_1)
	{ after(grammarAccess.getVLSAnnotationAccess().getClosure_ruleAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Closure_Rule__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Closure_Rule__Group_1__0__Impl
	rule__Closure_Rule__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Closure_Rule__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClosure_RuleAccess().getLeftParenthesisKeyword_1_0()); }
	'('
	{ after(grammarAccess.getClosure_RuleAccess().getLeftParenthesisKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Closure_Rule__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Closure_Rule__Group_1__1__Impl
	rule__Closure_Rule__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Closure_Rule__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClosure_RuleAccess().getVLSAnnotationParserRuleCall_1_1()); }
	ruleVLSAnnotation
	{ after(grammarAccess.getClosure_RuleAccess().getVLSAnnotationParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Closure_Rule__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Closure_Rule__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Closure_Rule__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClosure_RuleAccess().getRightParenthesisKeyword_1_2()); }
	')'
	{ after(grammarAccess.getClosure_RuleAccess().getRightParenthesisKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSBinary__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSBinary__Group__0__Impl
	rule__VLSBinary__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSBinaryAccess().getVLSUnitaryFormulaParserRuleCall_0()); }
	ruleVLSUnitaryFormula
	{ after(grammarAccess.getVLSBinaryAccess().getVLSUnitaryFormulaParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSBinary__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSBinaryAccess().getAlternatives_1()); }
	(rule__VLSBinary__Alternatives_1)?
	{ after(grammarAccess.getVLSBinaryAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSBinary__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSBinary__Group_1_0__0__Impl
	rule__VLSBinary__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSBinaryAccess().getAlternatives_1_0_0()); }
	(rule__VLSBinary__Alternatives_1_0_0)
	{ after(grammarAccess.getVLSBinaryAccess().getAlternatives_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSBinary__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSBinaryAccess().getRightAssignment_1_0_1()); }
	(rule__VLSBinary__RightAssignment_1_0_1)
	{ after(grammarAccess.getVLSBinaryAccess().getRightAssignment_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSBinary__Group_1_0_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSBinary__Group_1_0_0_0__0__Impl
	rule__VLSBinary__Group_1_0_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group_1_0_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSBinaryAccess().getVLSEquivalentLeftAction_1_0_0_0_0()); }
	()
	{ after(grammarAccess.getVLSBinaryAccess().getVLSEquivalentLeftAction_1_0_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group_1_0_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSBinary__Group_1_0_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group_1_0_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSBinaryAccess().getLessThanSignEqualsSignGreaterThanSignKeyword_1_0_0_0_1()); }
	'<=>'
	{ after(grammarAccess.getVLSBinaryAccess().getLessThanSignEqualsSignGreaterThanSignKeyword_1_0_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSBinary__Group_1_0_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSBinary__Group_1_0_0_1__0__Impl
	rule__VLSBinary__Group_1_0_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group_1_0_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSBinaryAccess().getVLSImpliesLeftAction_1_0_0_1_0()); }
	()
	{ after(grammarAccess.getVLSBinaryAccess().getVLSImpliesLeftAction_1_0_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group_1_0_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSBinary__Group_1_0_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group_1_0_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSBinaryAccess().getEqualsSignGreaterThanSignKeyword_1_0_0_1_1()); }
	'=>'
	{ after(grammarAccess.getVLSBinaryAccess().getEqualsSignGreaterThanSignKeyword_1_0_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSBinary__Group_1_0_0_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSBinary__Group_1_0_0_2__0__Impl
	rule__VLSBinary__Group_1_0_0_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group_1_0_0_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSBinaryAccess().getVLSRevImpliesLeftAction_1_0_0_2_0()); }
	()
	{ after(grammarAccess.getVLSBinaryAccess().getVLSRevImpliesLeftAction_1_0_0_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group_1_0_0_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSBinary__Group_1_0_0_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group_1_0_0_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSBinaryAccess().getLessThanSignEqualsSignKeyword_1_0_0_2_1()); }
	'<='
	{ after(grammarAccess.getVLSBinaryAccess().getLessThanSignEqualsSignKeyword_1_0_0_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSBinary__Group_1_0_0_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSBinary__Group_1_0_0_3__0__Impl
	rule__VLSBinary__Group_1_0_0_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group_1_0_0_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSBinaryAccess().getVLSXnorLeftAction_1_0_0_3_0()); }
	()
	{ after(grammarAccess.getVLSBinaryAccess().getVLSXnorLeftAction_1_0_0_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group_1_0_0_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSBinary__Group_1_0_0_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group_1_0_0_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSBinaryAccess().getLessThanSignTildeGreaterThanSignKeyword_1_0_0_3_1()); }
	'<~>'
	{ after(grammarAccess.getVLSBinaryAccess().getLessThanSignTildeGreaterThanSignKeyword_1_0_0_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSBinary__Group_1_0_0_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSBinary__Group_1_0_0_4__0__Impl
	rule__VLSBinary__Group_1_0_0_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group_1_0_0_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSBinaryAccess().getVLSNorLeftAction_1_0_0_4_0()); }
	()
	{ after(grammarAccess.getVLSBinaryAccess().getVLSNorLeftAction_1_0_0_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group_1_0_0_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSBinary__Group_1_0_0_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group_1_0_0_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSBinaryAccess().getTildeVerticalLineKeyword_1_0_0_4_1()); }
	'~|'
	{ after(grammarAccess.getVLSBinaryAccess().getTildeVerticalLineKeyword_1_0_0_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSBinary__Group_1_0_0_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSBinary__Group_1_0_0_5__0__Impl
	rule__VLSBinary__Group_1_0_0_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group_1_0_0_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSBinaryAccess().getVLSNandLeftAction_1_0_0_5_0()); }
	()
	{ after(grammarAccess.getVLSBinaryAccess().getVLSNandLeftAction_1_0_0_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group_1_0_0_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSBinary__Group_1_0_0_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group_1_0_0_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSBinaryAccess().getTildeAmpersandKeyword_1_0_0_5_1()); }
	'~&'
	{ after(grammarAccess.getVLSBinaryAccess().getTildeAmpersandKeyword_1_0_0_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSBinary__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSBinary__Group_1_1__0__Impl
	rule__VLSBinary__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSBinaryAccess().getVLSAndLeftAction_1_1_0()); }
	()
	{ after(grammarAccess.getVLSBinaryAccess().getVLSAndLeftAction_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSBinary__Group_1_1__1__Impl
	rule__VLSBinary__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSBinaryAccess().getAmpersandKeyword_1_1_1()); }
	'&'
	{ after(grammarAccess.getVLSBinaryAccess().getAmpersandKeyword_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group_1_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSBinary__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group_1_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSBinaryAccess().getRightAssignment_1_1_2()); }
	(rule__VLSBinary__RightAssignment_1_1_2)
	{ after(grammarAccess.getVLSBinaryAccess().getRightAssignment_1_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSBinary__Group_1_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSBinary__Group_1_2__0__Impl
	rule__VLSBinary__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group_1_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSBinaryAccess().getVLSOrLeftAction_1_2_0()); }
	()
	{ after(grammarAccess.getVLSBinaryAccess().getVLSOrLeftAction_1_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group_1_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSBinary__Group_1_2__1__Impl
	rule__VLSBinary__Group_1_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group_1_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSBinaryAccess().getVerticalLineKeyword_1_2_1()); }
	'|'
	{ after(grammarAccess.getVLSBinaryAccess().getVerticalLineKeyword_1_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group_1_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSBinary__Group_1_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__Group_1_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSBinaryAccess().getRightAssignment_1_2_2()); }
	(rule__VLSBinary__RightAssignment_1_2_2)
	{ after(grammarAccess.getVLSBinaryAccess().getRightAssignment_1_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSUnitaryFormula__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSUnitaryFormula__Group_4__0__Impl
	rule__VLSUnitaryFormula__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUnitaryFormula__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSUnitaryFormulaAccess().getLeftParenthesisKeyword_4_0()); }
	'('
	{ after(grammarAccess.getVLSUnitaryFormulaAccess().getLeftParenthesisKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUnitaryFormula__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSUnitaryFormula__Group_4__1__Impl
	rule__VLSUnitaryFormula__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUnitaryFormula__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSUnitaryFormulaAccess().getVLSTermParserRuleCall_4_1()); }
	ruleVLSTerm
	{ after(grammarAccess.getVLSUnitaryFormulaAccess().getVLSTermParserRuleCall_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUnitaryFormula__Group_4__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSUnitaryFormula__Group_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUnitaryFormula__Group_4__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSUnitaryFormulaAccess().getRightParenthesisKeyword_4_2()); }
	')'
	{ after(grammarAccess.getVLSUnitaryFormulaAccess().getRightParenthesisKeyword_4_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSUniversalQuantifier__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSUniversalQuantifier__Group__0__Impl
	rule__VLSUniversalQuantifier__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUniversalQuantifier__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSUniversalQuantifierAccess().getVLSUniversalQuantifierAction_0()); }
	()
	{ after(grammarAccess.getVLSUniversalQuantifierAccess().getVLSUniversalQuantifierAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUniversalQuantifier__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSUniversalQuantifier__Group__1__Impl
	rule__VLSUniversalQuantifier__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUniversalQuantifier__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSUniversalQuantifierAccess().getGroup_1()); }
	(rule__VLSUniversalQuantifier__Group_1__0)
	{ after(grammarAccess.getVLSUniversalQuantifierAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUniversalQuantifier__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSUniversalQuantifier__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUniversalQuantifier__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSUniversalQuantifierAccess().getOperandAssignment_2()); }
	(rule__VLSUniversalQuantifier__OperandAssignment_2)
	{ after(grammarAccess.getVLSUniversalQuantifierAccess().getOperandAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSUniversalQuantifier__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSUniversalQuantifier__Group_1__0__Impl
	rule__VLSUniversalQuantifier__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUniversalQuantifier__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSUniversalQuantifierAccess().getExclamationMarkKeyword_1_0()); }
	'!'
	{ after(grammarAccess.getVLSUniversalQuantifierAccess().getExclamationMarkKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUniversalQuantifier__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSUniversalQuantifier__Group_1__1__Impl
	rule__VLSUniversalQuantifier__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUniversalQuantifier__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSUniversalQuantifierAccess().getLeftSquareBracketKeyword_1_1()); }
	'['
	{ after(grammarAccess.getVLSUniversalQuantifierAccess().getLeftSquareBracketKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUniversalQuantifier__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSUniversalQuantifier__Group_1__2__Impl
	rule__VLSUniversalQuantifier__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUniversalQuantifier__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSUniversalQuantifierAccess().getVariablesAssignment_1_2()); }
	(rule__VLSUniversalQuantifier__VariablesAssignment_1_2)
	{ after(grammarAccess.getVLSUniversalQuantifierAccess().getVariablesAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUniversalQuantifier__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSUniversalQuantifier__Group_1__3__Impl
	rule__VLSUniversalQuantifier__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUniversalQuantifier__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSUniversalQuantifierAccess().getGroup_1_3()); }
	(rule__VLSUniversalQuantifier__Group_1_3__0)*
	{ after(grammarAccess.getVLSUniversalQuantifierAccess().getGroup_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUniversalQuantifier__Group_1__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSUniversalQuantifier__Group_1__4__Impl
	rule__VLSUniversalQuantifier__Group_1__5
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUniversalQuantifier__Group_1__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSUniversalQuantifierAccess().getRightSquareBracketKeyword_1_4()); }
	']'
	{ after(grammarAccess.getVLSUniversalQuantifierAccess().getRightSquareBracketKeyword_1_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUniversalQuantifier__Group_1__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSUniversalQuantifier__Group_1__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUniversalQuantifier__Group_1__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSUniversalQuantifierAccess().getColonKeyword_1_5()); }
	':'
	{ after(grammarAccess.getVLSUniversalQuantifierAccess().getColonKeyword_1_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSUniversalQuantifier__Group_1_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSUniversalQuantifier__Group_1_3__0__Impl
	rule__VLSUniversalQuantifier__Group_1_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUniversalQuantifier__Group_1_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSUniversalQuantifierAccess().getCommaKeyword_1_3_0()); }
	','
	{ after(grammarAccess.getVLSUniversalQuantifierAccess().getCommaKeyword_1_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUniversalQuantifier__Group_1_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSUniversalQuantifier__Group_1_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUniversalQuantifier__Group_1_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSUniversalQuantifierAccess().getVariablesAssignment_1_3_1()); }
	(rule__VLSUniversalQuantifier__VariablesAssignment_1_3_1)
	{ after(grammarAccess.getVLSUniversalQuantifierAccess().getVariablesAssignment_1_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSExistentialQuantifier__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSExistentialQuantifier__Group__0__Impl
	rule__VLSExistentialQuantifier__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSExistentialQuantifier__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSExistentialQuantifierAccess().getVLSExistentialQuantifierAction_0()); }
	()
	{ after(grammarAccess.getVLSExistentialQuantifierAccess().getVLSExistentialQuantifierAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSExistentialQuantifier__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSExistentialQuantifier__Group__1__Impl
	rule__VLSExistentialQuantifier__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSExistentialQuantifier__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSExistentialQuantifierAccess().getGroup_1()); }
	(rule__VLSExistentialQuantifier__Group_1__0)
	{ after(grammarAccess.getVLSExistentialQuantifierAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSExistentialQuantifier__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSExistentialQuantifier__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSExistentialQuantifier__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSExistentialQuantifierAccess().getOperandAssignment_2()); }
	(rule__VLSExistentialQuantifier__OperandAssignment_2)
	{ after(grammarAccess.getVLSExistentialQuantifierAccess().getOperandAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSExistentialQuantifier__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSExistentialQuantifier__Group_1__0__Impl
	rule__VLSExistentialQuantifier__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSExistentialQuantifier__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSExistentialQuantifierAccess().getQuestionMarkKeyword_1_0()); }
	'?'
	{ after(grammarAccess.getVLSExistentialQuantifierAccess().getQuestionMarkKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSExistentialQuantifier__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSExistentialQuantifier__Group_1__1__Impl
	rule__VLSExistentialQuantifier__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSExistentialQuantifier__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSExistentialQuantifierAccess().getLeftSquareBracketKeyword_1_1()); }
	'['
	{ after(grammarAccess.getVLSExistentialQuantifierAccess().getLeftSquareBracketKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSExistentialQuantifier__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSExistentialQuantifier__Group_1__2__Impl
	rule__VLSExistentialQuantifier__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSExistentialQuantifier__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSExistentialQuantifierAccess().getVariablesAssignment_1_2()); }
	(rule__VLSExistentialQuantifier__VariablesAssignment_1_2)
	{ after(grammarAccess.getVLSExistentialQuantifierAccess().getVariablesAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSExistentialQuantifier__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSExistentialQuantifier__Group_1__3__Impl
	rule__VLSExistentialQuantifier__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSExistentialQuantifier__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSExistentialQuantifierAccess().getGroup_1_3()); }
	(rule__VLSExistentialQuantifier__Group_1_3__0)*
	{ after(grammarAccess.getVLSExistentialQuantifierAccess().getGroup_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSExistentialQuantifier__Group_1__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSExistentialQuantifier__Group_1__4__Impl
	rule__VLSExistentialQuantifier__Group_1__5
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSExistentialQuantifier__Group_1__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSExistentialQuantifierAccess().getRightSquareBracketKeyword_1_4()); }
	']'
	{ after(grammarAccess.getVLSExistentialQuantifierAccess().getRightSquareBracketKeyword_1_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSExistentialQuantifier__Group_1__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSExistentialQuantifier__Group_1__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSExistentialQuantifier__Group_1__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSExistentialQuantifierAccess().getColonKeyword_1_5()); }
	':'
	{ after(grammarAccess.getVLSExistentialQuantifierAccess().getColonKeyword_1_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSExistentialQuantifier__Group_1_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSExistentialQuantifier__Group_1_3__0__Impl
	rule__VLSExistentialQuantifier__Group_1_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSExistentialQuantifier__Group_1_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSExistentialQuantifierAccess().getCommaKeyword_1_3_0()); }
	','
	{ after(grammarAccess.getVLSExistentialQuantifierAccess().getCommaKeyword_1_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSExistentialQuantifier__Group_1_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSExistentialQuantifier__Group_1_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSExistentialQuantifier__Group_1_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSExistentialQuantifierAccess().getVariablesAssignment_1_3_1()); }
	(rule__VLSExistentialQuantifier__VariablesAssignment_1_3_1)
	{ after(grammarAccess.getVLSExistentialQuantifierAccess().getVariablesAssignment_1_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSUnaryNegation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSUnaryNegation__Group__0__Impl
	rule__VLSUnaryNegation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUnaryNegation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSUnaryNegationAccess().getVLSUnaryNegationAction_0()); }
	()
	{ after(grammarAccess.getVLSUnaryNegationAccess().getVLSUnaryNegationAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUnaryNegation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSUnaryNegation__Group__1__Impl
	rule__VLSUnaryNegation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUnaryNegation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSUnaryNegationAccess().getTildeKeyword_1()); }
	'~'
	{ after(grammarAccess.getVLSUnaryNegationAccess().getTildeKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUnaryNegation__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSUnaryNegation__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUnaryNegation__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSUnaryNegationAccess().getOperandAssignment_2()); }
	(rule__VLSUnaryNegation__OperandAssignment_2)
	{ after(grammarAccess.getVLSUnaryNegationAccess().getOperandAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSUnaryInfix__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSUnaryInfix__Group__0__Impl
	rule__VLSUnaryInfix__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUnaryInfix__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSUnaryInfixAccess().getVLSFunctionParserRuleCall_0()); }
	ruleVLSFunction
	{ after(grammarAccess.getVLSUnaryInfixAccess().getVLSFunctionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUnaryInfix__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSUnaryInfix__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUnaryInfix__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSUnaryInfixAccess().getGroup_1()); }
	(rule__VLSUnaryInfix__Group_1__0)?
	{ after(grammarAccess.getVLSUnaryInfixAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSUnaryInfix__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSUnaryInfix__Group_1__0__Impl
	rule__VLSUnaryInfix__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUnaryInfix__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSUnaryInfixAccess().getAlternatives_1_0()); }
	(rule__VLSUnaryInfix__Alternatives_1_0)
	{ after(grammarAccess.getVLSUnaryInfixAccess().getAlternatives_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUnaryInfix__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSUnaryInfix__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUnaryInfix__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSUnaryInfixAccess().getRightAssignment_1_1()); }
	(rule__VLSUnaryInfix__RightAssignment_1_1)
	{ after(grammarAccess.getVLSUnaryInfixAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSUnaryInfix__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSUnaryInfix__Group_1_0_0__0__Impl
	rule__VLSUnaryInfix__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUnaryInfix__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSUnaryInfixAccess().getVLSInequalityLeftAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getVLSUnaryInfixAccess().getVLSInequalityLeftAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUnaryInfix__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSUnaryInfix__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUnaryInfix__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSUnaryInfixAccess().getExclamationMarkEqualsSignKeyword_1_0_0_1()); }
	'!='
	{ after(grammarAccess.getVLSUnaryInfixAccess().getExclamationMarkEqualsSignKeyword_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSUnaryInfix__Group_1_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSUnaryInfix__Group_1_0_1__0__Impl
	rule__VLSUnaryInfix__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUnaryInfix__Group_1_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSUnaryInfixAccess().getVLSEqualityLeftAction_1_0_1_0()); }
	()
	{ after(grammarAccess.getVLSUnaryInfixAccess().getVLSEqualityLeftAction_1_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUnaryInfix__Group_1_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSUnaryInfix__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUnaryInfix__Group_1_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSUnaryInfixAccess().getEqualsSignKeyword_1_0_1_1()); }
	'='
	{ after(grammarAccess.getVLSUnaryInfixAccess().getEqualsSignKeyword_1_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSUnaryInfix__Group_1_0_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSUnaryInfix__Group_1_0_2__0__Impl
	rule__VLSUnaryInfix__Group_1_0_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUnaryInfix__Group_1_0_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSUnaryInfixAccess().getVLSAssignmentLeftAction_1_0_2_0()); }
	()
	{ after(grammarAccess.getVLSUnaryInfixAccess().getVLSAssignmentLeftAction_1_0_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUnaryInfix__Group_1_0_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSUnaryInfix__Group_1_0_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUnaryInfix__Group_1_0_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSUnaryInfixAccess().getColonEqualsSignKeyword_1_0_2_1()); }
	':='
	{ after(grammarAccess.getVLSUnaryInfixAccess().getColonEqualsSignKeyword_1_0_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSFunction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSFunction__Group__0__Impl
	rule__VLSFunction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFunction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSFunctionAccess().getVLSFunctionAction_0()); }
	()
	{ after(grammarAccess.getVLSFunctionAccess().getVLSFunctionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFunction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSFunction__Group__1__Impl
	rule__VLSFunction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFunction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSFunctionAccess().getConstantAssignment_1()); }
	(rule__VLSFunction__ConstantAssignment_1)
	{ after(grammarAccess.getVLSFunctionAccess().getConstantAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFunction__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSFunction__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFunction__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSFunctionAccess().getGroup_2()); }
	(rule__VLSFunction__Group_2__0)?
	{ after(grammarAccess.getVLSFunctionAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSFunction__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSFunction__Group_2__0__Impl
	rule__VLSFunction__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFunction__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSFunctionAccess().getLeftParenthesisKeyword_2_0()); }
	'('
	{ after(grammarAccess.getVLSFunctionAccess().getLeftParenthesisKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFunction__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSFunction__Group_2__1__Impl
	rule__VLSFunction__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFunction__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSFunctionAccess().getTermsAssignment_2_1()); }
	(rule__VLSFunction__TermsAssignment_2_1)
	{ after(grammarAccess.getVLSFunctionAccess().getTermsAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFunction__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSFunction__Group_2__2__Impl
	rule__VLSFunction__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFunction__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSFunctionAccess().getGroup_2_2()); }
	(rule__VLSFunction__Group_2_2__0)*
	{ after(grammarAccess.getVLSFunctionAccess().getGroup_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFunction__Group_2__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSFunction__Group_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFunction__Group_2__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSFunctionAccess().getRightParenthesisKeyword_2_3()); }
	')'
	{ after(grammarAccess.getVLSFunctionAccess().getRightParenthesisKeyword_2_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSFunction__Group_2_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSFunction__Group_2_2__0__Impl
	rule__VLSFunction__Group_2_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFunction__Group_2_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSFunctionAccess().getCommaKeyword_2_2_0()); }
	','
	{ after(grammarAccess.getVLSFunctionAccess().getCommaKeyword_2_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFunction__Group_2_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSFunction__Group_2_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFunction__Group_2_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSFunctionAccess().getTermsAssignment_2_2_1()); }
	(rule__VLSFunction__TermsAssignment_2_2_1)
	{ after(grammarAccess.getVLSFunctionAccess().getTermsAssignment_2_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSFunctionFof__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSFunctionFof__Group__0__Impl
	rule__VLSFunctionFof__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFunctionFof__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSFunctionFofAccess().getNameAssignment_0()); }
	(rule__VLSFunctionFof__NameAssignment_0)
	{ after(grammarAccess.getVLSFunctionFofAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFunctionFof__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSFunctionFof__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFunctionFof__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSFunctionFofAccess().getGroup_1()); }
	(rule__VLSFunctionFof__Group_1__0)?
	{ after(grammarAccess.getVLSFunctionFofAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSFunctionFof__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSFunctionFof__Group_1__0__Impl
	rule__VLSFunctionFof__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFunctionFof__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSFunctionFofAccess().getLeftParenthesisKeyword_1_0()); }
	'('
	{ after(grammarAccess.getVLSFunctionFofAccess().getLeftParenthesisKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFunctionFof__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSFunctionFof__Group_1__1__Impl
	rule__VLSFunctionFof__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFunctionFof__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSFunctionFofAccess().getTermsAssignment_1_1()); }
	(rule__VLSFunctionFof__TermsAssignment_1_1)
	{ after(grammarAccess.getVLSFunctionFofAccess().getTermsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFunctionFof__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSFunctionFof__Group_1__2__Impl
	rule__VLSFunctionFof__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFunctionFof__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSFunctionFofAccess().getGroup_1_2()); }
	(rule__VLSFunctionFof__Group_1_2__0)*
	{ after(grammarAccess.getVLSFunctionFofAccess().getGroup_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFunctionFof__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSFunctionFof__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFunctionFof__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSFunctionFofAccess().getRightParenthesisKeyword_1_3()); }
	')'
	{ after(grammarAccess.getVLSFunctionFofAccess().getRightParenthesisKeyword_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VLSFunctionFof__Group_1_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSFunctionFof__Group_1_2__0__Impl
	rule__VLSFunctionFof__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFunctionFof__Group_1_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSFunctionFofAccess().getCommaKeyword_1_2_0()); }
	','
	{ after(grammarAccess.getVLSFunctionFofAccess().getCommaKeyword_1_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFunctionFof__Group_1_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VLSFunctionFof__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFunctionFof__Group_1_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVLSFunctionFofAccess().getTermsAssignment_1_2_1()); }
	(rule__VLSFunctionFof__TermsAssignment_1_2_1)
	{ after(grammarAccess.getVLSFunctionFofAccess().getTermsAssignment_1_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VampireModel__CommentsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVampireModelAccess().getCommentsVLSCommentParserRuleCall_0_0()); }
		ruleVLSComment
		{ after(grammarAccess.getVampireModelAccess().getCommentsVLSCommentParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VampireModel__FormulasAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVampireModelAccess().getFormulasVLSFofFormulaParserRuleCall_1_0()); }
		ruleVLSFofFormula
		{ after(grammarAccess.getVampireModelAccess().getFormulasVLSFofFormulaParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSComment__CommentAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSCommentAccess().getCommentSINGLE_COMMENTTerminalRuleCall_0()); }
		RULE_SINGLE_COMMENT
		{ after(grammarAccess.getVLSCommentAccess().getCommentSINGLE_COMMENTTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFofFormula__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSFofFormulaAccess().getNameAlternatives_2_0()); }
		(rule__VLSFofFormula__NameAlternatives_2_0)
		{ after(grammarAccess.getVLSFofFormulaAccess().getNameAlternatives_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFofFormula__FofRoleAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSFofFormulaAccess().getFofRoleVLSRoleEnumRuleCall_4_0()); }
		ruleVLSRole
		{ after(grammarAccess.getVLSFofFormulaAccess().getFofRoleVLSRoleEnumRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFofFormula__FofFormulaAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSFofFormulaAccess().getFofFormulaVLSTermParserRuleCall_6_0()); }
		ruleVLSTerm
		{ after(grammarAccess.getVLSFofFormulaAccess().getFofFormulaVLSTermParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFofFormula__AnnotationsAssignment_7_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSFofFormulaAccess().getAnnotationsVLSAnnotationParserRuleCall_7_1_0()); }
		ruleVLSAnnotation
		{ after(grammarAccess.getVLSFofFormulaAccess().getAnnotationsVLSAnnotationParserRuleCall_7_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAnnotation__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSAnnotationAccess().getNameLOWER_WORD_IDTerminalRuleCall_0_0()); }
		RULE_LOWER_WORD_ID
		{ after(grammarAccess.getVLSAnnotationAccess().getNameLOWER_WORD_IDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSAnnotation__Closure_ruleAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSAnnotationAccess().getClosure_ruleClosure_RuleParserRuleCall_1_0()); }
		ruleClosure_Rule
		{ after(grammarAccess.getVLSAnnotationAccess().getClosure_ruleClosure_RuleParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Closure_Rule__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClosure_RuleAccess().getNameLOWER_WORD_IDTerminalRuleCall_0_0()); }
		RULE_LOWER_WORD_ID
		{ after(grammarAccess.getClosure_RuleAccess().getNameLOWER_WORD_IDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__RightAssignment_1_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSBinaryAccess().getRightVLSUnitaryFormulaParserRuleCall_1_0_1_0()); }
		ruleVLSUnitaryFormula
		{ after(grammarAccess.getVLSBinaryAccess().getRightVLSUnitaryFormulaParserRuleCall_1_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__RightAssignment_1_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSBinaryAccess().getRightVLSUnitaryFormulaParserRuleCall_1_1_2_0()); }
		ruleVLSUnitaryFormula
		{ after(grammarAccess.getVLSBinaryAccess().getRightVLSUnitaryFormulaParserRuleCall_1_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSBinary__RightAssignment_1_2_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSBinaryAccess().getRightVLSUnitaryFormulaParserRuleCall_1_2_2_0()); }
		ruleVLSUnitaryFormula
		{ after(grammarAccess.getVLSBinaryAccess().getRightVLSUnitaryFormulaParserRuleCall_1_2_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUniversalQuantifier__VariablesAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSUniversalQuantifierAccess().getVariablesVLSVariableParserRuleCall_1_2_0()); }
		ruleVLSVariable
		{ after(grammarAccess.getVLSUniversalQuantifierAccess().getVariablesVLSVariableParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUniversalQuantifier__VariablesAssignment_1_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSUniversalQuantifierAccess().getVariablesVLSVariableParserRuleCall_1_3_1_0()); }
		ruleVLSVariable
		{ after(grammarAccess.getVLSUniversalQuantifierAccess().getVariablesVLSVariableParserRuleCall_1_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUniversalQuantifier__OperandAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSUniversalQuantifierAccess().getOperandVLSUnitaryFormulaParserRuleCall_2_0()); }
		ruleVLSUnitaryFormula
		{ after(grammarAccess.getVLSUniversalQuantifierAccess().getOperandVLSUnitaryFormulaParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSExistentialQuantifier__VariablesAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSExistentialQuantifierAccess().getVariablesVLSVariableParserRuleCall_1_2_0()); }
		ruleVLSVariable
		{ after(grammarAccess.getVLSExistentialQuantifierAccess().getVariablesVLSVariableParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSExistentialQuantifier__VariablesAssignment_1_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSExistentialQuantifierAccess().getVariablesVLSVariableParserRuleCall_1_3_1_0()); }
		ruleVLSVariable
		{ after(grammarAccess.getVLSExistentialQuantifierAccess().getVariablesVLSVariableParserRuleCall_1_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSExistentialQuantifier__OperandAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSExistentialQuantifierAccess().getOperandVLSUnitaryFormulaParserRuleCall_2_0()); }
		ruleVLSUnitaryFormula
		{ after(grammarAccess.getVLSExistentialQuantifierAccess().getOperandVLSUnitaryFormulaParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUnaryNegation__OperandAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSUnaryNegationAccess().getOperandVLSUnitaryFormulaParserRuleCall_2_0()); }
		ruleVLSUnitaryFormula
		{ after(grammarAccess.getVLSUnaryNegationAccess().getOperandVLSUnitaryFormulaParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSUnaryInfix__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSUnaryInfixAccess().getRightVLSFunctionParserRuleCall_1_1_0()); }
		ruleVLSFunction
		{ after(grammarAccess.getVLSUnaryInfixAccess().getRightVLSFunctionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFunction__ConstantAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSFunctionAccess().getConstantAlternatives_1_0()); }
		(rule__VLSFunction__ConstantAlternatives_1_0)
		{ after(grammarAccess.getVLSFunctionAccess().getConstantAlternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFunction__TermsAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSFunctionAccess().getTermsVLSFofTermParserRuleCall_2_1_0()); }
		ruleVLSFofTerm
		{ after(grammarAccess.getVLSFunctionAccess().getTermsVLSFofTermParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFunction__TermsAssignment_2_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSFunctionAccess().getTermsVLSFofTermParserRuleCall_2_2_1_0()); }
		ruleVLSFofTerm
		{ after(grammarAccess.getVLSFunctionAccess().getTermsVLSFofTermParserRuleCall_2_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSVariable__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSVariableAccess().getNameUPPER_WORD_IDTerminalRuleCall_0()); }
		RULE_UPPER_WORD_ID
		{ after(grammarAccess.getVLSVariableAccess().getNameUPPER_WORD_IDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFunctionFof__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSFunctionFofAccess().getNameAlternatives_0_0()); }
		(rule__VLSFunctionFof__NameAlternatives_0_0)
		{ after(grammarAccess.getVLSFunctionFofAccess().getNameAlternatives_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFunctionFof__TermsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSFunctionFofAccess().getTermsVLSFofTermParserRuleCall_1_1_0()); }
		ruleVLSFofTerm
		{ after(grammarAccess.getVLSFunctionFofAccess().getTermsVLSFofTermParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSFunctionFof__TermsAssignment_1_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSFunctionFofAccess().getTermsVLSFofTermParserRuleCall_1_2_1_0()); }
		ruleVLSFofTerm
		{ after(grammarAccess.getVLSFunctionFofAccess().getTermsVLSFofTermParserRuleCall_1_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VLSDefinedTerm__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVLSDefinedTermAccess().getNameAlternatives_0()); }
		(rule__VLSDefinedTerm__NameAlternatives_0)
		{ after(grammarAccess.getVLSDefinedTermAccess().getNameAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

fragment RULE_ALPHA_NUMERIC : ('a'..'z'|'A'..'Z'|'0'..'9'|'_');

RULE_UPPER_WORD_ID : 'A'..'Z' RULE_ALPHA_NUMERIC*;

RULE_LOWER_WORD_ID : 'a'..'z' RULE_ALPHA_NUMERIC*;

RULE_DOUBLE_QUOTE : '"' ('\\' ('"'|'\\')|~(('\\'|'"')))* '"';

RULE_SINGLE_QUOTE : '\'' ('\\' ('\''|'\\')|~(('\\'|'\'')))+ '\'';

RULE_DOLLAR_ID : '$' RULE_LOWER_WORD_ID;

RULE_DOUBLE_DOLLAR_ID : '$$' RULE_LOWER_WORD_ID;

fragment RULE_UNSIGNED_INT_ID : ('0'|'1'..'9' RULE_INT?);

RULE_SIGNED_INT_ID : ('+'|'-')? RULE_UNSIGNED_INT_ID;

fragment RULE_UNSIGNED_REAL_FRAC_ID : RULE_UNSIGNED_INT_ID '.' RULE_INT;

fragment RULE_UNSIGNED_REAL_EXP_ID : (RULE_UNSIGNED_INT_ID|RULE_UNSIGNED_REAL_FRAC_ID) 'Ee' ('+'|'-')? RULE_INT;

RULE_SIGNED_REAL_ID : ('+'|'-')? (RULE_UNSIGNED_REAL_FRAC_ID|RULE_UNSIGNED_REAL_EXP_ID);

fragment RULE_UNSIGNED_RAT_ID : RULE_UNSIGNED_INT_ID '/' '1'..'9' RULE_INT?;

RULE_SIGNED_RAT_ID : ('+'|'-')? RULE_UNSIGNED_RAT_ID;

fragment RULE_ANY_OTHER : '%' ~(('\n'|'\r'))* '\r';

RULE_SINGLE_COMMENT : RULE_ANY_OTHER;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

fragment RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

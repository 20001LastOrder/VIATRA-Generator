/**
 * generated by Xtext 2.10.0
 */
package hu.bme.mit.inf.dslreasoner.application.applicationConfiguration.impl;

import hu.bme.mit.inf.dslreasoner.application.applicationConfiguration.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class ApplicationConfigurationFactoryImpl extends EFactoryImpl implements ApplicationConfigurationFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static ApplicationConfigurationFactory init()
  {
    try
    {
      ApplicationConfigurationFactory theApplicationConfigurationFactory = (ApplicationConfigurationFactory)EPackage.Registry.INSTANCE.getEFactory(ApplicationConfigurationPackage.eNS_URI);
      if (theApplicationConfigurationFactory != null)
      {
        return theApplicationConfigurationFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new ApplicationConfigurationFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ApplicationConfigurationFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case ApplicationConfigurationPackage.CONFIGURATION_SCRIPT: return createConfigurationScript();
      case ApplicationConfigurationPackage.COMMAND: return createCommand();
      case ApplicationConfigurationPackage.DECLARATION: return createDeclaration();
      case ApplicationConfigurationPackage.IMPORT: return createImport();
      case ApplicationConfigurationPackage.EPACKAGE_IMPORT: return createEPackageImport();
      case ApplicationConfigurationPackage.VIATRA_IMPORT: return createViatraImport();
      case ApplicationConfigurationPackage.METAMODEL_SPECIFICATION: return createMetamodelSpecification();
      case ApplicationConfigurationPackage.METAMODEL_ENTRY: return createMetamodelEntry();
      case ApplicationConfigurationPackage.ALL_PACKAGE_ENTRY: return createAllPackageEntry();
      case ApplicationConfigurationPackage.METAMODEL_ELEMENT: return createMetamodelElement();
      case ApplicationConfigurationPackage.METAMODEL_DECLARATION: return createMetamodelDeclaration();
      case ApplicationConfigurationPackage.METAMODEL_REFERENCE: return createMetamodelReference();
      case ApplicationConfigurationPackage.METAMODEL: return createMetamodel();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConfigurationScript createConfigurationScript()
  {
    ConfigurationScriptImpl configurationScript = new ConfigurationScriptImpl();
    return configurationScript;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Command createCommand()
  {
    CommandImpl command = new CommandImpl();
    return command;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Declaration createDeclaration()
  {
    DeclarationImpl declaration = new DeclarationImpl();
    return declaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Import createImport()
  {
    ImportImpl import_ = new ImportImpl();
    return import_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EPackageImport createEPackageImport()
  {
    EPackageImportImpl ePackageImport = new EPackageImportImpl();
    return ePackageImport;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ViatraImport createViatraImport()
  {
    ViatraImportImpl viatraImport = new ViatraImportImpl();
    return viatraImport;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MetamodelSpecification createMetamodelSpecification()
  {
    MetamodelSpecificationImpl metamodelSpecification = new MetamodelSpecificationImpl();
    return metamodelSpecification;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MetamodelEntry createMetamodelEntry()
  {
    MetamodelEntryImpl metamodelEntry = new MetamodelEntryImpl();
    return metamodelEntry;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AllPackageEntry createAllPackageEntry()
  {
    AllPackageEntryImpl allPackageEntry = new AllPackageEntryImpl();
    return allPackageEntry;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MetamodelElement createMetamodelElement()
  {
    MetamodelElementImpl metamodelElement = new MetamodelElementImpl();
    return metamodelElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MetamodelDeclaration createMetamodelDeclaration()
  {
    MetamodelDeclarationImpl metamodelDeclaration = new MetamodelDeclarationImpl();
    return metamodelDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MetamodelReference createMetamodelReference()
  {
    MetamodelReferenceImpl metamodelReference = new MetamodelReferenceImpl();
    return metamodelReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Metamodel createMetamodel()
  {
    MetamodelImpl metamodel = new MetamodelImpl();
    return metamodel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ApplicationConfigurationPackage getApplicationConfigurationPackage()
  {
    return (ApplicationConfigurationPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static ApplicationConfigurationPackage getPackage()
  {
    return ApplicationConfigurationPackage.eINSTANCE;
  }

} //ApplicationConfigurationFactoryImpl

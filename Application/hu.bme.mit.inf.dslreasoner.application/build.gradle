plugins {
    id 'viatra-solver.base'
    id 'viatra-solver.ecore'
    id 'viatra-solver.vql'
    id 'viatra-solver.xtend'
    id "org.xtext.xtend" version '2.0.8'
    id 'application'
}

sourceSets {
    main {
        java {
            srcDirs = ['src', 'xtend-gen', 'src-gen']
        }
        resources {
            srcDirs = ['src', 'src-gen']
            exclude "**/*.java"
        }
    }
}

application {
    mainClass = 'hu.bme.mit.inf.dslreasoner.application.execution.StandaloneScriptExecutor'
}

// Configure custom scripts to run the application
startScripts {
    doLast {
        // combine class path, as the quantity of dependencies is large
        windowsScript.text = windowsScript.text.replaceAll("set CLASSPATH=.*",
                "set CLASSPATH=%APP_HOME%\\\\lib\\\\\\*")

        unixScript.text = unixScript.text.replaceAll("CLASSPATH=.*", 'CLASSPATH=\\$APP_HOME\\/lib\\/\\*')
    }
}

def applicationDir = './Application/hu.bme.mit.inf.dslreasoner.application/'
def toolingJar = 'org.eclipse.viatra.query.tooling.core_2.4.1.202008261234.jar'
def toolingJarURL = 'http://download.eclipse.org/releases/2020-09/202009161000/plugins/org.eclipse.viatra.query.tooling.core_2.4.1.202008261234.jar'

// Task for automatic external Jar file downloading
task downloadNonRepositoryJar {
    def f = new File(applicationDir + toolingJar)

    if (!f.exists()) {
        new URL(toolingJarURL).withInputStream{ i -> f.withOutputStream{ it << i }}
    }
}

dependencies {
    implementation group: 'log4j', name: 'log4j', version: '1.2.17'
    implementation group: 'org.eclipse.equinox', name: 'org.eclipse.equinox.common', version: '3.6.0'
    implementation group: 'org.antlr', name: 'antlr-runtime', version: '3.2'
    implementation group: 'org.eclipse.xtext', name: 'org.eclipse.xtext.generator', version: '2.23.0'
    implementation group: 'org.eclipse.collections', name: 'eclipse-collections', version: '10.3.0'
    implementation group: 'org.eclipse.viatra', name: 'org.eclipse.viatra.query.patternlanguage.emf', version: '2.4.1'
    implementation group: 'org.apache.stratos', name: 'guice-multibindings', version: '3.0'
    implementation group: 'org.eclipse.viatra', name: 'viatra-query-language-extensions', version: '2.4.1'
    implementation group: 'org.eclipse.platform', name: 'org.eclipse.core.runtime', version: '3.19.0'
    implementation group: 'org.eclipse.core', name: 'org.eclipse.core.runtime', version: '3.7.0'
    implementation group: 'org.eclipse.viatra', name: 'org.eclipse.viatra.query.runtime.rete', version: '2.4.0'

    implementation files (toolingJar)

    implementation project (':Framework:hu.bme.mit.inf.dslreasoner.logic.model')
    implementation project (':Framework:hu.bme.mit.inf.dslreasoner.ecore2logic')
    implementation project (':Solvers:SMT-Solver:hu.bme.mit.inf.dslreasoner.smt.reasoner')
    implementation project (':Framework:hu.bme.mit.inf.dslreasoner.viatra2logic')
    implementation project (':Solvers:VIATRA-Solver:hu.bme.mit.inf.dslreasoner.viatrasolver.partialinterpretationlanguage')
    implementation project (':Solvers:VIATRA-Solver:hu.bme.mit.inf.dslreasoner.viatrasolver.reasoner')
    implementation project (':Solvers:Alloy-Solver:hu.bme.mit.inf.dlsreasoner.alloy.reasoner')
    implementation project (':Framework:hu.bme.mit.inf.dslreasoner.logic2ecore')
    implementation project (':Solvers:VIATRA-Solver:hu.bme.mit.inf.dslreasoner.viatrasolver.logic2viatra')
    implementation project (':Solvers:VIATRA-Solver:hu.bme.mit.inf.dslreasoner.visualisation')
    implementation project (':Application:org.eclipse.viatra.solver.language.model')
}

// Configure main class in Jar
jar {
    manifest {
        attributes(
                'Main-Class': 'hu.bme.mit.inf.dslreasoner.application.execution.StandaloneScriptExecutor'
        )
    }
 }

// Resolve external Jar before compilation
compileJava.dependsOn downloadNonRepositoryJar

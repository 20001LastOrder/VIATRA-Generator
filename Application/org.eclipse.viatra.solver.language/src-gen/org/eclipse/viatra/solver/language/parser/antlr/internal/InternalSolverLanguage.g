/*
 * generated by Xtext 2.21.0
 */
grammar InternalSolverLanguage;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.eclipse.viatra.solver.language.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.viatra.solver.language.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.viatra.solver.language.services.SolverLanguageGrammarAccess;

}

@parser::members {

 	private SolverLanguageGrammarAccess grammarAccess;

    public InternalSolverLanguageParser(TokenStream input, SolverLanguageGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Problem";
   	}

   	@Override
   	protected SolverLanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleProblem
entryRuleProblem returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProblemRule()); }
	iv_ruleProblem=ruleProblem
	{ $current=$iv_ruleProblem.current; }
	EOF;

// Rule Problem
ruleProblem returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getProblemAccess().getStatementsStatementParserRuleCall_0());
			}
			lv_statements_0_0=ruleStatement
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getProblemRule());
				}
				add(
					$current,
					"statements",
					lv_statements_0_0,
					"org.eclipse.viatra.solver.language.SolverLanguage.Statement");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getStatementAccess().getAssertionOrDefinitionParserRuleCall_0_0());
			}
			this_AssertionOrDefinition_0=ruleAssertionOrDefinition
			{
				$current = $this_AssertionOrDefinition_0.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getStatementAccess().getPredicateDefinitionParserRuleCall_0_1());
			}
			this_PredicateDefinition_1=rulePredicateDefinition
			{
				$current = $this_PredicateDefinition_1.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getStatementAccess().getUnnamedErrorPrediateDefinitionParserRuleCall_0_2());
			}
			this_UnnamedErrorPrediateDefinition_2=ruleUnnamedErrorPrediateDefinition
			{
				$current = $this_UnnamedErrorPrediateDefinition_2.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getStatementAccess().getDefaultDefinitionParserRuleCall_0_3());
			}
			this_DefaultDefinition_3=ruleDefaultDefinition
			{
				$current = $this_DefaultDefinition_3.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getStatementAccess().getExternPredicateDefinitionParserRuleCall_0_4());
			}
			this_ExternPredicateDefinition_4=ruleExternPredicateDefinition
			{
				$current = $this_ExternPredicateDefinition_4.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getStatementAccess().getMetricDefinitionParserRuleCall_0_5());
			}
			this_MetricDefinition_5=ruleMetricDefinition
			{
				$current = $this_MetricDefinition_5.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getStatementAccess().getExternMetricDefinitionParserRuleCall_0_6());
			}
			this_ExternMetricDefinition_6=ruleExternMetricDefinition
			{
				$current = $this_ExternMetricDefinition_6.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getStatementAccess().getClassDefinitionParserRuleCall_0_7());
			}
			this_ClassDefinition_7=ruleClassDefinition
			{
				$current = $this_ClassDefinition_7.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getStatementAccess().getScopeDefinitionParserRuleCall_0_8());
			}
			this_ScopeDefinition_8=ruleScopeDefinition
			{
				$current = $this_ScopeDefinition_8.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getStatementAccess().getObjectiveDefinitionParserRuleCall_0_9());
			}
			this_ObjectiveDefinition_9=ruleObjectiveDefinition
			{
				$current = $this_ObjectiveDefinition_9.current;
				afterParserOrEnumRuleCall();
			}
		)
		this_DOT_10=RULE_DOT
		{
			newLeafNode(this_DOT_10, grammarAccess.getStatementAccess().getDOTTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleAssertionOrDefinition
entryRuleAssertionOrDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssertionOrDefinitionRule()); }
	iv_ruleAssertionOrDefinition=ruleAssertionOrDefinition
	{ $current=$iv_ruleAssertionOrDefinition.current; }
	EOF;

// Rule AssertionOrDefinition
ruleAssertionOrDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAssertionOrDefinitionAccess().getExpressionParserRuleCall_0());
		}
		this_Expression_0=ruleExpression
		{
			$current = $this_Expression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getAssertionOrDefinitionAccess().getAssertionBodyAction_1_0_0(),
							$current);
					}
				)
				(
					otherlv_2=':'
					{
						newLeafNode(otherlv_2, grammarAccess.getAssertionOrDefinitionAccess().getColonKeyword_1_0_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getAssertionOrDefinitionAccess().getRangeExpressionParserRuleCall_1_0_1_1_0());
							}
							lv_range_3_0=ruleExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getAssertionOrDefinitionRule());
								}
								set(
									$current,
									"range",
									lv_range_3_0,
									"org.eclipse.viatra.solver.language.SolverLanguage.Expression");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)?
			)
			    |
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getAssertionOrDefinitionAccess().getPredicateDefinitionHeadAction_1_1_0(),
							$current);
					}
				)
				otherlv_5=':-'
				{
					newLeafNode(otherlv_5, grammarAccess.getAssertionOrDefinitionAccess().getColonHyphenMinusKeyword_1_1_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAssertionOrDefinitionAccess().getBodyExpressionParserRuleCall_1_1_2_0());
						}
						lv_body_6_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAssertionOrDefinitionRule());
							}
							set(
								$current,
								"body",
								lv_body_6_0,
								"org.eclipse.viatra.solver.language.SolverLanguage.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getAssertionOrDefinitionAccess().getMetricDefinitionHeadAction_1_2_0(),
							$current);
					}
				)
				otherlv_8='='
				{
					newLeafNode(otherlv_8, grammarAccess.getAssertionOrDefinitionAccess().getEqualsSignKeyword_1_2_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAssertionOrDefinitionAccess().getBodyExpressionParserRuleCall_1_2_2_0());
						}
						lv_body_9_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAssertionOrDefinitionRule());
							}
							set(
								$current,
								"body",
								lv_body_9_0,
								"org.eclipse.viatra.solver.language.SolverLanguage.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)
	)
;

// Entry rule entryRulePredicateDefinition
entryRulePredicateDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPredicateDefinitionRule()); }
	iv_rulePredicateDefinition=rulePredicateDefinition
	{ $current=$iv_rulePredicateDefinition.current; }
	EOF;

// Rule PredicateDefinition
rulePredicateDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					(
						lv_functional_0_0='functional'
						{
							newLeafNode(lv_functional_0_0, grammarAccess.getPredicateDefinitionAccess().getFunctionalFunctionalKeyword_0_0_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getPredicateDefinitionRule());
							}
							setWithLastConsumed($current, "functional", true, "functional");
						}
					)
				)
				(
					(
						lv_error_1_0='error'
						{
							newLeafNode(lv_error_1_0, grammarAccess.getPredicateDefinitionAccess().getErrorErrorKeyword_0_0_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getPredicateDefinitionRule());
							}
							setWithLastConsumed($current, "error", true, "error");
						}
					)
				)?
			)
			    |
			(
				(
					(
						lv_error_2_0='error'
						{
							newLeafNode(lv_error_2_0, grammarAccess.getPredicateDefinitionAccess().getErrorErrorKeyword_0_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getPredicateDefinitionRule());
							}
							setWithLastConsumed($current, "error", true, "error");
						}
					)
				)
				(
					(
						lv_functional_3_0='functional'
						{
							newLeafNode(lv_functional_3_0, grammarAccess.getPredicateDefinitionAccess().getFunctionalFunctionalKeyword_0_1_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getPredicateDefinitionRule());
							}
							setWithLastConsumed($current, "functional", true, "functional");
						}
					)
				)?
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPredicateDefinitionAccess().getHeadCallParserRuleCall_1_0());
				}
				lv_head_4_0=ruleCall
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPredicateDefinitionRule());
					}
					set(
						$current,
						"head",
						lv_head_4_0,
						"org.eclipse.viatra.solver.language.SolverLanguage.Call");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=':-'
		{
			newLeafNode(otherlv_5, grammarAccess.getPredicateDefinitionAccess().getColonHyphenMinusKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPredicateDefinitionAccess().getBodyExpressionParserRuleCall_3_0());
				}
				lv_body_6_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPredicateDefinitionRule());
					}
					set(
						$current,
						"body",
						lv_body_6_0,
						"org.eclipse.viatra.solver.language.SolverLanguage.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleUnnamedErrorPrediateDefinition
entryRuleUnnamedErrorPrediateDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnnamedErrorPrediateDefinitionRule()); }
	iv_ruleUnnamedErrorPrediateDefinition=ruleUnnamedErrorPrediateDefinition
	{ $current=$iv_ruleUnnamedErrorPrediateDefinition.current; }
	EOF;

// Rule UnnamedErrorPrediateDefinition
ruleUnnamedErrorPrediateDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='error'
		{
			newLeafNode(otherlv_0, grammarAccess.getUnnamedErrorPrediateDefinitionAccess().getErrorKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUnnamedErrorPrediateDefinitionAccess().getArgumentListArgumentListParserRuleCall_1_0());
				}
				lv_argumentList_1_0=ruleArgumentList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnnamedErrorPrediateDefinitionRule());
					}
					set(
						$current,
						"argumentList",
						lv_argumentList_1_0,
						"org.eclipse.viatra.solver.language.SolverLanguage.ArgumentList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=':-'
		{
			newLeafNode(otherlv_2, grammarAccess.getUnnamedErrorPrediateDefinitionAccess().getColonHyphenMinusKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUnnamedErrorPrediateDefinitionAccess().getBodyExpressionParserRuleCall_3_0());
				}
				lv_body_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnnamedErrorPrediateDefinitionRule());
					}
					set(
						$current,
						"body",
						lv_body_3_0,
						"org.eclipse.viatra.solver.language.SolverLanguage.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDefaultDefinition
entryRuleDefaultDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDefaultDefinitionRule()); }
	iv_ruleDefaultDefinition=ruleDefaultDefinition
	{ $current=$iv_ruleDefaultDefinition.current; }
	EOF;

// Rule DefaultDefinition
ruleDefaultDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='default'
		{
			newLeafNode(otherlv_0, grammarAccess.getDefaultDefinitionAccess().getDefaultKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDefaultDefinitionAccess().getHeadCallParserRuleCall_1_0());
				}
				lv_head_1_0=ruleCall
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDefaultDefinitionRule());
					}
					set(
						$current,
						"head",
						lv_head_1_0,
						"org.eclipse.viatra.solver.language.SolverLanguage.Call");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getDefaultDefinitionAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDefaultDefinitionAccess().getRangeExpressionParserRuleCall_3_0());
				}
				lv_range_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDefaultDefinitionRule());
					}
					set(
						$current,
						"range",
						lv_range_3_0,
						"org.eclipse.viatra.solver.language.SolverLanguage.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExternPredicateDefinition
entryRuleExternPredicateDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExternPredicateDefinitionRule()); }
	iv_ruleExternPredicateDefinition=ruleExternPredicateDefinition
	{ $current=$iv_ruleExternPredicateDefinition.current; }
	EOF;

// Rule ExternPredicateDefinition
ruleExternPredicateDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='extern'
		{
			newLeafNode(otherlv_0, grammarAccess.getExternPredicateDefinitionAccess().getExternKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExternPredicateDefinitionAccess().getHeadCallParserRuleCall_1_0());
				}
				lv_head_1_0=ruleCall
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExternPredicateDefinitionRule());
					}
					set(
						$current,
						"head",
						lv_head_1_0,
						"org.eclipse.viatra.solver.language.SolverLanguage.Call");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='.'
		{
			newLeafNode(otherlv_2, grammarAccess.getExternPredicateDefinitionAccess().getFullStopKeyword_2());
		}
	)
;

// Entry rule entryRuleMetricDefinition
entryRuleMetricDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMetricDefinitionRule()); }
	iv_ruleMetricDefinition=ruleMetricDefinition
	{ $current=$iv_ruleMetricDefinition.current; }
	EOF;

// Rule MetricDefinition
ruleMetricDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getMetricDefinitionAccess().getTypeMetricTypeEnumRuleCall_0_0());
				}
				lv_type_0_0=ruleMetricType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMetricDefinitionRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"org.eclipse.viatra.solver.language.SolverLanguage.MetricType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getMetricDefinitionAccess().getHeadExpressionParserRuleCall_1_0());
				}
				lv_head_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMetricDefinitionRule());
					}
					set(
						$current,
						"head",
						lv_head_1_0,
						"org.eclipse.viatra.solver.language.SolverLanguage.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='='
		{
			newLeafNode(otherlv_2, grammarAccess.getMetricDefinitionAccess().getEqualsSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMetricDefinitionAccess().getBodyExpressionParserRuleCall_3_0());
				}
				lv_body_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMetricDefinitionRule());
					}
					set(
						$current,
						"body",
						lv_body_3_0,
						"org.eclipse.viatra.solver.language.SolverLanguage.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExternMetricDefinition
entryRuleExternMetricDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExternMetricDefinitionRule()); }
	iv_ruleExternMetricDefinition=ruleExternMetricDefinition
	{ $current=$iv_ruleExternMetricDefinition.current; }
	EOF;

// Rule ExternMetricDefinition
ruleExternMetricDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='extern'
		{
			newLeafNode(otherlv_0, grammarAccess.getExternMetricDefinitionAccess().getExternKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExternMetricDefinitionAccess().getTypeMetricTypeEnumRuleCall_1_0());
				}
				lv_type_1_0=ruleMetricType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExternMetricDefinitionRule());
					}
					set(
						$current,
						"type",
						lv_type_1_0,
						"org.eclipse.viatra.solver.language.SolverLanguage.MetricType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getExternMetricDefinitionAccess().getHeadCallParserRuleCall_2_0());
				}
				lv_head_2_0=ruleCall
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExternMetricDefinitionRule());
					}
					set(
						$current,
						"head",
						lv_head_2_0,
						"org.eclipse.viatra.solver.language.SolverLanguage.Call");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getIfElseParserRuleCall_0());
		}
		this_IfElse_0=ruleIfElse
		{
			$current = $this_IfElse_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getDisjunctiveExpressionParserRuleCall_1());
		}
		this_DisjunctiveExpression_1=ruleDisjunctiveExpression
		{
			$current = $this_DisjunctiveExpression_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleIfElse
entryRuleIfElse returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfElseRule()); }
	iv_ruleIfElse=ruleIfElse
	{ $current=$iv_ruleIfElse.current; }
	EOF;

// Rule IfElse
ruleIfElse returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='if'
		{
			newLeafNode(otherlv_0, grammarAccess.getIfElseAccess().getIfKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfElseAccess().getConditionExpressionParserRuleCall_1_0());
				}
				lv_condition_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfElseRule());
					}
					set(
						$current,
						"condition",
						lv_condition_1_0,
						"org.eclipse.viatra.solver.language.SolverLanguage.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='then'
		{
			newLeafNode(otherlv_2, grammarAccess.getIfElseAccess().getThenKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfElseAccess().getThenExpressionParserRuleCall_3_0());
				}
				lv_then_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfElseRule());
					}
					set(
						$current,
						"then",
						lv_then_3_0,
						"org.eclipse.viatra.solver.language.SolverLanguage.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='else'
		{
			newLeafNode(otherlv_4, grammarAccess.getIfElseAccess().getElseKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfElseAccess().getElseExpressionParserRuleCall_5_0());
				}
				lv_else_5_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfElseRule());
					}
					set(
						$current,
						"else",
						lv_else_5_0,
						"org.eclipse.viatra.solver.language.SolverLanguage.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDisjunctiveExpression
entryRuleDisjunctiveExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDisjunctiveExpressionRule()); }
	iv_ruleDisjunctiveExpression=ruleDisjunctiveExpression
	{ $current=$iv_ruleDisjunctiveExpression.current; }
	EOF;

// Rule DisjunctiveExpression
ruleDisjunctiveExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDisjunctiveExpressionAccess().getConjunctiveExpressionParserRuleCall_0());
		}
		this_ConjunctiveExpression_0=ruleConjunctiveExpression
		{
			$current = $this_ConjunctiveExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndAdd(
							grammarAccess.getDisjunctiveExpressionAccess().getDisjunctionChildrenAction_1_0_0(),
							$current);
					}
				)
				(
					otherlv_2=';'
					{
						newLeafNode(otherlv_2, grammarAccess.getDisjunctiveExpressionAccess().getSemicolonKeyword_1_0_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getDisjunctiveExpressionAccess().getChildrenConjunctiveExpressionParserRuleCall_1_0_1_1_0());
							}
							lv_children_3_0=ruleConjunctiveExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getDisjunctiveExpressionRule());
								}
								add(
									$current,
									"children",
									lv_children_3_0,
									"org.eclipse.viatra.solver.language.SolverLanguage.ConjunctiveExpression");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)+
			)
			    |
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getDisjunctiveExpressionAccess().getCaseConditionAction_1_1_0(),
							$current);
					}
				)
				otherlv_5='->'
				{
					newLeafNode(otherlv_5, grammarAccess.getDisjunctiveExpressionAccess().getHyphenMinusGreaterThanSignKeyword_1_1_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getDisjunctiveExpressionAccess().getBodyConjunctiveExpressionParserRuleCall_1_1_2_0());
						}
						lv_body_6_0=ruleConjunctiveExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDisjunctiveExpressionRule());
							}
							set(
								$current,
								"body",
								lv_body_6_0,
								"org.eclipse.viatra.solver.language.SolverLanguage.ConjunctiveExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					{
						$current = forceCreateModelElementAndAdd(
							grammarAccess.getDisjunctiveExpressionAccess().getSwitchCasesAction_1_1_3(),
							$current);
					}
				)
				(
					otherlv_8=';'
					{
						newLeafNode(otherlv_8, grammarAccess.getDisjunctiveExpressionAccess().getSemicolonKeyword_1_1_4_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getDisjunctiveExpressionAccess().getCasesCaseParserRuleCall_1_1_4_1_0());
							}
							lv_cases_9_0=ruleCase
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getDisjunctiveExpressionRule());
								}
								add(
									$current,
									"cases",
									lv_cases_9_0,
									"org.eclipse.viatra.solver.language.SolverLanguage.Case");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)
		)?
	)
;

// Entry rule entryRuleCase
entryRuleCase returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCaseRule()); }
	iv_ruleCase=ruleCase
	{ $current=$iv_ruleCase.current; }
	EOF;

// Rule Case
ruleCase returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getCaseAccess().getConditionConjunctiveExpressionParserRuleCall_0_0());
				}
				lv_condition_0_0=ruleConjunctiveExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCaseRule());
					}
					set(
						$current,
						"condition",
						lv_condition_0_0,
						"org.eclipse.viatra.solver.language.SolverLanguage.ConjunctiveExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='->'
		{
			newLeafNode(otherlv_1, grammarAccess.getCaseAccess().getHyphenMinusGreaterThanSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCaseAccess().getBodyConjunctiveExpressionParserRuleCall_2_0());
				}
				lv_body_2_0=ruleConjunctiveExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCaseRule());
					}
					set(
						$current,
						"body",
						lv_body_2_0,
						"org.eclipse.viatra.solver.language.SolverLanguage.ConjunctiveExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleConjunctiveExpression
entryRuleConjunctiveExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConjunctiveExpressionRule()); }
	iv_ruleConjunctiveExpression=ruleConjunctiveExpression
	{ $current=$iv_ruleConjunctiveExpression.current; }
	EOF;

// Rule ConjunctiveExpression
ruleConjunctiveExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getConjunctiveExpressionAccess().getComparisonExpressionParserRuleCall_0());
		}
		this_ComparisonExpression_0=ruleComparisonExpression
		{
			$current = $this_ComparisonExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndAdd(
						grammarAccess.getConjunctiveExpressionAccess().getConjunctionChildrenAction_1_0(),
						$current);
				}
			)
			(
				otherlv_2=','
				{
					newLeafNode(otherlv_2, grammarAccess.getConjunctiveExpressionAccess().getCommaKeyword_1_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getConjunctiveExpressionAccess().getChildrenComparisonExpressionParserRuleCall_1_1_1_0());
						}
						lv_children_3_0=ruleComparisonExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getConjunctiveExpressionRule());
							}
							add(
								$current,
								"children",
								lv_children_3_0,
								"org.eclipse.viatra.solver.language.SolverLanguage.ComparisonExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)+
		)?
	)
;

// Entry rule entryRuleComparisonExpression
entryRuleComparisonExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComparisonExpressionRule()); }
	iv_ruleComparisonExpression=ruleComparisonExpression
	{ $current=$iv_ruleComparisonExpression.current; }
	EOF;

// Rule ComparisonExpression
ruleComparisonExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getComparisonExpressionAccess().getAdditiveExpressionParserRuleCall_0());
		}
		this_AdditiveExpression_0=ruleAdditiveExpression
		{
			$current = $this_AdditiveExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getComparisonExpressionAccess().getComparisonLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getComparisonExpressionAccess().getOpComparisonOperatorEnumRuleCall_1_1_0());
					}
					lv_op_2_0=ruleComparisonOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getComparisonExpressionRule());
						}
						set(
							$current,
							"op",
							lv_op_2_0,
							"org.eclipse.viatra.solver.language.SolverLanguage.ComparisonOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getComparisonExpressionAccess().getRightAdditiveExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleAdditiveExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getComparisonExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.eclipse.viatra.solver.language.SolverLanguage.AdditiveExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAdditiveExpressionRule()); }
	iv_ruleAdditiveExpression=ruleAdditiveExpression
	{ $current=$iv_ruleAdditiveExpression.current; }
	EOF;

// Rule AdditiveExpression
ruleAdditiveExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0());
		}
		this_MultiplicativeExpression_0=ruleMultiplicativeExpression
		{
			$current = $this_MultiplicativeExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAdditiveExpressionAccess().getBinaryExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getOpAdditiveBinaryOperatorEnumRuleCall_1_1_0());
					}
					lv_op_2_0=ruleAdditiveBinaryOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
						}
						set(
							$current,
							"op",
							lv_op_2_0,
							"org.eclipse.viatra.solver.language.SolverLanguage.AdditiveBinaryOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getRightMultiplicativeExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleMultiplicativeExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.eclipse.viatra.solver.language.SolverLanguage.MultiplicativeExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicativeExpressionRule()); }
	iv_ruleMultiplicativeExpression=ruleMultiplicativeExpression
	{ $current=$iv_ruleMultiplicativeExpression.current; }
	EOF;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getExponentialExpressionParserRuleCall_0());
		}
		this_ExponentialExpression_0=ruleExponentialExpression
		{
			$current = $this_ExponentialExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getMultiplicativeExpressionAccess().getBinaryExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getOpMultiplicativeBinaryOperatorEnumRuleCall_1_1_0());
					}
					lv_op_2_0=ruleMultiplicativeBinaryOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
						}
						set(
							$current,
							"op",
							lv_op_2_0,
							"org.eclipse.viatra.solver.language.SolverLanguage.MultiplicativeBinaryOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getRightExponentialExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleExponentialExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.eclipse.viatra.solver.language.SolverLanguage.ExponentialExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleExponentialExpression
entryRuleExponentialExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExponentialExpressionRule()); }
	iv_ruleExponentialExpression=ruleExponentialExpression
	{ $current=$iv_ruleExponentialExpression.current; }
	EOF;

// Rule ExponentialExpression
ruleExponentialExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExponentialExpressionAccess().getUnaryExpressionParserRuleCall_0());
		}
		this_UnaryExpression_0=ruleUnaryExpression
		{
			$current = $this_UnaryExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getExponentialExpressionAccess().getBinaryExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getExponentialExpressionAccess().getOpExponentialOpEnumRuleCall_1_1_0());
					}
					lv_op_2_0=ruleExponentialOp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExponentialExpressionRule());
						}
						set(
							$current,
							"op",
							lv_op_2_0,
							"org.eclipse.viatra.solver.language.SolverLanguage.ExponentialOp");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getExponentialExpressionAccess().getRightExponentialExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleExponentialExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExponentialExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.eclipse.viatra.solver.language.SolverLanguage.ExponentialExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnaryExpressionRule()); }
	iv_ruleUnaryExpression=ruleUnaryExpression
	{ $current=$iv_ruleUnaryExpression.current; }
	EOF;

// Rule UnaryExpression
ruleUnaryExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getUnaryExpressionAccess().getAggregationExpressionParserRuleCall_0());
		}
		this_AggregationExpression_0=ruleAggregationExpression
		{
			$current = $this_AggregationExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getUnaryExpressionAccess().getUnaryExpressionAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getUnaryExpressionAccess().getOpUnaryOpEnumRuleCall_1_1_0());
					}
					lv_op_2_0=ruleUnaryOp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
						}
						set(
							$current,
							"op",
							lv_op_2_0,
							"org.eclipse.viatra.solver.language.SolverLanguage.UnaryOp");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getUnaryExpressionAccess().getBodyAggregationExpressionParserRuleCall_1_2_0());
					}
					lv_body_3_0=ruleAggregationExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
						}
						set(
							$current,
							"body",
							lv_body_3_0,
							"org.eclipse.viatra.solver.language.SolverLanguage.AggregationExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleAggregationExpression
entryRuleAggregationExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAggregationExpressionRule()); }
	iv_ruleAggregationExpression=ruleAggregationExpression
	{ $current=$iv_ruleAggregationExpression.current; }
	EOF;

// Rule AggregationExpression
ruleAggregationExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAggregationExpressionAccess().getAtomicExpressionParserRuleCall_0());
		}
		this_AtomicExpression_0=ruleAtomicExpression
		{
			$current = $this_AtomicExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAggregationExpressionAccess().getCountParserRuleCall_1());
		}
		this_Count_1=ruleCount
		{
			$current = $this_Count_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAggregationExpressionAccess().getAggregationParserRuleCall_2());
		}
		this_Aggregation_2=ruleAggregation
		{
			$current = $this_Aggregation_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCount
entryRuleCount returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCountRule()); }
	iv_ruleCount=ruleCount
	{ $current=$iv_ruleCount.current; }
	EOF;

// Rule Count
ruleCount returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='count'
		{
			newLeafNode(otherlv_0, grammarAccess.getCountAccess().getCountKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getCountAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCountAccess().getBodyExpressionParserRuleCall_2_0());
				}
				lv_body_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCountRule());
					}
					set(
						$current,
						"body",
						lv_body_2_0,
						"org.eclipse.viatra.solver.language.SolverLanguage.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getCountAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleAggregation
entryRuleAggregation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAggregationRule()); }
	iv_ruleAggregation=ruleAggregation
	{ $current=$iv_ruleAggregation.current; }
	EOF;

// Rule Aggregation
ruleAggregation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAggregationAccess().getOpAggregationOpEnumRuleCall_0_0());
				}
				lv_op_0_0=ruleAggregationOp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAggregationRule());
					}
					set(
						$current,
						"op",
						lv_op_0_0,
						"org.eclipse.viatra.solver.language.SolverLanguage.AggregationOp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getAggregationAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAggregationAccess().getBodyExpressionParserRuleCall_2_0());
				}
				lv_body_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAggregationRule());
					}
					set(
						$current,
						"body",
						lv_body_2_0,
						"org.eclipse.viatra.solver.language.SolverLanguage.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='|'
		{
			newLeafNode(otherlv_3, grammarAccess.getAggregationAccess().getVerticalLineKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAggregationAccess().getConditionExpressionParserRuleCall_4_0());
				}
				lv_condition_4_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAggregationRule());
					}
					set(
						$current,
						"condition",
						lv_condition_4_0,
						"org.eclipse.viatra.solver.language.SolverLanguage.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getAggregationAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleAtomicExpression
entryRuleAtomicExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAtomicExpressionRule()); }
	iv_ruleAtomicExpression=ruleAtomicExpression
	{ $current=$iv_ruleAtomicExpression.current; }
	EOF;

// Rule AtomicExpression
ruleAtomicExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getAtomicExpressionAccess().getReferenceParserRuleCall_0_0());
			}
			this_Reference_0=ruleReference
			{
				$current = $this_Reference_0.current;
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getAtomicExpressionAccess().getCallFunctorAction_0_1_0(),
							$current);
					}
				)
				(
					('(')=>
					(
						{
							newCompositeNode(grammarAccess.getAtomicExpressionAccess().getArgumentListArgumentListParserRuleCall_0_1_1_0());
						}
						lv_argumentList_2_0=ruleArgumentList
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAtomicExpressionRule());
							}
							set(
								$current,
								"argumentList",
								lv_argumentList_2_0,
								"org.eclipse.viatra.solver.language.SolverLanguage.ArgumentList");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)?
		)
		    |
		{
			newCompositeNode(grammarAccess.getAtomicExpressionAccess().getIntervalParserRuleCall_1());
		}
		this_Interval_3=ruleInterval
		{
			$current = $this_Interval_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAtomicExpressionAccess().getLiteralParserRuleCall_2());
		}
		this_Literal_4=ruleLiteral
		{
			$current = $this_Literal_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_5='('
			{
				newLeafNode(otherlv_5, grammarAccess.getAtomicExpressionAccess().getLeftParenthesisKeyword_3_0());
			}
			{
				newCompositeNode(grammarAccess.getAtomicExpressionAccess().getExpressionParserRuleCall_3_1());
			}
			this_Expression_6=ruleExpression
			{
				$current = $this_Expression_6.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_7=')'
			{
				newLeafNode(otherlv_7, grammarAccess.getAtomicExpressionAccess().getRightParenthesisKeyword_3_2());
			}
		)
	)
;

// Entry rule entryRuleCall
entryRuleCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCallRule()); }
	iv_ruleCall=ruleCall
	{ $current=$iv_ruleCall.current; }
	EOF;

// Rule Call
ruleCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getCallAccess().getFunctorReferenceParserRuleCall_0_0());
				}
				lv_functor_0_0=ruleReference
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCallRule());
					}
					set(
						$current,
						"functor",
						lv_functor_0_0,
						"org.eclipse.viatra.solver.language.SolverLanguage.Reference");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					lv_transitiveClosure_1_0=RULE_STAR
					{
						newLeafNode(lv_transitiveClosure_1_0, grammarAccess.getCallAccess().getTransitiveClosureSTARTerminalRuleCall_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCallRule());
						}
						setWithLastConsumed(
							$current,
							"transitiveClosure",
							true,
							"org.eclipse.viatra.solver.language.SolverLanguage.STAR");
					}
				)
			)
			    |
			(
				(
					lv_reflexiveTransitiveClosure_2_0=RULE_PLUS
					{
						newLeafNode(lv_reflexiveTransitiveClosure_2_0, grammarAccess.getCallAccess().getReflexiveTransitiveClosurePLUSTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCallRule());
						}
						setWithLastConsumed(
							$current,
							"reflexiveTransitiveClosure",
							true,
							"org.eclipse.viatra.solver.language.SolverLanguage.PLUS");
					}
				)
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getCallAccess().getArgumentListArgumentListParserRuleCall_2_0());
				}
				lv_argumentList_3_0=ruleArgumentList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCallRule());
					}
					set(
						$current,
						"argumentList",
						lv_argumentList_3_0,
						"org.eclipse.viatra.solver.language.SolverLanguage.ArgumentList");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleArgumentList
entryRuleArgumentList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArgumentListRule()); }
	iv_ruleArgumentList=ruleArgumentList
	{ $current=$iv_ruleArgumentList.current; }
	EOF;

// Rule ArgumentList
ruleArgumentList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getArgumentListAccess().getArgumentListAction_0(),
					$current);
			}
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getArgumentListAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getArgumentListAccess().getArgumentsArgumentParserRuleCall_2_0_0());
					}
					lv_arguments_2_0=ruleArgument
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getArgumentListRule());
						}
						add(
							$current,
							"arguments",
							lv_arguments_2_0,
							"org.eclipse.viatra.solver.language.SolverLanguage.Argument");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getArgumentListAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getArgumentListAccess().getArgumentsArgumentParserRuleCall_2_1_1_0());
						}
						lv_arguments_4_0=ruleArgument
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getArgumentListRule());
							}
							add(
								$current,
								"arguments",
								lv_arguments_4_0,
								"org.eclipse.viatra.solver.language.SolverLanguage.Argument");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getArgumentListAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleArgument
entryRuleArgument returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArgumentRule()); }
	iv_ruleArgument=ruleArgument
	{ $current=$iv_ruleArgument.current; }
	EOF;

// Rule Argument
ruleArgument returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getArgumentAccess().getExpressionArgumentParserRuleCall_0());
		}
		this_ExpressionArgument_0=ruleExpressionArgument
		{
			$current = $this_ExpressionArgument_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getArgumentAccess().getStarArgumentParserRuleCall_1());
		}
		this_StarArgument_1=ruleStarArgument
		{
			$current = $this_StarArgument_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getArgumentAccess().getTypedArgumentParserRuleCall_2());
		}
		this_TypedArgument_2=ruleTypedArgument
		{
			$current = $this_TypedArgument_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getArgumentAccess().getTypedStarArgumentParserRuleCall_3());
		}
		this_TypedStarArgument_3=ruleTypedStarArgument
		{
			$current = $this_TypedStarArgument_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleExpressionArgument
entryRuleExpressionArgument returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionArgumentRule()); }
	iv_ruleExpressionArgument=ruleExpressionArgument
	{ $current=$iv_ruleExpressionArgument.current; }
	EOF;

// Rule ExpressionArgument
ruleExpressionArgument returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getExpressionArgumentAccess().getBodyComparisonExpressionParserRuleCall_0());
			}
			lv_body_0_0=ruleComparisonExpression
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getExpressionArgumentRule());
				}
				set(
					$current,
					"body",
					lv_body_0_0,
					"org.eclipse.viatra.solver.language.SolverLanguage.ComparisonExpression");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleStarArgument
entryRuleStarArgument returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStarArgumentRule()); }
	iv_ruleStarArgument=ruleStarArgument
	{ $current=$iv_ruleStarArgument.current; }
	EOF;

// Rule StarArgument
ruleStarArgument returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getStarArgumentAccess().getStarArgumentAction_0(),
					$current);
			}
		)
		otherlv_1='*'
		{
			newLeafNode(otherlv_1, grammarAccess.getStarArgumentAccess().getAsteriskKeyword_1());
		}
	)
;

// Entry rule entryRuleTypedArgument
entryRuleTypedArgument returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypedArgumentRule()); }
	iv_ruleTypedArgument=ruleTypedArgument
	{ $current=$iv_ruleTypedArgument.current; }
	EOF;

// Rule TypedArgument
ruleTypedArgument returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTypedArgumentRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getTypedArgumentAccess().getTypeNamedElementCrossReference_0_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTypedArgumentRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getTypedArgumentAccess().getVariableNamedElementCrossReference_1_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTypedStarArgument
entryRuleTypedStarArgument returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypedStarArgumentRule()); }
	iv_ruleTypedStarArgument=ruleTypedStarArgument
	{ $current=$iv_ruleTypedStarArgument.current; }
	EOF;

// Rule TypedStarArgument
ruleTypedStarArgument returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTypedStarArgumentRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getTypedStarArgumentAccess().getTypeNamedElementCrossReference_0_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='*'
		{
			newLeafNode(otherlv_1, grammarAccess.getTypedStarArgumentAccess().getAsteriskKeyword_1());
		}
	)
;

// Entry rule entryRuleReference
entryRuleReference returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReferenceRule()); }
	iv_ruleReference=ruleReference
	{ $current=$iv_ruleReference.current; }
	EOF;

// Rule Reference
ruleReference returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getReferenceRule());
				}
			}
			{
				newCompositeNode(grammarAccess.getReferenceAccess().getReferredNamedElementCrossReference_0());
			}
			ruleQualifiedName
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleInterval
entryRuleInterval returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntervalRule()); }
	iv_ruleInterval=ruleInterval
	{ $current=$iv_ruleInterval.current; }
	EOF;

// Rule Interval
ruleInterval returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getIntervalAccess().getLeftSquareBracketKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIntervalAccess().getLowerBoundExpressionParserRuleCall_1_0());
				}
				lv_lowerBound_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIntervalRule());
					}
					set(
						$current,
						"lowerBound",
						lv_lowerBound_1_0,
						"org.eclipse.viatra.solver.language.SolverLanguage.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='..'
		{
			newLeafNode(otherlv_2, grammarAccess.getIntervalAccess().getFullStopFullStopKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIntervalAccess().getUpperBoundExpressionParserRuleCall_3_0());
				}
				lv_upperBound_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIntervalRule());
					}
					set(
						$current,
						"upperBound",
						lv_upperBound_3_0,
						"org.eclipse.viatra.solver.language.SolverLanguage.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=']'
		{
			newLeafNode(otherlv_4, grammarAccess.getIntervalAccess().getRightSquareBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	iv_ruleLiteral=ruleLiteral
	{ $current=$iv_ruleLiteral.current; }
	EOF;

// Rule Literal
ruleLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLiteralAccess().getLogicLiteralParserRuleCall_0());
		}
		this_LogicLiteral_0=ruleLogicLiteral
		{
			$current = $this_LogicLiteral_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralAccess().getNumericLiteralParserRuleCall_1());
		}
		this_NumericLiteral_1=ruleNumericLiteral
		{
			$current = $this_NumericLiteral_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralAccess().getInfinityLiteralParserRuleCall_2());
		}
		this_InfinityLiteral_2=ruleInfinityLiteral
		{
			$current = $this_InfinityLiteral_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralAccess().getEmptyIntervalLiteralParserRuleCall_3());
		}
		this_EmptyIntervalLiteral_3=ruleEmptyIntervalLiteral
		{
			$current = $this_EmptyIntervalLiteral_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_4());
		}
		this_StringLiteral_4=ruleStringLiteral
		{
			$current = $this_StringLiteral_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleLogicLiteral
entryRuleLogicLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLogicLiteralRule()); }
	iv_ruleLogicLiteral=ruleLogicLiteral
	{ $current=$iv_ruleLogicLiteral.current; }
	EOF;

// Rule LogicLiteral
ruleLogicLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getLogicLiteralAccess().getValueLogicValueEnumRuleCall_0());
			}
			lv_value_0_0=ruleLogicValue
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getLogicLiteralRule());
				}
				set(
					$current,
					"value",
					lv_value_0_0,
					"org.eclipse.viatra.solver.language.SolverLanguage.LogicValue");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleNumericLiteral
entryRuleNumericLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumericLiteralRule()); }
	iv_ruleNumericLiteral=ruleNumericLiteral
	{ $current=$iv_ruleNumericLiteral.current; }
	EOF;

// Rule NumericLiteral
ruleNumericLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getNumericLiteralAccess().getValueRealParserRuleCall_0());
			}
			lv_value_0_0=ruleReal
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getNumericLiteralRule());
				}
				set(
					$current,
					"value",
					lv_value_0_0,
					"org.eclipse.viatra.solver.language.SolverLanguage.Real");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleInfinityLiteral
entryRuleInfinityLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInfinityLiteralRule()); }
	iv_ruleInfinityLiteral=ruleInfinityLiteral
	{ $current=$iv_ruleInfinityLiteral.current; }
	EOF;

// Rule InfinityLiteral
ruleInfinityLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getInfinityLiteralAccess().getInfinityLiteralAction_0(),
					$current);
			}
		)
		otherlv_1='inf'
		{
			newLeafNode(otherlv_1, grammarAccess.getInfinityLiteralAccess().getInfKeyword_1());
		}
	)
;

// Entry rule entryRuleEmptyIntervalLiteral
entryRuleEmptyIntervalLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEmptyIntervalLiteralRule()); }
	iv_ruleEmptyIntervalLiteral=ruleEmptyIntervalLiteral
	{ $current=$iv_ruleEmptyIntervalLiteral.current; }
	EOF;

// Rule EmptyIntervalLiteral
ruleEmptyIntervalLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getEmptyIntervalLiteralAccess().getEmptyIntervalLiteralAction_0(),
					$current);
			}
		)
		otherlv_1='empty'
		{
			newLeafNode(otherlv_1, grammarAccess.getEmptyIntervalLiteralAccess().getEmptyKeyword_1());
		}
	)
;

// Entry rule entryRuleStringLiteral
entryRuleStringLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringLiteralRule()); }
	iv_ruleStringLiteral=ruleStringLiteral
	{ $current=$iv_ruleStringLiteral.current; }
	EOF;

// Rule StringLiteral
ruleStringLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_STRING
			{
				newLeafNode(lv_value_0_0, grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getStringLiteralRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.eclipse.viatra.solver.language.SolverLanguage.STRING");
			}
		)
	)
;

// Entry rule entryRuleClassDefinition
entryRuleClassDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClassDefinitionRule()); }
	iv_ruleClassDefinition=ruleClassDefinition
	{ $current=$iv_ruleClassDefinition.current; }
	EOF;

// Rule ClassDefinition
ruleClassDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_abstract_0_0='abstract'
				{
					newLeafNode(lv_abstract_0_0, grammarAccess.getClassDefinitionAccess().getAbstractAbstractKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getClassDefinitionRule());
					}
					setWithLastConsumed($current, "abstract", true, "abstract");
				}
			)
		)?
		otherlv_1='class'
		{
			newLeafNode(otherlv_1, grammarAccess.getClassDefinitionAccess().getClassKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getClassDefinitionAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getClassDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_3='extends'
			{
				newLeafNode(otherlv_3, grammarAccess.getClassDefinitionAccess().getExtendsKeyword_3_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getClassDefinitionRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getClassDefinitionAccess().getSuperclassesNamedElementCrossReference_3_1_0());
					}
					ruleQualifiedName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_5=','
				{
					newLeafNode(otherlv_5, grammarAccess.getClassDefinitionAccess().getCommaKeyword_3_2_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getClassDefinitionRule());
							}
						}
						{
							newCompositeNode(grammarAccess.getClassDefinitionAccess().getSuperclassesNamedElementCrossReference_3_2_1_0());
						}
						ruleQualifiedName
						{
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_7='{'
		{
			newLeafNode(otherlv_7, grammarAccess.getClassDefinitionAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getClassDefinitionAccess().getMembersMemberDefinitionParserRuleCall_5_0());
				}
				lv_members_8_0=ruleMemberDefinition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClassDefinitionRule());
					}
					add(
						$current,
						"members",
						lv_members_8_0,
						"org.eclipse.viatra.solver.language.SolverLanguage.MemberDefinition");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_9='}'
		{
			newLeafNode(otherlv_9, grammarAccess.getClassDefinitionAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleMemberDefinition
entryRuleMemberDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMemberDefinitionRule()); }
	iv_ruleMemberDefinition=ruleMemberDefinition
	{ $current=$iv_ruleMemberDefinition.current; }
	EOF;

// Rule MemberDefinition
ruleMemberDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_containment_0_0='contains'
				{
					newLeafNode(lv_containment_0_0, grammarAccess.getMemberDefinitionAccess().getContainmentContainsKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMemberDefinitionRule());
					}
					setWithLastConsumed($current, "containment", true, "contains");
				}
			)
		)?
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMemberDefinitionRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getMemberDefinitionAccess().getTypeNamedElementCrossReference_1_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getMemberDefinitionAccess().getMultiplicityMultiplicityParserRuleCall_2_0());
				}
				lv_multiplicity_2_0=ruleMultiplicity
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMemberDefinitionRule());
					}
					set(
						$current,
						"multiplicity",
						lv_multiplicity_2_0,
						"org.eclipse.viatra.solver.language.SolverLanguage.Multiplicity");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				lv_name_3_0=RULE_ID
				{
					newLeafNode(lv_name_3_0, grammarAccess.getMemberDefinitionAccess().getNameIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMemberDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_3_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_4='opposite'
			{
				newLeafNode(otherlv_4, grammarAccess.getMemberDefinitionAccess().getOppositeKeyword_4_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMemberDefinitionRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getMemberDefinitionAccess().getOppositeNamedElementCrossReference_4_1_0());
					}
					ruleQualifiedName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_6=';'
			{
				newLeafNode(otherlv_6, grammarAccess.getMemberDefinitionAccess().getSemicolonKeyword_5());
			}
		)?
	)
;

// Entry rule entryRuleMultiplicity
entryRuleMultiplicity returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicityRule()); }
	iv_ruleMultiplicity=ruleMultiplicity
	{ $current=$iv_ruleMultiplicity.current; }
	EOF;

// Rule Multiplicity
ruleMultiplicity returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMultiplicityAccess().getManyMultiplicityParserRuleCall_0());
		}
		this_ManyMultiplicity_0=ruleManyMultiplicity
		{
			$current = $this_ManyMultiplicity_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMultiplicityAccess().getExactMultiplicityParserRuleCall_1());
		}
		this_ExactMultiplicity_1=ruleExactMultiplicity
		{
			$current = $this_ExactMultiplicity_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMultiplicityAccess().getBoundedMultiplicityParserRuleCall_2());
		}
		this_BoundedMultiplicity_2=ruleBoundedMultiplicity
		{
			$current = $this_BoundedMultiplicity_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleManyMultiplicity
entryRuleManyMultiplicity returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getManyMultiplicityRule()); }
	iv_ruleManyMultiplicity=ruleManyMultiplicity
	{ $current=$iv_ruleManyMultiplicity.current; }
	EOF;

// Rule ManyMultiplicity
ruleManyMultiplicity returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getManyMultiplicityAccess().getManyMultiplicityAction_0(),
					$current);
			}
		)
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getManyMultiplicityAccess().getLeftSquareBracketKeyword_1());
		}
		otherlv_2=']'
		{
			newLeafNode(otherlv_2, grammarAccess.getManyMultiplicityAccess().getRightSquareBracketKeyword_2());
		}
	)
;

// Entry rule entryRuleExactMultiplicity
entryRuleExactMultiplicity returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExactMultiplicityRule()); }
	iv_ruleExactMultiplicity=ruleExactMultiplicity
	{ $current=$iv_ruleExactMultiplicity.current; }
	EOF;

// Rule ExactMultiplicity
ruleExactMultiplicity returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getExactMultiplicityAccess().getLeftSquareBracketKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExactMultiplicityAccess().getMultiplicityUpperMultiplictyParserRuleCall_1_0());
				}
				lv_multiplicity_1_0=ruleUpperMultiplicty
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExactMultiplicityRule());
					}
					set(
						$current,
						"multiplicity",
						lv_multiplicity_1_0,
						"org.eclipse.viatra.solver.language.SolverLanguage.UpperMultiplicty");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=']'
		{
			newLeafNode(otherlv_2, grammarAccess.getExactMultiplicityAccess().getRightSquareBracketKeyword_2());
		}
	)
;

// Entry rule entryRuleBoundedMultiplicity
entryRuleBoundedMultiplicity returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBoundedMultiplicityRule()); }
	iv_ruleBoundedMultiplicity=ruleBoundedMultiplicity
	{ $current=$iv_ruleBoundedMultiplicity.current; }
	EOF;

// Rule BoundedMultiplicity
ruleBoundedMultiplicity returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getBoundedMultiplicityAccess().getLeftSquareBracketKeyword_0());
		}
		(
			(
				lv_lowerBound_1_0=RULE_INT
				{
					newLeafNode(lv_lowerBound_1_0, grammarAccess.getBoundedMultiplicityAccess().getLowerBoundINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBoundedMultiplicityRule());
					}
					setWithLastConsumed(
						$current,
						"lowerBound",
						lv_lowerBound_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_2='..'
		{
			newLeafNode(otherlv_2, grammarAccess.getBoundedMultiplicityAccess().getFullStopFullStopKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBoundedMultiplicityAccess().getUpperBoundUpperMultiplictyParserRuleCall_3_0());
				}
				lv_upperBound_3_0=ruleUpperMultiplicty
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBoundedMultiplicityRule());
					}
					set(
						$current,
						"upperBound",
						lv_upperBound_3_0,
						"org.eclipse.viatra.solver.language.SolverLanguage.UpperMultiplicty");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=']'
		{
			newLeafNode(otherlv_4, grammarAccess.getBoundedMultiplicityAccess().getRightSquareBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleScopeDefinition
entryRuleScopeDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getScopeDefinitionRule()); }
	iv_ruleScopeDefinition=ruleScopeDefinition
	{ $current=$iv_ruleScopeDefinition.current; }
	EOF;

// Rule ScopeDefinition
ruleScopeDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getScopeDefinitionAccess().getExactScopeDefinitionParserRuleCall_0());
		}
		this_ExactScopeDefinition_0=ruleExactScopeDefinition
		{
			$current = $this_ExactScopeDefinition_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getScopeDefinitionAccess().getBoundedScopeDefinitionParserRuleCall_1());
		}
		this_BoundedScopeDefinition_1=ruleBoundedScopeDefinition
		{
			$current = $this_BoundedScopeDefinition_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getScopeDefinitionAccess().getLowerBoundedScopeDefinitionParserRuleCall_2());
		}
		this_LowerBoundedScopeDefinition_2=ruleLowerBoundedScopeDefinition
		{
			$current = $this_LowerBoundedScopeDefinition_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleExactScopeDefinition
entryRuleExactScopeDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExactScopeDefinitionRule()); }
	iv_ruleExactScopeDefinition=ruleExactScopeDefinition
	{ $current=$iv_ruleExactScopeDefinition.current; }
	EOF;

// Rule ExactScopeDefinition
ruleExactScopeDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='scope'
		{
			newLeafNode(otherlv_0, grammarAccess.getExactScopeDefinitionAccess().getScopeKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExactScopeDefinitionRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getExactScopeDefinitionAccess().getTypeNamedElementCrossReference_1_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='=='
		{
			newLeafNode(otherlv_2, grammarAccess.getExactScopeDefinitionAccess().getEqualsSignEqualsSignKeyword_2());
		}
		(
			(
				lv_exactScope_3_0=RULE_INT
				{
					newLeafNode(lv_exactScope_3_0, grammarAccess.getExactScopeDefinitionAccess().getExactScopeINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExactScopeDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"exactScope",
						lv_exactScope_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleBoundedScopeDefinition
entryRuleBoundedScopeDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBoundedScopeDefinitionRule()); }
	iv_ruleBoundedScopeDefinition=ruleBoundedScopeDefinition
	{ $current=$iv_ruleBoundedScopeDefinition.current; }
	EOF;

// Rule BoundedScopeDefinition
ruleBoundedScopeDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='scope'
		{
			newLeafNode(otherlv_0, grammarAccess.getBoundedScopeDefinitionAccess().getScopeKeyword_0());
		}
		(
			(
				(
					(
						(
							lv_lowerBound_1_0=RULE_INT
							{
								newLeafNode(lv_lowerBound_1_0, grammarAccess.getBoundedScopeDefinitionAccess().getLowerBoundINTTerminalRuleCall_1_0_0_0_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getBoundedScopeDefinitionRule());
								}
								setWithLastConsumed(
									$current,
									"lowerBound",
									lv_lowerBound_1_0,
									"org.eclipse.xtext.common.Terminals.INT");
							}
						)
					)
					otherlv_2='<='
					{
						newLeafNode(otherlv_2, grammarAccess.getBoundedScopeDefinitionAccess().getLessThanSignEqualsSignKeyword_1_0_0_1());
					}
				)?
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getBoundedScopeDefinitionRule());
							}
						}
						{
							newCompositeNode(grammarAccess.getBoundedScopeDefinitionAccess().getTypeNamedElementCrossReference_1_0_1_0());
						}
						ruleQualifiedName
						{
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_4='<='
				{
					newLeafNode(otherlv_4, grammarAccess.getBoundedScopeDefinitionAccess().getLessThanSignEqualsSignKeyword_1_0_2());
				}
				(
					(
						lv_upperBound_5_0=RULE_INT
						{
							newLeafNode(lv_upperBound_5_0, grammarAccess.getBoundedScopeDefinitionAccess().getUpperBoundINTTerminalRuleCall_1_0_3_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getBoundedScopeDefinitionRule());
							}
							setWithLastConsumed(
								$current,
								"upperBound",
								lv_upperBound_5_0,
								"org.eclipse.xtext.common.Terminals.INT");
						}
					)
				)
			)
			    |
			(
				(
					(
						lv_upperBound_6_0=RULE_INT
						{
							newLeafNode(lv_upperBound_6_0, grammarAccess.getBoundedScopeDefinitionAccess().getUpperBoundINTTerminalRuleCall_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getBoundedScopeDefinitionRule());
							}
							setWithLastConsumed(
								$current,
								"upperBound",
								lv_upperBound_6_0,
								"org.eclipse.xtext.common.Terminals.INT");
						}
					)
				)
				otherlv_7='>='
				{
					newLeafNode(otherlv_7, grammarAccess.getBoundedScopeDefinitionAccess().getGreaterThanSignEqualsSignKeyword_1_1_1());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getBoundedScopeDefinitionRule());
							}
						}
						{
							newCompositeNode(grammarAccess.getBoundedScopeDefinitionAccess().getTypeNamedElementCrossReference_1_1_2_0());
						}
						ruleQualifiedName
						{
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_9='>='
					{
						newLeafNode(otherlv_9, grammarAccess.getBoundedScopeDefinitionAccess().getGreaterThanSignEqualsSignKeyword_1_1_3_0());
					}
					(
						(
							lv_lowerBound_10_0=RULE_INT
							{
								newLeafNode(lv_lowerBound_10_0, grammarAccess.getBoundedScopeDefinitionAccess().getLowerBoundINTTerminalRuleCall_1_1_3_1_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getBoundedScopeDefinitionRule());
								}
								setWithLastConsumed(
									$current,
									"lowerBound",
									lv_lowerBound_10_0,
									"org.eclipse.xtext.common.Terminals.INT");
							}
						)
					)
				)?
			)
		)
		otherlv_11='.'
		{
			newLeafNode(otherlv_11, grammarAccess.getBoundedScopeDefinitionAccess().getFullStopKeyword_2());
		}
	)
;

// Entry rule entryRuleLowerBoundedScopeDefinition
entryRuleLowerBoundedScopeDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLowerBoundedScopeDefinitionRule()); }
	iv_ruleLowerBoundedScopeDefinition=ruleLowerBoundedScopeDefinition
	{ $current=$iv_ruleLowerBoundedScopeDefinition.current; }
	EOF;

// Rule LowerBoundedScopeDefinition
ruleLowerBoundedScopeDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='scope'
		{
			newLeafNode(otherlv_0, grammarAccess.getLowerBoundedScopeDefinitionAccess().getScopeKeyword_0());
		}
		(
			(
				(
					(
						lv_lowerBound_1_0=RULE_INT
						{
							newLeafNode(lv_lowerBound_1_0, grammarAccess.getLowerBoundedScopeDefinitionAccess().getLowerBoundINTTerminalRuleCall_1_0_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getLowerBoundedScopeDefinitionRule());
							}
							setWithLastConsumed(
								$current,
								"lowerBound",
								lv_lowerBound_1_0,
								"org.eclipse.xtext.common.Terminals.INT");
						}
					)
				)
				otherlv_2='<='
				{
					newLeafNode(otherlv_2, grammarAccess.getLowerBoundedScopeDefinitionAccess().getLessThanSignEqualsSignKeyword_1_0_1());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getLowerBoundedScopeDefinitionRule());
							}
						}
						{
							newCompositeNode(grammarAccess.getLowerBoundedScopeDefinitionAccess().getTypeNamedElementCrossReference_1_0_2_0());
						}
						ruleQualifiedName
						{
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getLowerBoundedScopeDefinitionRule());
							}
						}
						{
							newCompositeNode(grammarAccess.getLowerBoundedScopeDefinitionAccess().getTypeNamedElementCrossReference_1_1_0_0());
						}
						ruleQualifiedName
						{
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_5='>='
				{
					newLeafNode(otherlv_5, grammarAccess.getLowerBoundedScopeDefinitionAccess().getGreaterThanSignEqualsSignKeyword_1_1_1());
				}
				(
					(
						lv_lowerBound_6_0=RULE_INT
						{
							newLeafNode(lv_lowerBound_6_0, grammarAccess.getLowerBoundedScopeDefinitionAccess().getLowerBoundINTTerminalRuleCall_1_1_2_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getLowerBoundedScopeDefinitionRule());
							}
							setWithLastConsumed(
								$current,
								"lowerBound",
								lv_lowerBound_6_0,
								"org.eclipse.xtext.common.Terminals.INT");
						}
					)
				)
			)
		)
		otherlv_7='.'
		{
			newLeafNode(otherlv_7, grammarAccess.getLowerBoundedScopeDefinitionAccess().getFullStopKeyword_2());
		}
	)
;

// Entry rule entryRuleObjectiveDefinition
entryRuleObjectiveDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObjectiveDefinitionRule()); }
	iv_ruleObjectiveDefinition=ruleObjectiveDefinition
	{ $current=$iv_ruleObjectiveDefinition.current; }
	EOF;

// Rule ObjectiveDefinition
ruleObjectiveDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getObjectiveDefinitionAccess().getKindObjectiveKindEnumRuleCall_0_0());
				}
				lv_kind_0_0=ruleObjectiveKind
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObjectiveDefinitionRule());
					}
					set(
						$current,
						"kind",
						lv_kind_0_0,
						"org.eclipse.viatra.solver.language.SolverLanguage.ObjectiveKind");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getObjectiveDefinitionAccess().getObjectiveExpressionParserRuleCall_1_0());
				}
				lv_objective_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObjectiveDefinitionRule());
					}
					set(
						$current,
						"objective",
						lv_objective_1_0,
						"org.eclipse.viatra.solver.language.SolverLanguage.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleUpperMultiplicty
entryRuleUpperMultiplicty returns [String current=null]:
	{ newCompositeNode(grammarAccess.getUpperMultiplictyRule()); }
	iv_ruleUpperMultiplicty=ruleUpperMultiplicty
	{ $current=$iv_ruleUpperMultiplicty.current.getText(); }
	EOF;

// Rule UpperMultiplicty
ruleUpperMultiplicty returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getUpperMultiplictyAccess().getINTTerminalRuleCall_0());
		}
		    |
		kw='*'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUpperMultiplictyAccess().getAsteriskKeyword_1());
		}
	)
;

// Entry rule entryRuleReal
entryRuleReal returns [String current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}:
	{ newCompositeNode(grammarAccess.getRealRule()); }
	iv_ruleReal=ruleReal
	{ $current=$iv_ruleReal.current.getText(); }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule Real
ruleReal returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getRealAccess().getINTTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getRealAccess().getFullStopKeyword_1_0());
			}
			this_INT_2=RULE_INT
			{
				$current.merge(this_INT_2);
			}
			{
				newLeafNode(this_INT_2, grammarAccess.getRealAccess().getINTTerminalRuleCall_1_1());
			}
		)?
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); }
	iv_ruleQualifiedName=ruleQualifiedName
	{ $current=$iv_ruleQualifiedName.current.getText(); }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
@after {
	leaveRule();
}:
	(
		(
			this_ID_0=RULE_ID
			{
				$current.merge(this_ID_0);
			}
			{
				newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0_0());
			}
			(
				kw='.'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_0_1_0());
				}
				this_ID_2=RULE_ID
				{
					$current.merge(this_ID_2);
				}
				{
					newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0_1_1());
				}
			)*
		)
		    |
		this_QUOTED_ID_3=RULE_QUOTED_ID
		{
			$current.merge(this_QUOTED_ID_3);
		}
		{
			newLeafNode(this_QUOTED_ID_3, grammarAccess.getQualifiedNameAccess().getQUOTED_IDTerminalRuleCall_1());
		}
	)
;
finally {
	myHiddenTokenState.restore();
}

// Rule MetricType
ruleMetricType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='int'
			{
				$current = grammarAccess.getMetricTypeAccess().getINTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getMetricTypeAccess().getINTEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='real'
			{
				$current = grammarAccess.getMetricTypeAccess().getREALEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getMetricTypeAccess().getREALEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule ComparisonOperator
ruleComparisonOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='=='
			{
				$current = grammarAccess.getComparisonOperatorAccess().getEQEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getComparisonOperatorAccess().getEQEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='!='
			{
				$current = grammarAccess.getComparisonOperatorAccess().getNOT_EQEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getComparisonOperatorAccess().getNOT_EQEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='<'
			{
				$current = grammarAccess.getComparisonOperatorAccess().getLESSEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getComparisonOperatorAccess().getLESSEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='<='
			{
				$current = grammarAccess.getComparisonOperatorAccess().getLESS_EQEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getComparisonOperatorAccess().getLESS_EQEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='>'
			{
				$current = grammarAccess.getComparisonOperatorAccess().getGREATEREnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getComparisonOperatorAccess().getGREATEREnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='>='
			{
				$current = grammarAccess.getComparisonOperatorAccess().getGREATER_EQEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getComparisonOperatorAccess().getGREATER_EQEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='in'
			{
				$current = grammarAccess.getComparisonOperatorAccess().getINEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getComparisonOperatorAccess().getINEnumLiteralDeclaration_6());
			}
		)
	)
;

// Rule AdditiveBinaryOperator
ruleAdditiveBinaryOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='+'
			{
				$current = grammarAccess.getAdditiveBinaryOperatorAccess().getADDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getAdditiveBinaryOperatorAccess().getADDEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='-'
			{
				$current = grammarAccess.getAdditiveBinaryOperatorAccess().getSUBEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getAdditiveBinaryOperatorAccess().getSUBEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule MultiplicativeBinaryOperator
ruleMultiplicativeBinaryOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='*'
			{
				$current = grammarAccess.getMultiplicativeBinaryOperatorAccess().getMULEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getMultiplicativeBinaryOperatorAccess().getMULEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='/'
			{
				$current = grammarAccess.getMultiplicativeBinaryOperatorAccess().getDIVEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getMultiplicativeBinaryOperatorAccess().getDIVEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule ExponentialOp
ruleExponentialOp returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0='^'
		{
			$current = grammarAccess.getExponentialOpAccess().getPOWEnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getExponentialOpAccess().getPOWEnumLiteralDeclaration());
		}
	)
;

// Rule UnaryOp
ruleUnaryOp returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='!'
			{
				$current = grammarAccess.getUnaryOpAccess().getNEGEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getUnaryOpAccess().getNEGEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='+'
			{
				$current = grammarAccess.getUnaryOpAccess().getPLUSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getUnaryOpAccess().getPLUSEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='-'
			{
				$current = grammarAccess.getUnaryOpAccess().getMINUSEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getUnaryOpAccess().getMINUSEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='may'
			{
				$current = grammarAccess.getUnaryOpAccess().getMAYEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getUnaryOpAccess().getMAYEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='must'
			{
				$current = grammarAccess.getUnaryOpAccess().getMUSTEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getUnaryOpAccess().getMUSTEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='current'
			{
				$current = grammarAccess.getUnaryOpAccess().getCURRENTEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getUnaryOpAccess().getCURRENTEnumLiteralDeclaration_5());
			}
		)
	)
;

// Rule AggregationOp
ruleAggregationOp returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='only'
			{
				$current = grammarAccess.getAggregationOpAccess().getONLYEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getAggregationOpAccess().getONLYEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='sum'
			{
				$current = grammarAccess.getAggregationOpAccess().getSUMEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getAggregationOpAccess().getSUMEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='prod'
			{
				$current = grammarAccess.getAggregationOpAccess().getPRODEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getAggregationOpAccess().getPRODEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='avg'
			{
				$current = grammarAccess.getAggregationOpAccess().getAVGEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getAggregationOpAccess().getAVGEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='min'
			{
				$current = grammarAccess.getAggregationOpAccess().getMINEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getAggregationOpAccess().getMINEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='max'
			{
				$current = grammarAccess.getAggregationOpAccess().getMAXEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getAggregationOpAccess().getMAXEnumLiteralDeclaration_5());
			}
		)
	)
;

// Rule LogicValue
ruleLogicValue returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='true'
			{
				$current = grammarAccess.getLogicValueAccess().getTRUEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getLogicValueAccess().getTRUEEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='false'
			{
				$current = grammarAccess.getLogicValueAccess().getFALSEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getLogicValueAccess().getFALSEEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='unknown'
			{
				$current = grammarAccess.getLogicValueAccess().getUNKNOWNEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getLogicValueAccess().getUNKNOWNEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='error'
			{
				$current = grammarAccess.getLogicValueAccess().getERROREnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getLogicValueAccess().getERROREnumLiteralDeclaration_3());
			}
		)
	)
;

// Rule ObjectiveKind
ruleObjectiveKind returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='minimize'
			{
				$current = grammarAccess.getObjectiveKindAccess().getMINIMIZEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getObjectiveKindAccess().getMINIMIZEEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='maximize'
			{
				$current = grammarAccess.getObjectiveKindAccess().getMAXIMIZEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getObjectiveKindAccess().getMAXIMIZEEnumLiteralDeclaration_1());
			}
		)
	)
;

RULE_STRING : '"' ('\\' .|~(('\\'|'"')))* '"';

RULE_QUOTED_ID : '\'' ('\\' .|~(('\\'|'\'')))* '\'';

RULE_PLUS : 'synthetic::plus';

RULE_STAR : 'synthetic::star';

RULE_DOT : 'synthetic::dot';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;

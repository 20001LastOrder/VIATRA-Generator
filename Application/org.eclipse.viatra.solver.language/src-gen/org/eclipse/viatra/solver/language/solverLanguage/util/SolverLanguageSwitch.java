/**
 * generated by Xtext 2.18.0.M3
 */
package org.eclipse.viatra.solver.language.solverLanguage.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import org.eclipse.viatra.solver.language.solverLanguage.AllInstances;
import org.eclipse.viatra.solver.language.solverLanguage.AllObjects;
import org.eclipse.viatra.solver.language.solverLanguage.BasicInterpretation;
import org.eclipse.viatra.solver.language.solverLanguage.BooleanFalse;
import org.eclipse.viatra.solver.language.solverLanguage.BooleanObject;
import org.eclipse.viatra.solver.language.solverLanguage.BooleanSymbol;
import org.eclipse.viatra.solver.language.solverLanguage.BooleanTrue;
import org.eclipse.viatra.solver.language.solverLanguage.BooleanValue;
import org.eclipse.viatra.solver.language.solverLanguage.CDInterpretation;
import org.eclipse.viatra.solver.language.solverLanguage.ClassInterpretation;
import org.eclipse.viatra.solver.language.solverLanguage.ClosureType;
import org.eclipse.viatra.solver.language.solverLanguage.ComplexObject;
import org.eclipse.viatra.solver.language.solverLanguage.Constraint;
import org.eclipse.viatra.solver.language.solverLanguage.DataObject;
import org.eclipse.viatra.solver.language.solverLanguage.DataSymbol;
import org.eclipse.viatra.solver.language.solverLanguage.DefaultInterpretation;
import org.eclipse.viatra.solver.language.solverLanguage.EnumInterpretation;
import org.eclipse.viatra.solver.language.solverLanguage.EqualsSymbol;
import org.eclipse.viatra.solver.language.solverLanguage.ExistSymbol;
import org.eclipse.viatra.solver.language.solverLanguage.False;
import org.eclipse.viatra.solver.language.solverLanguage.FieldRelationInterpretation;
import org.eclipse.viatra.solver.language.solverLanguage.GlobalRelationInterpretation;
import org.eclipse.viatra.solver.language.solverLanguage.IntObject;
import org.eclipse.viatra.solver.language.solverLanguage.IntegerSymbol;
import org.eclipse.viatra.solver.language.solverLanguage.Interpretation;
import org.eclipse.viatra.solver.language.solverLanguage.IrreflexiveClosure;
import org.eclipse.viatra.solver.language.solverLanguage.Literal;
import org.eclipse.viatra.solver.language.solverLanguage.ModelSymbol;
import org.eclipse.viatra.solver.language.solverLanguage.MultiplicityDefinition;
import org.eclipse.viatra.solver.language.solverLanguage.NamedObject;
import org.eclipse.viatra.solver.language.solverLanguage.Negative;
import org.eclipse.viatra.solver.language.solverLanguage.Parameter;
import org.eclipse.viatra.solver.language.solverLanguage.PartialitySymbol;
import org.eclipse.viatra.solver.language.solverLanguage.PatternBody;
import org.eclipse.viatra.solver.language.solverLanguage.Polarity;
import org.eclipse.viatra.solver.language.solverLanguage.Positive;
import org.eclipse.viatra.solver.language.solverLanguage.Predicate;
import org.eclipse.viatra.solver.language.solverLanguage.Problem;
import org.eclipse.viatra.solver.language.solverLanguage.RealObject;
import org.eclipse.viatra.solver.language.solverLanguage.RealSymbol;
import org.eclipse.viatra.solver.language.solverLanguage.ReflexiveClosure;
import org.eclipse.viatra.solver.language.solverLanguage.SolverLanguagePackage;
import org.eclipse.viatra.solver.language.solverLanguage.Statement;
import org.eclipse.viatra.solver.language.solverLanguage.StringObject;
import org.eclipse.viatra.solver.language.solverLanguage.StringSymbol;
import org.eclipse.viatra.solver.language.solverLanguage.Symbol;
import org.eclipse.viatra.solver.language.solverLanguage.True;
import org.eclipse.viatra.solver.language.solverLanguage.TruthValue;
import org.eclipse.viatra.solver.language.solverLanguage.Unknown;
import org.eclipse.viatra.solver.language.solverLanguage.UnnamedObject;
import org.eclipse.viatra.solver.language.solverLanguage.Variable;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see org.eclipse.viatra.solver.language.solverLanguage.SolverLanguagePackage
 * @generated
 */
public class SolverLanguageSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static SolverLanguagePackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SolverLanguageSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = SolverLanguagePackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case SolverLanguagePackage.PROBLEM:
      {
        Problem problem = (Problem)theEObject;
        T result = caseProblem(problem);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SolverLanguagePackage.STATEMENT:
      {
        Statement statement = (Statement)theEObject;
        T result = caseStatement(statement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SolverLanguagePackage.BOOLEAN_VALUE:
      {
        BooleanValue booleanValue = (BooleanValue)theEObject;
        T result = caseBooleanValue(booleanValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SolverLanguagePackage.TRUTH_VALUE:
      {
        TruthValue truthValue = (TruthValue)theEObject;
        T result = caseTruthValue(truthValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SolverLanguagePackage.INTERPRETATION:
      {
        Interpretation interpretation = (Interpretation)theEObject;
        T result = caseInterpretation(interpretation);
        if (result == null) result = caseStatement(interpretation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SolverLanguagePackage.BASIC_INTERPRETATION:
      {
        BasicInterpretation basicInterpretation = (BasicInterpretation)theEObject;
        T result = caseBasicInterpretation(basicInterpretation);
        if (result == null) result = caseInterpretation(basicInterpretation);
        if (result == null) result = caseStatement(basicInterpretation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SolverLanguagePackage.SYMBOL:
      {
        Symbol symbol = (Symbol)theEObject;
        T result = caseSymbol(symbol);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SolverLanguagePackage.MODEL_SYMBOL:
      {
        ModelSymbol modelSymbol = (ModelSymbol)theEObject;
        T result = caseModelSymbol(modelSymbol);
        if (result == null) result = caseSymbol(modelSymbol);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SolverLanguagePackage.PARTIALITY_SYMBOL:
      {
        PartialitySymbol partialitySymbol = (PartialitySymbol)theEObject;
        T result = casePartialitySymbol(partialitySymbol);
        if (result == null) result = caseSymbol(partialitySymbol);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SolverLanguagePackage.EXIST_SYMBOL:
      {
        ExistSymbol existSymbol = (ExistSymbol)theEObject;
        T result = caseExistSymbol(existSymbol);
        if (result == null) result = casePartialitySymbol(existSymbol);
        if (result == null) result = caseSymbol(existSymbol);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SolverLanguagePackage.EQUALS_SYMBOL:
      {
        EqualsSymbol equalsSymbol = (EqualsSymbol)theEObject;
        T result = caseEqualsSymbol(equalsSymbol);
        if (result == null) result = casePartialitySymbol(equalsSymbol);
        if (result == null) result = caseSymbol(equalsSymbol);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SolverLanguagePackage.DATA_SYMBOL:
      {
        DataSymbol dataSymbol = (DataSymbol)theEObject;
        T result = caseDataSymbol(dataSymbol);
        if (result == null) result = caseSymbol(dataSymbol);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SolverLanguagePackage.BOOLEAN_SYMBOL:
      {
        BooleanSymbol booleanSymbol = (BooleanSymbol)theEObject;
        T result = caseBooleanSymbol(booleanSymbol);
        if (result == null) result = caseDataSymbol(booleanSymbol);
        if (result == null) result = caseSymbol(booleanSymbol);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SolverLanguagePackage.INTEGER_SYMBOL:
      {
        IntegerSymbol integerSymbol = (IntegerSymbol)theEObject;
        T result = caseIntegerSymbol(integerSymbol);
        if (result == null) result = caseDataSymbol(integerSymbol);
        if (result == null) result = caseSymbol(integerSymbol);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SolverLanguagePackage.REAL_SYMBOL:
      {
        RealSymbol realSymbol = (RealSymbol)theEObject;
        T result = caseRealSymbol(realSymbol);
        if (result == null) result = caseDataSymbol(realSymbol);
        if (result == null) result = caseSymbol(realSymbol);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SolverLanguagePackage.STRING_SYMBOL:
      {
        StringSymbol stringSymbol = (StringSymbol)theEObject;
        T result = caseStringSymbol(stringSymbol);
        if (result == null) result = caseDataSymbol(stringSymbol);
        if (result == null) result = caseSymbol(stringSymbol);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SolverLanguagePackage.COMPLEX_OBJECT:
      {
        ComplexObject complexObject = (ComplexObject)theEObject;
        T result = caseComplexObject(complexObject);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SolverLanguagePackage.OBJECT:
      {
        org.eclipse.viatra.solver.language.solverLanguage.Object object = (org.eclipse.viatra.solver.language.solverLanguage.Object)theEObject;
        T result = caseObject(object);
        if (result == null) result = caseComplexObject(object);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SolverLanguagePackage.NAMED_OBJECT:
      {
        NamedObject namedObject = (NamedObject)theEObject;
        T result = caseNamedObject(namedObject);
        if (result == null) result = caseObject(namedObject);
        if (result == null) result = caseLiteral(namedObject);
        if (result == null) result = caseComplexObject(namedObject);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SolverLanguagePackage.UNNAMED_OBJECT:
      {
        UnnamedObject unnamedObject = (UnnamedObject)theEObject;
        T result = caseUnnamedObject(unnamedObject);
        if (result == null) result = caseObject(unnamedObject);
        if (result == null) result = caseComplexObject(unnamedObject);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SolverLanguagePackage.DATA_OBJECT:
      {
        DataObject dataObject = (DataObject)theEObject;
        T result = caseDataObject(dataObject);
        if (result == null) result = caseObject(dataObject);
        if (result == null) result = caseLiteral(dataObject);
        if (result == null) result = caseComplexObject(dataObject);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SolverLanguagePackage.BOOLEAN_OBJECT:
      {
        BooleanObject booleanObject = (BooleanObject)theEObject;
        T result = caseBooleanObject(booleanObject);
        if (result == null) result = caseDataObject(booleanObject);
        if (result == null) result = caseObject(booleanObject);
        if (result == null) result = caseLiteral(booleanObject);
        if (result == null) result = caseComplexObject(booleanObject);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SolverLanguagePackage.INT_OBJECT:
      {
        IntObject intObject = (IntObject)theEObject;
        T result = caseIntObject(intObject);
        if (result == null) result = caseDataObject(intObject);
        if (result == null) result = caseObject(intObject);
        if (result == null) result = caseLiteral(intObject);
        if (result == null) result = caseComplexObject(intObject);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SolverLanguagePackage.REAL_OBJECT:
      {
        RealObject realObject = (RealObject)theEObject;
        T result = caseRealObject(realObject);
        if (result == null) result = caseDataObject(realObject);
        if (result == null) result = caseObject(realObject);
        if (result == null) result = caseLiteral(realObject);
        if (result == null) result = caseComplexObject(realObject);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SolverLanguagePackage.STRING_OBJECT:
      {
        StringObject stringObject = (StringObject)theEObject;
        T result = caseStringObject(stringObject);
        if (result == null) result = caseDataObject(stringObject);
        if (result == null) result = caseObject(stringObject);
        if (result == null) result = caseLiteral(stringObject);
        if (result == null) result = caseComplexObject(stringObject);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SolverLanguagePackage.PREDICATE:
      {
        Predicate predicate = (Predicate)theEObject;
        T result = casePredicate(predicate);
        if (result == null) result = caseStatement(predicate);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SolverLanguagePackage.PARAMETER:
      {
        Parameter parameter = (Parameter)theEObject;
        T result = caseParameter(parameter);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SolverLanguagePackage.PATTERN_BODY:
      {
        PatternBody patternBody = (PatternBody)theEObject;
        T result = casePatternBody(patternBody);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SolverLanguagePackage.POLARITY:
      {
        Polarity polarity = (Polarity)theEObject;
        T result = casePolarity(polarity);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SolverLanguagePackage.CONSTRAINT:
      {
        Constraint constraint = (Constraint)theEObject;
        T result = caseConstraint(constraint);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SolverLanguagePackage.CLOSURE_TYPE:
      {
        ClosureType closureType = (ClosureType)theEObject;
        T result = caseClosureType(closureType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SolverLanguagePackage.LITERAL:
      {
        Literal literal = (Literal)theEObject;
        T result = caseLiteral(literal);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SolverLanguagePackage.VARIABLE:
      {
        Variable variable = (Variable)theEObject;
        T result = caseVariable(variable);
        if (result == null) result = caseLiteral(variable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SolverLanguagePackage.ALL_INSTANCES:
      {
        AllInstances allInstances = (AllInstances)theEObject;
        T result = caseAllInstances(allInstances);
        if (result == null) result = caseComplexObject(allInstances);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SolverLanguagePackage.ALL_OBJECTS:
      {
        AllObjects allObjects = (AllObjects)theEObject;
        T result = caseAllObjects(allObjects);
        if (result == null) result = caseComplexObject(allObjects);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SolverLanguagePackage.DEFAULT_INTERPRETATION:
      {
        DefaultInterpretation defaultInterpretation = (DefaultInterpretation)theEObject;
        T result = caseDefaultInterpretation(defaultInterpretation);
        if (result == null) result = caseInterpretation(defaultInterpretation);
        if (result == null) result = caseStatement(defaultInterpretation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SolverLanguagePackage.CD_INTERPRETATION:
      {
        CDInterpretation cdInterpretation = (CDInterpretation)theEObject;
        T result = caseCDInterpretation(cdInterpretation);
        if (result == null) result = caseInterpretation(cdInterpretation);
        if (result == null) result = caseStatement(cdInterpretation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SolverLanguagePackage.CLASS_INTERPRETATION:
      {
        ClassInterpretation classInterpretation = (ClassInterpretation)theEObject;
        T result = caseClassInterpretation(classInterpretation);
        if (result == null) result = caseCDInterpretation(classInterpretation);
        if (result == null) result = caseInterpretation(classInterpretation);
        if (result == null) result = caseStatement(classInterpretation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SolverLanguagePackage.ENUM_INTERPRETATION:
      {
        EnumInterpretation enumInterpretation = (EnumInterpretation)theEObject;
        T result = caseEnumInterpretation(enumInterpretation);
        if (result == null) result = caseCDInterpretation(enumInterpretation);
        if (result == null) result = caseInterpretation(enumInterpretation);
        if (result == null) result = caseStatement(enumInterpretation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SolverLanguagePackage.FIELD_RELATION_INTERPRETATION:
      {
        FieldRelationInterpretation fieldRelationInterpretation = (FieldRelationInterpretation)theEObject;
        T result = caseFieldRelationInterpretation(fieldRelationInterpretation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SolverLanguagePackage.GLOBAL_RELATION_INTERPRETATION:
      {
        GlobalRelationInterpretation globalRelationInterpretation = (GlobalRelationInterpretation)theEObject;
        T result = caseGlobalRelationInterpretation(globalRelationInterpretation);
        if (result == null) result = caseCDInterpretation(globalRelationInterpretation);
        if (result == null) result = caseInterpretation(globalRelationInterpretation);
        if (result == null) result = caseStatement(globalRelationInterpretation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SolverLanguagePackage.MULTIPLICITY_DEFINITION:
      {
        MultiplicityDefinition multiplicityDefinition = (MultiplicityDefinition)theEObject;
        T result = caseMultiplicityDefinition(multiplicityDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SolverLanguagePackage.BOOLEAN_TRUE:
      {
        BooleanTrue booleanTrue = (BooleanTrue)theEObject;
        T result = caseBooleanTrue(booleanTrue);
        if (result == null) result = caseBooleanValue(booleanTrue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SolverLanguagePackage.BOOLEAN_FALSE:
      {
        BooleanFalse booleanFalse = (BooleanFalse)theEObject;
        T result = caseBooleanFalse(booleanFalse);
        if (result == null) result = caseBooleanValue(booleanFalse);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SolverLanguagePackage.TRUE:
      {
        True true_ = (True)theEObject;
        T result = caseTrue(true_);
        if (result == null) result = caseTruthValue(true_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SolverLanguagePackage.FALSE:
      {
        False false_ = (False)theEObject;
        T result = caseFalse(false_);
        if (result == null) result = caseTruthValue(false_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SolverLanguagePackage.UNKNOWN:
      {
        Unknown unknown = (Unknown)theEObject;
        T result = caseUnknown(unknown);
        if (result == null) result = caseTruthValue(unknown);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SolverLanguagePackage.ERROR:
      {
        org.eclipse.viatra.solver.language.solverLanguage.Error error = (org.eclipse.viatra.solver.language.solverLanguage.Error)theEObject;
        T result = caseError(error);
        if (result == null) result = caseTruthValue(error);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SolverLanguagePackage.POSITIVE:
      {
        Positive positive = (Positive)theEObject;
        T result = casePositive(positive);
        if (result == null) result = casePolarity(positive);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SolverLanguagePackage.NEGATIVE:
      {
        Negative negative = (Negative)theEObject;
        T result = caseNegative(negative);
        if (result == null) result = casePolarity(negative);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SolverLanguagePackage.REFLEXIVE_CLOSURE:
      {
        ReflexiveClosure reflexiveClosure = (ReflexiveClosure)theEObject;
        T result = caseReflexiveClosure(reflexiveClosure);
        if (result == null) result = caseClosureType(reflexiveClosure);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SolverLanguagePackage.IRREFLEXIVE_CLOSURE:
      {
        IrreflexiveClosure irreflexiveClosure = (IrreflexiveClosure)theEObject;
        T result = caseIrreflexiveClosure(irreflexiveClosure);
        if (result == null) result = caseClosureType(irreflexiveClosure);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Problem</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Problem</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProblem(Problem object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStatement(Statement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Boolean Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Boolean Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBooleanValue(BooleanValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Truth Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Truth Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTruthValue(TruthValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Interpretation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Interpretation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInterpretation(Interpretation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Basic Interpretation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Basic Interpretation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBasicInterpretation(BasicInterpretation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Symbol</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Symbol</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSymbol(Symbol object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model Symbol</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model Symbol</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModelSymbol(ModelSymbol object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Partiality Symbol</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Partiality Symbol</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePartialitySymbol(PartialitySymbol object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Exist Symbol</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Exist Symbol</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExistSymbol(ExistSymbol object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Equals Symbol</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Equals Symbol</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEqualsSymbol(EqualsSymbol object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Data Symbol</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Data Symbol</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDataSymbol(DataSymbol object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Boolean Symbol</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Boolean Symbol</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBooleanSymbol(BooleanSymbol object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Integer Symbol</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Integer Symbol</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIntegerSymbol(IntegerSymbol object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Real Symbol</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Real Symbol</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRealSymbol(RealSymbol object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>String Symbol</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>String Symbol</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStringSymbol(StringSymbol object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Complex Object</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Complex Object</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComplexObject(ComplexObject object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Object</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Object</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseObject(org.eclipse.viatra.solver.language.solverLanguage.Object object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Named Object</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Named Object</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNamedObject(NamedObject object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Unnamed Object</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Unnamed Object</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUnnamedObject(UnnamedObject object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Data Object</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Data Object</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDataObject(DataObject object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Boolean Object</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Boolean Object</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBooleanObject(BooleanObject object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Int Object</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Int Object</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIntObject(IntObject object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Real Object</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Real Object</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRealObject(RealObject object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>String Object</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>String Object</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStringObject(StringObject object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Predicate</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Predicate</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePredicate(Predicate object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Parameter</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Parameter</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParameter(Parameter object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pattern Body</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pattern Body</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePatternBody(PatternBody object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Polarity</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Polarity</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePolarity(Polarity object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Constraint</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Constraint</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConstraint(Constraint object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Closure Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Closure Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseClosureType(ClosureType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLiteral(Literal object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Variable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Variable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVariable(Variable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>All Instances</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>All Instances</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAllInstances(AllInstances object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>All Objects</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>All Objects</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAllObjects(AllObjects object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Default Interpretation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Default Interpretation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDefaultInterpretation(DefaultInterpretation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>CD Interpretation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>CD Interpretation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCDInterpretation(CDInterpretation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Class Interpretation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Class Interpretation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseClassInterpretation(ClassInterpretation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Enum Interpretation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Enum Interpretation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEnumInterpretation(EnumInterpretation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Field Relation Interpretation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Field Relation Interpretation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFieldRelationInterpretation(FieldRelationInterpretation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Global Relation Interpretation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Global Relation Interpretation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGlobalRelationInterpretation(GlobalRelationInterpretation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Multiplicity Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Multiplicity Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMultiplicityDefinition(MultiplicityDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Boolean True</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Boolean True</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBooleanTrue(BooleanTrue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Boolean False</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Boolean False</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBooleanFalse(BooleanFalse object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>True</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>True</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTrue(True object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>False</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>False</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFalse(False object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Unknown</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Unknown</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUnknown(Unknown object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Error</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Error</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseError(org.eclipse.viatra.solver.language.solverLanguage.Error object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Positive</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Positive</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePositive(Positive object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Negative</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Negative</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNegative(Negative object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Reflexive Closure</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Reflexive Closure</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReflexiveClosure(ReflexiveClosure object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Irreflexive Closure</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Irreflexive Closure</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIrreflexiveClosure(IrreflexiveClosure object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //SolverLanguageSwitch

/**
 * generated by Xtext 2.16.0
 */
package hu.bme.mit.inf.dslreasoner.faulttree.components.cftLanguage.impl;

import hu.bme.mit.inf.dslreasoner.faulttree.components.cftLanguage.CftLanguagePackage;
import hu.bme.mit.inf.dslreasoner.faulttree.components.cftLanguage.EventDeclaration;
import hu.bme.mit.inf.dslreasoner.faulttree.components.cftLanguage.GateDefinition;

import java.util.Collection;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Gate Definition</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link hu.bme.mit.inf.dslreasoner.faulttree.components.cftLanguage.impl.GateDefinitionImpl#getInputEvents <em>Input Events</em>}</li>
 * </ul>
 *
 * @generated
 */
public class GateDefinitionImpl extends EventDefinitionImpl implements GateDefinition
{
  /**
   * The cached value of the '{@link #getInputEvents() <em>Input Events</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInputEvents()
   * @generated
   * @ordered
   */
  protected EList<EventDeclaration> inputEvents;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected GateDefinitionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CftLanguagePackage.Literals.GATE_DEFINITION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<EventDeclaration> getInputEvents()
  {
    if (inputEvents == null)
    {
      inputEvents = new EObjectResolvingEList<EventDeclaration>(EventDeclaration.class, this, CftLanguagePackage.GATE_DEFINITION__INPUT_EVENTS);
    }
    return inputEvents;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CftLanguagePackage.GATE_DEFINITION__INPUT_EVENTS:
        return getInputEvents();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CftLanguagePackage.GATE_DEFINITION__INPUT_EVENTS:
        getInputEvents().clear();
        getInputEvents().addAll((Collection<? extends EventDeclaration>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CftLanguagePackage.GATE_DEFINITION__INPUT_EVENTS:
        getInputEvents().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CftLanguagePackage.GATE_DEFINITION__INPUT_EVENTS:
        return inputEvents != null && !inputEvents.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //GateDefinitionImpl

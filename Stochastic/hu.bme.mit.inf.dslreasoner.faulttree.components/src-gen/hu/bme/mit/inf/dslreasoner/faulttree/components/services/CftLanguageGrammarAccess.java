/*
 * generated by Xtext 2.16.0
 */
package hu.bme.mit.inf.dslreasoner.faulttree.components.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class CftLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	public class CftModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.faulttree.components.CftLanguage.CftModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPackageNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPackageNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cPackageNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cImportsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cImportsImportDeclarationParserRuleCall_3_0 = (RuleCall)cImportsAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cComponentDefinitionsAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cComponentDefinitionsComponentDefinitionParserRuleCall_4_0_0 = (RuleCall)cComponentDefinitionsAssignment_4_0.eContents().get(0);
		private final Assignment cTransformationDefinitionsAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cTransformationDefinitionsTransformationDefinitionParserRuleCall_4_1_0 = (RuleCall)cTransformationDefinitionsAssignment_4_1.eContents().get(0);
		
		//CftModel:
		//	"package" packageName=QualifiedName ";"?
		//	imports+=ImportDeclaration* (componentDefinitions+=ComponentDefinition |
		//	transformationDefinitions+=TransformationDefinition)*;
		@Override public ParserRule getRule() { return rule; }
		
		//"package" packageName=QualifiedName ";"? imports+=ImportDeclaration* (componentDefinitions+=ComponentDefinition |
		//transformationDefinitions+=TransformationDefinition)*
		public Group getGroup() { return cGroup; }
		
		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//packageName=QualifiedName
		public Assignment getPackageNameAssignment_1() { return cPackageNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getPackageNameQualifiedNameParserRuleCall_1_0() { return cPackageNameQualifiedNameParserRuleCall_1_0; }
		
		//";"?
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
		
		//imports+=ImportDeclaration*
		public Assignment getImportsAssignment_3() { return cImportsAssignment_3; }
		
		//ImportDeclaration
		public RuleCall getImportsImportDeclarationParserRuleCall_3_0() { return cImportsImportDeclarationParserRuleCall_3_0; }
		
		//(componentDefinitions+=ComponentDefinition | transformationDefinitions+=TransformationDefinition)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//componentDefinitions+=ComponentDefinition
		public Assignment getComponentDefinitionsAssignment_4_0() { return cComponentDefinitionsAssignment_4_0; }
		
		//ComponentDefinition
		public RuleCall getComponentDefinitionsComponentDefinitionParserRuleCall_4_0_0() { return cComponentDefinitionsComponentDefinitionParserRuleCall_4_0_0; }
		
		//transformationDefinitions+=TransformationDefinition
		public Assignment getTransformationDefinitionsAssignment_4_1() { return cTransformationDefinitionsAssignment_4_1; }
		
		//TransformationDefinition
		public RuleCall getTransformationDefinitionsTransformationDefinitionParserRuleCall_4_1_0() { return cTransformationDefinitionsTransformationDefinitionParserRuleCall_4_1_0; }
	}
	public class ImportDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.faulttree.components.CftLanguage.ImportDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ImportDeclaration:
		//	"import" importedNamespace=QualifiedNameWithWildcard ";"?;
		@Override public ParserRule getRule() { return rule; }
		
		//"import" importedNamespace=QualifiedNameWithWildcard ";"?
		public Group getGroup() { return cGroup; }
		
		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }
		
		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }
		
		//";"?
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class ComponentDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.faulttree.components.CftLanguage.ComponentDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCftKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cInKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cInputEventsAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cInputEventsInputEventParserRuleCall_3_0_1_0 = (RuleCall)cInputEventsAssignment_3_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_0_2 = (Keyword)cGroup_3_0.eContents().get(2);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cOutKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cOutputEventsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final CrossReference cOutputEventsEventDeclarationCrossReference_3_1_1_0 = (CrossReference)cOutputEventsAssignment_3_1_1.eContents().get(0);
		private final RuleCall cOutputEventsEventDeclarationIDTerminalRuleCall_3_1_1_0_1 = (RuleCall)cOutputEventsEventDeclarationCrossReference_3_1_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3_1_2 = (Keyword)cGroup_3_1.eContents().get(2);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cEventDefinitionsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cEventDefinitionsEventDefinitionParserRuleCall_4_0_0 = (RuleCall)cEventDefinitionsAssignment_4_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ComponentDefinition:
		//	"cft" name=ID "{" (("in" inputEvents+=InputEvent* ";")? & ("out" outputEvents+=[EventDeclaration]* ";")?)
		//	(eventDefinitions+=EventDefinition ";")*
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//"cft" name=ID "{" (("in" inputEvents+=InputEvent* ";")? & ("out" outputEvents+=[EventDeclaration]* ";")?)
		//(eventDefinitions+=EventDefinition ";")* "}"
		public Group getGroup() { return cGroup; }
		
		//"cft"
		public Keyword getCftKeyword_0() { return cCftKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//("in" inputEvents+=InputEvent* ";")? & ("out" outputEvents+=[EventDeclaration]* ";")?
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }
		
		//("in" inputEvents+=InputEvent* ";")?
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//"in"
		public Keyword getInKeyword_3_0_0() { return cInKeyword_3_0_0; }
		
		//inputEvents+=InputEvent*
		public Assignment getInputEventsAssignment_3_0_1() { return cInputEventsAssignment_3_0_1; }
		
		//InputEvent
		public RuleCall getInputEventsInputEventParserRuleCall_3_0_1_0() { return cInputEventsInputEventParserRuleCall_3_0_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3_0_2() { return cSemicolonKeyword_3_0_2; }
		
		//("out" outputEvents+=[EventDeclaration]* ";")?
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//"out"
		public Keyword getOutKeyword_3_1_0() { return cOutKeyword_3_1_0; }
		
		//outputEvents+=[EventDeclaration]*
		public Assignment getOutputEventsAssignment_3_1_1() { return cOutputEventsAssignment_3_1_1; }
		
		//[EventDeclaration]
		public CrossReference getOutputEventsEventDeclarationCrossReference_3_1_1_0() { return cOutputEventsEventDeclarationCrossReference_3_1_1_0; }
		
		//ID
		public RuleCall getOutputEventsEventDeclarationIDTerminalRuleCall_3_1_1_0_1() { return cOutputEventsEventDeclarationIDTerminalRuleCall_3_1_1_0_1; }
		
		//";"
		public Keyword getSemicolonKeyword_3_1_2() { return cSemicolonKeyword_3_1_2; }
		
		//(eventDefinitions+=EventDefinition ";")*
		public Group getGroup_4() { return cGroup_4; }
		
		//eventDefinitions+=EventDefinition
		public Assignment getEventDefinitionsAssignment_4_0() { return cEventDefinitionsAssignment_4_0; }
		
		//EventDefinition
		public RuleCall getEventDefinitionsEventDefinitionParserRuleCall_4_0_0() { return cEventDefinitionsEventDefinitionParserRuleCall_4_0_0; }
		
		//";"
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class EventDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.faulttree.components.CftLanguage.EventDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInputEventParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEventDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EventDeclaration:
		//	InputEvent | EventDefinition;
		@Override public ParserRule getRule() { return rule; }
		
		//InputEvent | EventDefinition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//InputEvent
		public RuleCall getInputEventParserRuleCall_0() { return cInputEventParserRuleCall_0; }
		
		//EventDefinition
		public RuleCall getEventDefinitionParserRuleCall_1() { return cEventDefinitionParserRuleCall_1; }
	}
	public class InputEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.faulttree.components.CftLanguage.InputEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cMultipleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cMultipleLeftSquareBracketRightSquareBracketKeyword_1_0 = (Keyword)cMultipleAssignment_1.eContents().get(0);
		
		//InputEvent:
		//	name=ID multiple?="[]"?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID multiple?="[]"?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//multiple?="[]"?
		public Assignment getMultipleAssignment_1() { return cMultipleAssignment_1; }
		
		//"[]"
		public Keyword getMultipleLeftSquareBracketRightSquareBracketKeyword_1_0() { return cMultipleLeftSquareBracketRightSquareBracketKeyword_1_0; }
	}
	public class EventDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.faulttree.components.CftLanguage.EventDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBasicEventDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGateDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EventDefinition:
		//	BasicEventDefinition | GateDefinition;
		@Override public ParserRule getRule() { return rule; }
		
		//BasicEventDefinition | GateDefinition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BasicEventDefinition
		public RuleCall getBasicEventDefinitionParserRuleCall_0() { return cBasicEventDefinitionParserRuleCall_0; }
		
		//GateDefinition
		public RuleCall getGateDefinitionParserRuleCall_1() { return cGateDefinitionParserRuleCall_1; }
	}
	public class BasicEventDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.faulttree.components.CftLanguage.BasicEventDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLambdaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRateDOULBETerminalRuleCall_3_0 = (RuleCall)cRateAssignment_3.eContents().get(0);
		
		//BasicEventDefinition:
		//	name=ID "lambda" "=" rate=DOULBE;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID "lambda" "=" rate=DOULBE
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//"lambda"
		public Keyword getLambdaKeyword_1() { return cLambdaKeyword_1; }
		
		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//rate=DOULBE
		public Assignment getRateAssignment_3() { return cRateAssignment_3; }
		
		//DOULBE
		public RuleCall getRateDOULBETerminalRuleCall_3_0() { return cRateDOULBETerminalRuleCall_3_0; }
	}
	public class GateDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.faulttree.components.CftLanguage.GateDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAndGateParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOrGateParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//GateDefinition:
		//	AndGate | OrGate;
		@Override public ParserRule getRule() { return rule; }
		
		//AndGate | OrGate
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AndGate
		public RuleCall getAndGateParserRuleCall_0() { return cAndGateParserRuleCall_0; }
		
		//OrGate
		public RuleCall getOrGateParserRuleCall_1() { return cOrGateParserRuleCall_1; }
	}
	public class AndGateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.faulttree.components.CftLanguage.AndGate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cAndKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInputEventsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cInputEventsEventDeclarationCrossReference_2_0 = (CrossReference)cInputEventsAssignment_2.eContents().get(0);
		private final RuleCall cInputEventsEventDeclarationIDTerminalRuleCall_2_0_1 = (RuleCall)cInputEventsEventDeclarationCrossReference_2_0.eContents().get(1);
		
		//AndGate:
		//	name=ID "and" inputEvents+=[EventDeclaration]*;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID "and" inputEvents+=[EventDeclaration]*
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//"and"
		public Keyword getAndKeyword_1() { return cAndKeyword_1; }
		
		//inputEvents+=[EventDeclaration]*
		public Assignment getInputEventsAssignment_2() { return cInputEventsAssignment_2; }
		
		//[EventDeclaration]
		public CrossReference getInputEventsEventDeclarationCrossReference_2_0() { return cInputEventsEventDeclarationCrossReference_2_0; }
		
		//ID
		public RuleCall getInputEventsEventDeclarationIDTerminalRuleCall_2_0_1() { return cInputEventsEventDeclarationIDTerminalRuleCall_2_0_1; }
	}
	public class OrGateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.faulttree.components.CftLanguage.OrGate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cOrKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInputEventsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cInputEventsEventDeclarationCrossReference_2_0 = (CrossReference)cInputEventsAssignment_2.eContents().get(0);
		private final RuleCall cInputEventsEventDeclarationIDTerminalRuleCall_2_0_1 = (RuleCall)cInputEventsEventDeclarationCrossReference_2_0.eContents().get(1);
		
		//OrGate:
		//	name=ID "or" inputEvents+=[EventDeclaration]*;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID "or" inputEvents+=[EventDeclaration]*
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//"or"
		public Keyword getOrKeyword_1() { return cOrKeyword_1; }
		
		//inputEvents+=[EventDeclaration]*
		public Assignment getInputEventsAssignment_2() { return cInputEventsAssignment_2; }
		
		//[EventDeclaration]
		public CrossReference getInputEventsEventDeclarationCrossReference_2_0() { return cInputEventsEventDeclarationCrossReference_2_0; }
		
		//ID
		public RuleCall getInputEventsEventDeclarationIDTerminalRuleCall_2_0_1() { return cInputEventsEventDeclarationIDTerminalRuleCall_2_0_1; }
	}
	public class TransformationDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.faulttree.components.CftLanguage.TransformationDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransformationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMappingDefinitionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMappingDefinitionsMappingDefinitionParserRuleCall_3_0 = (RuleCall)cMappingDefinitionsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TransformationDefinition:
		//	"transformation" name=ID "{"
		//	mappingDefinitions+=MappingDefinition*
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//"transformation" name=ID "{" mappingDefinitions+=MappingDefinition* "}"
		public Group getGroup() { return cGroup; }
		
		//"transformation"
		public Keyword getTransformationKeyword_0() { return cTransformationKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//mappingDefinitions+=MappingDefinition*
		public Assignment getMappingDefinitionsAssignment_3() { return cMappingDefinitionsAssignment_3; }
		
		//MappingDefinition
		public RuleCall getMappingDefinitionsMappingDefinitionParserRuleCall_3_0() { return cMappingDefinitionsMappingDefinitionParserRuleCall_3_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class MappingDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.faulttree.components.CftLanguage.MappingDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTopLevelAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cTopLevelToplevelKeyword_0_0 = (Keyword)cTopLevelAssignment_0.eContents().get(0);
		private final Keyword cMappingKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPatternAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cPatternPatternCrossReference_2_0 = (CrossReference)cPatternAssignment_2.eContents().get(0);
		private final RuleCall cPatternPatternQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cPatternPatternCrossReference_2_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParametersMappingParameterParserRuleCall_4_0 = (RuleCall)cParametersAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cParametersAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cParametersMappingParameterParserRuleCall_5_1_0 = (RuleCall)cParametersAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cComponentInstanceAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cComponentInstanceComponentInstanceParserRuleCall_7_0 = (RuleCall)cComponentInstanceAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cLeftCurlyBracketKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Group cGroup_8_1 = (Group)cGroup_8.eContents().get(1);
		private final Alternatives cAlternatives_8_1_0 = (Alternatives)cGroup_8_1.eContents().get(0);
		private final Assignment cLookupDefinitionsAssignment_8_1_0_0 = (Assignment)cAlternatives_8_1_0.eContents().get(0);
		private final RuleCall cLookupDefinitionsLookupDefinitionParserRuleCall_8_1_0_0_0 = (RuleCall)cLookupDefinitionsAssignment_8_1_0_0.eContents().get(0);
		private final Assignment cAssignmentsAssignment_8_1_0_1 = (Assignment)cAlternatives_8_1_0.eContents().get(1);
		private final RuleCall cAssignmentsAssignmentParserRuleCall_8_1_0_1_0 = (RuleCall)cAssignmentsAssignment_8_1_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_8_1_1 = (Keyword)cGroup_8_1.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		
		//MappingDefinition:
		//	topLevel?="toplevel"? "mapping" pattern=[vql::Pattern|QualifiedName]
		//	"(" parameters+=MappingParameter ("," parameters+=MappingParameter)* ")"
		//	componentInstance=ComponentInstance? ("{" ((lookupDefinitions+=LookupDefinition | assignments+=Assignment) ";")*
		//	"}")?;
		@Override public ParserRule getRule() { return rule; }
		
		//topLevel?="toplevel"? "mapping" pattern=[vql::Pattern|QualifiedName] "(" parameters+=MappingParameter (","
		//parameters+=MappingParameter)* ")" componentInstance=ComponentInstance? ("{" ((lookupDefinitions+=LookupDefinition |
		//assignments+=Assignment) ";")* "}")?
		public Group getGroup() { return cGroup; }
		
		//topLevel?="toplevel"?
		public Assignment getTopLevelAssignment_0() { return cTopLevelAssignment_0; }
		
		//"toplevel"
		public Keyword getTopLevelToplevelKeyword_0_0() { return cTopLevelToplevelKeyword_0_0; }
		
		//"mapping"
		public Keyword getMappingKeyword_1() { return cMappingKeyword_1; }
		
		//pattern=[vql::Pattern|QualifiedName]
		public Assignment getPatternAssignment_2() { return cPatternAssignment_2; }
		
		//[vql::Pattern|QualifiedName]
		public CrossReference getPatternPatternCrossReference_2_0() { return cPatternPatternCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getPatternPatternQualifiedNameParserRuleCall_2_0_1() { return cPatternPatternQualifiedNameParserRuleCall_2_0_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//parameters+=MappingParameter
		public Assignment getParametersAssignment_4() { return cParametersAssignment_4; }
		
		//MappingParameter
		public RuleCall getParametersMappingParameterParserRuleCall_4_0() { return cParametersMappingParameterParserRuleCall_4_0; }
		
		//("," parameters+=MappingParameter)*
		public Group getGroup_5() { return cGroup_5; }
		
		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//parameters+=MappingParameter
		public Assignment getParametersAssignment_5_1() { return cParametersAssignment_5_1; }
		
		//MappingParameter
		public RuleCall getParametersMappingParameterParserRuleCall_5_1_0() { return cParametersMappingParameterParserRuleCall_5_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//componentInstance=ComponentInstance?
		public Assignment getComponentInstanceAssignment_7() { return cComponentInstanceAssignment_7; }
		
		//ComponentInstance
		public RuleCall getComponentInstanceComponentInstanceParserRuleCall_7_0() { return cComponentInstanceComponentInstanceParserRuleCall_7_0; }
		
		//("{" ((lookupDefinitions+=LookupDefinition | assignments+=Assignment) ";")* "}")?
		public Group getGroup_8() { return cGroup_8; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_8_0() { return cLeftCurlyBracketKeyword_8_0; }
		
		//((lookupDefinitions+=LookupDefinition | assignments+=Assignment) ";")*
		public Group getGroup_8_1() { return cGroup_8_1; }
		
		//lookupDefinitions+=LookupDefinition | assignments+=Assignment
		public Alternatives getAlternatives_8_1_0() { return cAlternatives_8_1_0; }
		
		//lookupDefinitions+=LookupDefinition
		public Assignment getLookupDefinitionsAssignment_8_1_0_0() { return cLookupDefinitionsAssignment_8_1_0_0; }
		
		//LookupDefinition
		public RuleCall getLookupDefinitionsLookupDefinitionParserRuleCall_8_1_0_0_0() { return cLookupDefinitionsLookupDefinitionParserRuleCall_8_1_0_0_0; }
		
		//assignments+=Assignment
		public Assignment getAssignmentsAssignment_8_1_0_1() { return cAssignmentsAssignment_8_1_0_1; }
		
		//Assignment
		public RuleCall getAssignmentsAssignmentParserRuleCall_8_1_0_1_0() { return cAssignmentsAssignmentParserRuleCall_8_1_0_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_8_1_1() { return cSemicolonKeyword_8_1_1; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_8_2() { return cRightCurlyBracketKeyword_8_2; }
	}
	public class MappingParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.faulttree.components.CftLanguage.MappingParameter");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//MappingParameter:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class LookupDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.faulttree.components.CftLanguage.LookupDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLookupKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMappingAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cMappingMappingDefinitionCrossReference_1_0 = (CrossReference)cMappingAssignment_1.eContents().get(0);
		private final RuleCall cMappingMappingDefinitionIDTerminalRuleCall_1_0_1 = (RuleCall)cMappingMappingDefinitionCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArgumentsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cArgumentsMappingParameterCrossReference_3_0 = (CrossReference)cArgumentsAssignment_3.eContents().get(0);
		private final RuleCall cArgumentsMappingParameterIDTerminalRuleCall_3_0_1 = (RuleCall)cArgumentsMappingParameterCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cArgumentsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cArgumentsMappingParameterCrossReference_4_1_0 = (CrossReference)cArgumentsAssignment_4_1.eContents().get(0);
		private final RuleCall cArgumentsMappingParameterIDTerminalRuleCall_4_1_0_1 = (RuleCall)cArgumentsMappingParameterCrossReference_4_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cAsKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cNameAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cNameIDTerminalRuleCall_7_0 = (RuleCall)cNameAssignment_7.eContents().get(0);
		
		//LookupDefinition:
		//	"lookup" mapping=[MappingDefinition]
		//	"(" arguments+=[MappingParameter] ("," arguments+=[MappingParameter])* ")"
		//	"as" name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//"lookup" mapping=[MappingDefinition] "(" arguments+=[MappingParameter] ("," arguments+=[MappingParameter])* ")" "as"
		//name=ID
		public Group getGroup() { return cGroup; }
		
		//"lookup"
		public Keyword getLookupKeyword_0() { return cLookupKeyword_0; }
		
		//mapping=[MappingDefinition]
		public Assignment getMappingAssignment_1() { return cMappingAssignment_1; }
		
		//[MappingDefinition]
		public CrossReference getMappingMappingDefinitionCrossReference_1_0() { return cMappingMappingDefinitionCrossReference_1_0; }
		
		//ID
		public RuleCall getMappingMappingDefinitionIDTerminalRuleCall_1_0_1() { return cMappingMappingDefinitionIDTerminalRuleCall_1_0_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//arguments+=[MappingParameter]
		public Assignment getArgumentsAssignment_3() { return cArgumentsAssignment_3; }
		
		//[MappingParameter]
		public CrossReference getArgumentsMappingParameterCrossReference_3_0() { return cArgumentsMappingParameterCrossReference_3_0; }
		
		//ID
		public RuleCall getArgumentsMappingParameterIDTerminalRuleCall_3_0_1() { return cArgumentsMappingParameterIDTerminalRuleCall_3_0_1; }
		
		//("," arguments+=[MappingParameter])*
		public Group getGroup_4() { return cGroup_4; }
		
		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//arguments+=[MappingParameter]
		public Assignment getArgumentsAssignment_4_1() { return cArgumentsAssignment_4_1; }
		
		//[MappingParameter]
		public CrossReference getArgumentsMappingParameterCrossReference_4_1_0() { return cArgumentsMappingParameterCrossReference_4_1_0; }
		
		//ID
		public RuleCall getArgumentsMappingParameterIDTerminalRuleCall_4_1_0_1() { return cArgumentsMappingParameterIDTerminalRuleCall_4_1_0_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//"as"
		public Keyword getAsKeyword_6() { return cAsKeyword_6; }
		
		//name=ID
		public Assignment getNameAssignment_7() { return cNameAssignment_7; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_7_0() { return cNameIDTerminalRuleCall_7_0; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.faulttree.components.CftLanguage.Variable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cComponentInstanceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLookupDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Variable:
		//	ComponentInstance | LookupDefinition;
		@Override public ParserRule getRule() { return rule; }
		
		//ComponentInstance | LookupDefinition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ComponentInstance
		public RuleCall getComponentInstanceParserRuleCall_0() { return cComponentInstanceParserRuleCall_0; }
		
		//LookupDefinition
		public RuleCall getLookupDefinitionParserRuleCall_1() { return cLookupDefinitionParserRuleCall_1; }
	}
	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.faulttree.components.CftLanguage.Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInputAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cInputEventReferenceParserRuleCall_0_0 = (RuleCall)cInputAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cMultipleAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cMultiplePlusSignEqualsSignKeyword_1_0_0 = (Keyword)cMultipleAssignment_1_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cOutputAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOutputEventReferenceParserRuleCall_2_0 = (RuleCall)cOutputAssignment_2.eContents().get(0);
		
		//Assignment:
		//	input=EventReference (multiple?="+=" | ":=") output=EventReference;
		@Override public ParserRule getRule() { return rule; }
		
		//input=EventReference (multiple?="+=" | ":=") output=EventReference
		public Group getGroup() { return cGroup; }
		
		//input=EventReference
		public Assignment getInputAssignment_0() { return cInputAssignment_0; }
		
		//EventReference
		public RuleCall getInputEventReferenceParserRuleCall_0_0() { return cInputEventReferenceParserRuleCall_0_0; }
		
		//multiple?="+=" | ":="
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//multiple?="+="
		public Assignment getMultipleAssignment_1_0() { return cMultipleAssignment_1_0; }
		
		//"+="
		public Keyword getMultiplePlusSignEqualsSignKeyword_1_0_0() { return cMultiplePlusSignEqualsSignKeyword_1_0_0; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_1_1() { return cColonEqualsSignKeyword_1_1; }
		
		//output=EventReference
		public Assignment getOutputAssignment_2() { return cOutputAssignment_2; }
		
		//EventReference
		public RuleCall getOutputEventReferenceParserRuleCall_2_0() { return cOutputEventReferenceParserRuleCall_2_0; }
	}
	public class EventReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.faulttree.components.CftLanguage.EventReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cComponentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cComponentVariableCrossReference_0_0 = (CrossReference)cComponentAssignment_0.eContents().get(0);
		private final RuleCall cComponentVariableIDTerminalRuleCall_0_0_1 = (RuleCall)cComponentVariableCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEventAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cEventEventDeclarationCrossReference_2_0 = (CrossReference)cEventAssignment_2.eContents().get(0);
		private final RuleCall cEventEventDeclarationIDTerminalRuleCall_2_0_1 = (RuleCall)cEventEventDeclarationCrossReference_2_0.eContents().get(1);
		
		//EventReference:
		//	component=[Variable] "." event=[EventDeclaration];
		@Override public ParserRule getRule() { return rule; }
		
		//component=[Variable] "." event=[EventDeclaration]
		public Group getGroup() { return cGroup; }
		
		//component=[Variable]
		public Assignment getComponentAssignment_0() { return cComponentAssignment_0; }
		
		//[Variable]
		public CrossReference getComponentVariableCrossReference_0_0() { return cComponentVariableCrossReference_0_0; }
		
		//ID
		public RuleCall getComponentVariableIDTerminalRuleCall_0_0_1() { return cComponentVariableIDTerminalRuleCall_0_0_1; }
		
		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//event=[EventDeclaration]
		public Assignment getEventAssignment_2() { return cEventAssignment_2; }
		
		//[EventDeclaration]
		public CrossReference getEventEventDeclarationCrossReference_2_0() { return cEventEventDeclarationCrossReference_2_0; }
		
		//ID
		public RuleCall getEventEventDeclarationIDTerminalRuleCall_2_0_1() { return cEventEventDeclarationIDTerminalRuleCall_2_0_1; }
	}
	public class ComponentInstanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.faulttree.components.CftLanguage.ComponentInstance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cComponentTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cComponentTypeComponentDefinitionCrossReference_1_0 = (CrossReference)cComponentTypeAssignment_1.eContents().get(0);
		private final RuleCall cComponentTypeComponentDefinitionQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cComponentTypeComponentDefinitionCrossReference_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//ComponentInstance:
		//	"=>" componentType=[ComponentDefinition|QualifiedName] name=ID?;
		@Override public ParserRule getRule() { return rule; }
		
		//"=>" componentType=[ComponentDefinition|QualifiedName] name=ID?
		public Group getGroup() { return cGroup; }
		
		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_0() { return cEqualsSignGreaterThanSignKeyword_0; }
		
		//componentType=[ComponentDefinition|QualifiedName]
		public Assignment getComponentTypeAssignment_1() { return cComponentTypeAssignment_1; }
		
		//[ComponentDefinition|QualifiedName]
		public CrossReference getComponentTypeComponentDefinitionCrossReference_1_0() { return cComponentTypeComponentDefinitionCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getComponentTypeComponentDefinitionQualifiedNameParserRuleCall_1_0_1() { return cComponentTypeComponentDefinitionQualifiedNameParserRuleCall_1_0_1; }
		
		//name=ID?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.faulttree.components.CftLanguage.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ("." ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.faulttree.components.CftLanguage.QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName ("." "*")?;
		@Override public ParserRule getRule() { return rule; }
		
		//QualifiedName ("." "*")?
		public Group getGroup() { return cGroup; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }
		
		//("." "*")?
		public Group getGroup_1() { return cGroup_1; }
		
		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//"*"
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
	}
	
	
	private final CftModelElements pCftModel;
	private final ImportDeclarationElements pImportDeclaration;
	private final ComponentDefinitionElements pComponentDefinition;
	private final EventDeclarationElements pEventDeclaration;
	private final InputEventElements pInputEvent;
	private final EventDefinitionElements pEventDefinition;
	private final BasicEventDefinitionElements pBasicEventDefinition;
	private final GateDefinitionElements pGateDefinition;
	private final AndGateElements pAndGate;
	private final OrGateElements pOrGate;
	private final TransformationDefinitionElements pTransformationDefinition;
	private final MappingDefinitionElements pMappingDefinition;
	private final MappingParameterElements pMappingParameter;
	private final LookupDefinitionElements pLookupDefinition;
	private final VariableElements pVariable;
	private final AssignmentElements pAssignment;
	private final EventReferenceElements pEventReference;
	private final ComponentInstanceElements pComponentInstance;
	private final QualifiedNameElements pQualifiedName;
	private final QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private final TerminalRule tDOULBE;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public CftLanguageGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pCftModel = new CftModelElements();
		this.pImportDeclaration = new ImportDeclarationElements();
		this.pComponentDefinition = new ComponentDefinitionElements();
		this.pEventDeclaration = new EventDeclarationElements();
		this.pInputEvent = new InputEventElements();
		this.pEventDefinition = new EventDefinitionElements();
		this.pBasicEventDefinition = new BasicEventDefinitionElements();
		this.pGateDefinition = new GateDefinitionElements();
		this.pAndGate = new AndGateElements();
		this.pOrGate = new OrGateElements();
		this.pTransformationDefinition = new TransformationDefinitionElements();
		this.pMappingDefinition = new MappingDefinitionElements();
		this.pMappingParameter = new MappingParameterElements();
		this.pLookupDefinition = new LookupDefinitionElements();
		this.pVariable = new VariableElements();
		this.pAssignment = new AssignmentElements();
		this.pEventReference = new EventReferenceElements();
		this.pComponentInstance = new ComponentInstanceElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements();
		this.tDOULBE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.faulttree.components.CftLanguage.DOULBE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("hu.bme.mit.inf.dslreasoner.faulttree.components.CftLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//CftModel:
	//	"package" packageName=QualifiedName ";"?
	//	imports+=ImportDeclaration* (componentDefinitions+=ComponentDefinition |
	//	transformationDefinitions+=TransformationDefinition)*;
	public CftModelElements getCftModelAccess() {
		return pCftModel;
	}
	
	public ParserRule getCftModelRule() {
		return getCftModelAccess().getRule();
	}
	
	//ImportDeclaration:
	//	"import" importedNamespace=QualifiedNameWithWildcard ";"?;
	public ImportDeclarationElements getImportDeclarationAccess() {
		return pImportDeclaration;
	}
	
	public ParserRule getImportDeclarationRule() {
		return getImportDeclarationAccess().getRule();
	}
	
	//ComponentDefinition:
	//	"cft" name=ID "{" (("in" inputEvents+=InputEvent* ";")? & ("out" outputEvents+=[EventDeclaration]* ";")?)
	//	(eventDefinitions+=EventDefinition ";")*
	//	"}";
	public ComponentDefinitionElements getComponentDefinitionAccess() {
		return pComponentDefinition;
	}
	
	public ParserRule getComponentDefinitionRule() {
		return getComponentDefinitionAccess().getRule();
	}
	
	//EventDeclaration:
	//	InputEvent | EventDefinition;
	public EventDeclarationElements getEventDeclarationAccess() {
		return pEventDeclaration;
	}
	
	public ParserRule getEventDeclarationRule() {
		return getEventDeclarationAccess().getRule();
	}
	
	//InputEvent:
	//	name=ID multiple?="[]"?;
	public InputEventElements getInputEventAccess() {
		return pInputEvent;
	}
	
	public ParserRule getInputEventRule() {
		return getInputEventAccess().getRule();
	}
	
	//EventDefinition:
	//	BasicEventDefinition | GateDefinition;
	public EventDefinitionElements getEventDefinitionAccess() {
		return pEventDefinition;
	}
	
	public ParserRule getEventDefinitionRule() {
		return getEventDefinitionAccess().getRule();
	}
	
	//BasicEventDefinition:
	//	name=ID "lambda" "=" rate=DOULBE;
	public BasicEventDefinitionElements getBasicEventDefinitionAccess() {
		return pBasicEventDefinition;
	}
	
	public ParserRule getBasicEventDefinitionRule() {
		return getBasicEventDefinitionAccess().getRule();
	}
	
	//GateDefinition:
	//	AndGate | OrGate;
	public GateDefinitionElements getGateDefinitionAccess() {
		return pGateDefinition;
	}
	
	public ParserRule getGateDefinitionRule() {
		return getGateDefinitionAccess().getRule();
	}
	
	//AndGate:
	//	name=ID "and" inputEvents+=[EventDeclaration]*;
	public AndGateElements getAndGateAccess() {
		return pAndGate;
	}
	
	public ParserRule getAndGateRule() {
		return getAndGateAccess().getRule();
	}
	
	//OrGate:
	//	name=ID "or" inputEvents+=[EventDeclaration]*;
	public OrGateElements getOrGateAccess() {
		return pOrGate;
	}
	
	public ParserRule getOrGateRule() {
		return getOrGateAccess().getRule();
	}
	
	//TransformationDefinition:
	//	"transformation" name=ID "{"
	//	mappingDefinitions+=MappingDefinition*
	//	"}";
	public TransformationDefinitionElements getTransformationDefinitionAccess() {
		return pTransformationDefinition;
	}
	
	public ParserRule getTransformationDefinitionRule() {
		return getTransformationDefinitionAccess().getRule();
	}
	
	//MappingDefinition:
	//	topLevel?="toplevel"? "mapping" pattern=[vql::Pattern|QualifiedName]
	//	"(" parameters+=MappingParameter ("," parameters+=MappingParameter)* ")"
	//	componentInstance=ComponentInstance? ("{" ((lookupDefinitions+=LookupDefinition | assignments+=Assignment) ";")*
	//	"}")?;
	public MappingDefinitionElements getMappingDefinitionAccess() {
		return pMappingDefinition;
	}
	
	public ParserRule getMappingDefinitionRule() {
		return getMappingDefinitionAccess().getRule();
	}
	
	//MappingParameter:
	//	name=ID;
	public MappingParameterElements getMappingParameterAccess() {
		return pMappingParameter;
	}
	
	public ParserRule getMappingParameterRule() {
		return getMappingParameterAccess().getRule();
	}
	
	//LookupDefinition:
	//	"lookup" mapping=[MappingDefinition]
	//	"(" arguments+=[MappingParameter] ("," arguments+=[MappingParameter])* ")"
	//	"as" name=ID;
	public LookupDefinitionElements getLookupDefinitionAccess() {
		return pLookupDefinition;
	}
	
	public ParserRule getLookupDefinitionRule() {
		return getLookupDefinitionAccess().getRule();
	}
	
	//Variable:
	//	ComponentInstance | LookupDefinition;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//Assignment:
	//	input=EventReference (multiple?="+=" | ":=") output=EventReference;
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	//EventReference:
	//	component=[Variable] "." event=[EventDeclaration];
	public EventReferenceElements getEventReferenceAccess() {
		return pEventReference;
	}
	
	public ParserRule getEventReferenceRule() {
		return getEventReferenceAccess().getRule();
	}
	
	//ComponentInstance:
	//	"=>" componentType=[ComponentDefinition|QualifiedName] name=ID?;
	public ComponentInstanceElements getComponentInstanceAccess() {
		return pComponentInstance;
	}
	
	public ParserRule getComponentInstanceRule() {
		return getComponentInstanceAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	QualifiedName ("." "*")?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return pQualifiedNameWithWildcard;
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//terminal DOULBE returns ecore::EDouble:
	//	'0'..'9'+ ("." '0'..'9'+ | ("." '0'..'9'+)? ("e" | "E") ("+" | "-")? '0'..'9'+);
	public TerminalRule getDOULBERule() {
		return tDOULBE;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}

/**
 * generated by Xtext 2.16.0
 */
package hu.bme.mit.inf.dslreasoner.faulttree.components.cftLanguage.impl;

import hu.bme.mit.inf.dslreasoner.faulttree.components.cftLanguage.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class CftLanguageFactoryImpl extends EFactoryImpl implements CftLanguageFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static CftLanguageFactory init()
  {
    try
    {
      CftLanguageFactory theCftLanguageFactory = (CftLanguageFactory)EPackage.Registry.INSTANCE.getEFactory(CftLanguagePackage.eNS_URI);
      if (theCftLanguageFactory != null)
      {
        return theCftLanguageFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new CftLanguageFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CftLanguageFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case CftLanguagePackage.CFT_MODEL: return createCftModel();
      case CftLanguagePackage.IMPORT_DECLARATION: return createImportDeclaration();
      case CftLanguagePackage.COMPONENT_DEFINITION: return createComponentDefinition();
      case CftLanguagePackage.EVENT_DECLARATION: return createEventDeclaration();
      case CftLanguagePackage.INPUT_EVENT: return createInputEvent();
      case CftLanguagePackage.EVENT_DEFINITION: return createEventDefinition();
      case CftLanguagePackage.BASIC_EVENT_DEFINITION: return createBasicEventDefinition();
      case CftLanguagePackage.GATE_DEFINITION: return createGateDefinition();
      case CftLanguagePackage.AND_GATE: return createAndGate();
      case CftLanguagePackage.OR_GATE: return createOrGate();
      case CftLanguagePackage.TRANSFORMATION_DEFINITION: return createTransformationDefinition();
      case CftLanguagePackage.MAPPING_DEFINITION: return createMappingDefinition();
      case CftLanguagePackage.MAPPING_PARAMETER: return createMappingParameter();
      case CftLanguagePackage.LOOKUP_DEFINITION: return createLookupDefinition();
      case CftLanguagePackage.VARIABLE: return createVariable();
      case CftLanguagePackage.ASSIGNMENT: return createAssignment();
      case CftLanguagePackage.EVENT_REFERENCE: return createEventReference();
      case CftLanguagePackage.COMPONENT_INSTANCE: return createComponentInstance();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CftModel createCftModel()
  {
    CftModelImpl cftModel = new CftModelImpl();
    return cftModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ImportDeclaration createImportDeclaration()
  {
    ImportDeclarationImpl importDeclaration = new ImportDeclarationImpl();
    return importDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComponentDefinition createComponentDefinition()
  {
    ComponentDefinitionImpl componentDefinition = new ComponentDefinitionImpl();
    return componentDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EventDeclaration createEventDeclaration()
  {
    EventDeclarationImpl eventDeclaration = new EventDeclarationImpl();
    return eventDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InputEvent createInputEvent()
  {
    InputEventImpl inputEvent = new InputEventImpl();
    return inputEvent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EventDefinition createEventDefinition()
  {
    EventDefinitionImpl eventDefinition = new EventDefinitionImpl();
    return eventDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BasicEventDefinition createBasicEventDefinition()
  {
    BasicEventDefinitionImpl basicEventDefinition = new BasicEventDefinitionImpl();
    return basicEventDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GateDefinition createGateDefinition()
  {
    GateDefinitionImpl gateDefinition = new GateDefinitionImpl();
    return gateDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AndGate createAndGate()
  {
    AndGateImpl andGate = new AndGateImpl();
    return andGate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OrGate createOrGate()
  {
    OrGateImpl orGate = new OrGateImpl();
    return orGate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TransformationDefinition createTransformationDefinition()
  {
    TransformationDefinitionImpl transformationDefinition = new TransformationDefinitionImpl();
    return transformationDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MappingDefinition createMappingDefinition()
  {
    MappingDefinitionImpl mappingDefinition = new MappingDefinitionImpl();
    return mappingDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MappingParameter createMappingParameter()
  {
    MappingParameterImpl mappingParameter = new MappingParameterImpl();
    return mappingParameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LookupDefinition createLookupDefinition()
  {
    LookupDefinitionImpl lookupDefinition = new LookupDefinitionImpl();
    return lookupDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Variable createVariable()
  {
    VariableImpl variable = new VariableImpl();
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Assignment createAssignment()
  {
    AssignmentImpl assignment = new AssignmentImpl();
    return assignment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EventReference createEventReference()
  {
    EventReferenceImpl eventReference = new EventReferenceImpl();
    return eventReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComponentInstance createComponentInstance()
  {
    ComponentInstanceImpl componentInstance = new ComponentInstanceImpl();
    return componentInstance;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CftLanguagePackage getCftLanguagePackage()
  {
    return (CftLanguagePackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static CftLanguagePackage getPackage()
  {
    return CftLanguagePackage.eINSTANCE;
  }

} //CftLanguageFactoryImpl

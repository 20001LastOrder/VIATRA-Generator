/**
 * generated by Xtext 2.16.0
 */
package hu.bme.mit.inf.dslreasoner.faulttree.components.cftLanguage.util;

import hu.bme.mit.inf.dslreasoner.faulttree.components.cftLanguage.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see hu.bme.mit.inf.dslreasoner.faulttree.components.cftLanguage.CftLanguagePackage
 * @generated
 */
public class CftLanguageAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static CftLanguagePackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CftLanguageAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = CftLanguagePackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CftLanguageSwitch<Adapter> modelSwitch =
    new CftLanguageSwitch<Adapter>()
    {
      @Override
      public Adapter caseCftModel(CftModel object)
      {
        return createCftModelAdapter();
      }
      @Override
      public Adapter caseImportDeclaration(ImportDeclaration object)
      {
        return createImportDeclarationAdapter();
      }
      @Override
      public Adapter caseComponentDefinition(ComponentDefinition object)
      {
        return createComponentDefinitionAdapter();
      }
      @Override
      public Adapter caseEventDeclaration(EventDeclaration object)
      {
        return createEventDeclarationAdapter();
      }
      @Override
      public Adapter caseInputEvent(InputEvent object)
      {
        return createInputEventAdapter();
      }
      @Override
      public Adapter caseEventDefinition(EventDefinition object)
      {
        return createEventDefinitionAdapter();
      }
      @Override
      public Adapter caseBasicEventDefinition(BasicEventDefinition object)
      {
        return createBasicEventDefinitionAdapter();
      }
      @Override
      public Adapter caseGateDefinition(GateDefinition object)
      {
        return createGateDefinitionAdapter();
      }
      @Override
      public Adapter caseAndGate(AndGate object)
      {
        return createAndGateAdapter();
      }
      @Override
      public Adapter caseOrGate(OrGate object)
      {
        return createOrGateAdapter();
      }
      @Override
      public Adapter caseTransformationDefinition(TransformationDefinition object)
      {
        return createTransformationDefinitionAdapter();
      }
      @Override
      public Adapter caseMappingDefinition(MappingDefinition object)
      {
        return createMappingDefinitionAdapter();
      }
      @Override
      public Adapter caseMappingParameter(MappingParameter object)
      {
        return createMappingParameterAdapter();
      }
      @Override
      public Adapter caseLookupDefinition(LookupDefinition object)
      {
        return createLookupDefinitionAdapter();
      }
      @Override
      public Adapter caseVariable(Variable object)
      {
        return createVariableAdapter();
      }
      @Override
      public Adapter caseAssignment(Assignment object)
      {
        return createAssignmentAdapter();
      }
      @Override
      public Adapter caseEventReference(EventReference object)
      {
        return createEventReferenceAdapter();
      }
      @Override
      public Adapter caseComponentInstance(ComponentInstance object)
      {
        return createComponentInstanceAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.inf.dslreasoner.faulttree.components.cftLanguage.CftModel <em>Cft Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.inf.dslreasoner.faulttree.components.cftLanguage.CftModel
   * @generated
   */
  public Adapter createCftModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.inf.dslreasoner.faulttree.components.cftLanguage.ImportDeclaration <em>Import Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.inf.dslreasoner.faulttree.components.cftLanguage.ImportDeclaration
   * @generated
   */
  public Adapter createImportDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.inf.dslreasoner.faulttree.components.cftLanguage.ComponentDefinition <em>Component Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.inf.dslreasoner.faulttree.components.cftLanguage.ComponentDefinition
   * @generated
   */
  public Adapter createComponentDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.inf.dslreasoner.faulttree.components.cftLanguage.EventDeclaration <em>Event Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.inf.dslreasoner.faulttree.components.cftLanguage.EventDeclaration
   * @generated
   */
  public Adapter createEventDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.inf.dslreasoner.faulttree.components.cftLanguage.InputEvent <em>Input Event</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.inf.dslreasoner.faulttree.components.cftLanguage.InputEvent
   * @generated
   */
  public Adapter createInputEventAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.inf.dslreasoner.faulttree.components.cftLanguage.EventDefinition <em>Event Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.inf.dslreasoner.faulttree.components.cftLanguage.EventDefinition
   * @generated
   */
  public Adapter createEventDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.inf.dslreasoner.faulttree.components.cftLanguage.BasicEventDefinition <em>Basic Event Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.inf.dslreasoner.faulttree.components.cftLanguage.BasicEventDefinition
   * @generated
   */
  public Adapter createBasicEventDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.inf.dslreasoner.faulttree.components.cftLanguage.GateDefinition <em>Gate Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.inf.dslreasoner.faulttree.components.cftLanguage.GateDefinition
   * @generated
   */
  public Adapter createGateDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.inf.dslreasoner.faulttree.components.cftLanguage.AndGate <em>And Gate</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.inf.dslreasoner.faulttree.components.cftLanguage.AndGate
   * @generated
   */
  public Adapter createAndGateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.inf.dslreasoner.faulttree.components.cftLanguage.OrGate <em>Or Gate</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.inf.dslreasoner.faulttree.components.cftLanguage.OrGate
   * @generated
   */
  public Adapter createOrGateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.inf.dslreasoner.faulttree.components.cftLanguage.TransformationDefinition <em>Transformation Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.inf.dslreasoner.faulttree.components.cftLanguage.TransformationDefinition
   * @generated
   */
  public Adapter createTransformationDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.inf.dslreasoner.faulttree.components.cftLanguage.MappingDefinition <em>Mapping Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.inf.dslreasoner.faulttree.components.cftLanguage.MappingDefinition
   * @generated
   */
  public Adapter createMappingDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.inf.dslreasoner.faulttree.components.cftLanguage.MappingParameter <em>Mapping Parameter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.inf.dslreasoner.faulttree.components.cftLanguage.MappingParameter
   * @generated
   */
  public Adapter createMappingParameterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.inf.dslreasoner.faulttree.components.cftLanguage.LookupDefinition <em>Lookup Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.inf.dslreasoner.faulttree.components.cftLanguage.LookupDefinition
   * @generated
   */
  public Adapter createLookupDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.inf.dslreasoner.faulttree.components.cftLanguage.Variable <em>Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.inf.dslreasoner.faulttree.components.cftLanguage.Variable
   * @generated
   */
  public Adapter createVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.inf.dslreasoner.faulttree.components.cftLanguage.Assignment <em>Assignment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.inf.dslreasoner.faulttree.components.cftLanguage.Assignment
   * @generated
   */
  public Adapter createAssignmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.inf.dslreasoner.faulttree.components.cftLanguage.EventReference <em>Event Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.inf.dslreasoner.faulttree.components.cftLanguage.EventReference
   * @generated
   */
  public Adapter createEventReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link hu.bme.mit.inf.dslreasoner.faulttree.components.cftLanguage.ComponentInstance <em>Component Instance</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see hu.bme.mit.inf.dslreasoner.faulttree.components.cftLanguage.ComponentInstance
   * @generated
   */
  public Adapter createComponentInstanceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //CftLanguageAdapterFactory

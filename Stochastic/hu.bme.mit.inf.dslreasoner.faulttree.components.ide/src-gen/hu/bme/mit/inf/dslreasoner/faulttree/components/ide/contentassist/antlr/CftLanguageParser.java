/*
 * generated by Xtext 2.16.0
 */
package hu.bme.mit.inf.dslreasoner.faulttree.components.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import hu.bme.mit.inf.dslreasoner.faulttree.components.ide.contentassist.antlr.internal.InternalCftLanguageParser;
import hu.bme.mit.inf.dslreasoner.faulttree.components.services.CftLanguageGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class CftLanguageParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(CftLanguageGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, CftLanguageGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getCftModelAccess().getAlternatives_4(), "rule__CftModel__Alternatives_4");
			builder.put(grammarAccess.getEventDefinitionAccess().getAlternatives(), "rule__EventDefinition__Alternatives");
			builder.put(grammarAccess.getDistributionAccess().getAlternatives(), "rule__Distribution__Alternatives");
			builder.put(grammarAccess.getGateDefinitionAccess().getAlternatives(), "rule__GateDefinition__Alternatives");
			builder.put(grammarAccess.getKOfMGateDefinitionAccess().getAlternatives_2(), "rule__KOfMGateDefinition__Alternatives_2");
			builder.put(grammarAccess.getMappingDefinitionAccess().getAlternatives_8_1_0(), "rule__MappingDefinition__Alternatives_8_1_0");
			builder.put(grammarAccess.getVariableAccess().getAlternatives(), "rule__Variable__Alternatives");
			builder.put(grammarAccess.getAssignmentAccess().getAlternatives_1(), "rule__Assignment__Alternatives_1");
			builder.put(grammarAccess.getValidIdAccess().getAlternatives(), "rule__ValidId__Alternatives");
			builder.put(grammarAccess.getDoubleAccess().getAlternatives(), "rule__Double__Alternatives");
			builder.put(grammarAccess.getCftModelAccess().getGroup(), "rule__CftModel__Group__0");
			builder.put(grammarAccess.getImportDeclarationAccess().getGroup(), "rule__ImportDeclaration__Group__0");
			builder.put(grammarAccess.getComponentDefinitionAccess().getGroup(), "rule__ComponentDefinition__Group__0");
			builder.put(grammarAccess.getComponentDefinitionAccess().getGroup_3_0(), "rule__ComponentDefinition__Group_3_0__0");
			builder.put(grammarAccess.getComponentDefinitionAccess().getGroup_3_1(), "rule__ComponentDefinition__Group_3_1__0");
			builder.put(grammarAccess.getComponentDefinitionAccess().getGroup_4(), "rule__ComponentDefinition__Group_4__0");
			builder.put(grammarAccess.getInputEventAccess().getGroup(), "rule__InputEvent__Group__0");
			builder.put(grammarAccess.getBasicEventDefinitionAccess().getGroup(), "rule__BasicEventDefinition__Group__0");
			builder.put(grammarAccess.getConstantDistributionAccess().getGroup(), "rule__ConstantDistribution__Group__0");
			builder.put(grammarAccess.getExponentialDistributionAccess().getGroup(), "rule__ExponentialDistribution__Group__0");
			builder.put(grammarAccess.getAndGateDefinitionAccess().getGroup(), "rule__AndGateDefinition__Group__0");
			builder.put(grammarAccess.getOrGateDefinitionAccess().getGroup(), "rule__OrGateDefinition__Group__0");
			builder.put(grammarAccess.getKOfMGateDefinitionAccess().getGroup(), "rule__KOfMGateDefinition__Group__0");
			builder.put(grammarAccess.getKOfMGateDefinitionAccess().getGroup_2_0(), "rule__KOfMGateDefinition__Group_2_0__0");
			builder.put(grammarAccess.getTransformationDefinitionAccess().getGroup(), "rule__TransformationDefinition__Group__0");
			builder.put(grammarAccess.getMappingDefinitionAccess().getGroup(), "rule__MappingDefinition__Group__0");
			builder.put(grammarAccess.getMappingDefinitionAccess().getGroup_5(), "rule__MappingDefinition__Group_5__0");
			builder.put(grammarAccess.getMappingDefinitionAccess().getGroup_8(), "rule__MappingDefinition__Group_8__0");
			builder.put(grammarAccess.getMappingDefinitionAccess().getGroup_8_1(), "rule__MappingDefinition__Group_8_1__0");
			builder.put(grammarAccess.getLookupDefinitionAccess().getGroup(), "rule__LookupDefinition__Group__0");
			builder.put(grammarAccess.getLookupDefinitionAccess().getGroup_4(), "rule__LookupDefinition__Group_4__0");
			builder.put(grammarAccess.getAssignmentAccess().getGroup(), "rule__Assignment__Group__0");
			builder.put(grammarAccess.getEventReferenceAccess().getGroup(), "rule__EventReference__Group__0");
			builder.put(grammarAccess.getComponentInstanceAccess().getGroup(), "rule__ComponentInstance__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
			builder.put(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup(), "rule__QualifiedNameWithWildcard__Group__0");
			builder.put(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup_1(), "rule__QualifiedNameWithWildcard__Group_1__0");
			builder.put(grammarAccess.getCftModelAccess().getPackageNameAssignment_1(), "rule__CftModel__PackageNameAssignment_1");
			builder.put(grammarAccess.getCftModelAccess().getImportsAssignment_3(), "rule__CftModel__ImportsAssignment_3");
			builder.put(grammarAccess.getCftModelAccess().getComponentDefinitionsAssignment_4_0(), "rule__CftModel__ComponentDefinitionsAssignment_4_0");
			builder.put(grammarAccess.getCftModelAccess().getTransformationDefinitionsAssignment_4_1(), "rule__CftModel__TransformationDefinitionsAssignment_4_1");
			builder.put(grammarAccess.getImportDeclarationAccess().getImportedNamespaceAssignment_1(), "rule__ImportDeclaration__ImportedNamespaceAssignment_1");
			builder.put(grammarAccess.getComponentDefinitionAccess().getNameAssignment_1(), "rule__ComponentDefinition__NameAssignment_1");
			builder.put(grammarAccess.getComponentDefinitionAccess().getInputEventsAssignment_3_0_1(), "rule__ComponentDefinition__InputEventsAssignment_3_0_1");
			builder.put(grammarAccess.getComponentDefinitionAccess().getOutputEventsAssignment_3_1_1(), "rule__ComponentDefinition__OutputEventsAssignment_3_1_1");
			builder.put(grammarAccess.getComponentDefinitionAccess().getEventDefinitionsAssignment_4_0(), "rule__ComponentDefinition__EventDefinitionsAssignment_4_0");
			builder.put(grammarAccess.getInputEventAccess().getNameAssignment_0(), "rule__InputEvent__NameAssignment_0");
			builder.put(grammarAccess.getInputEventAccess().getMultipleAssignment_1(), "rule__InputEvent__MultipleAssignment_1");
			builder.put(grammarAccess.getBasicEventDefinitionAccess().getNameAssignment_0(), "rule__BasicEventDefinition__NameAssignment_0");
			builder.put(grammarAccess.getBasicEventDefinitionAccess().getDistributionAssignment_1(), "rule__BasicEventDefinition__DistributionAssignment_1");
			builder.put(grammarAccess.getConstantDistributionAccess().getPAssignment_2(), "rule__ConstantDistribution__PAssignment_2");
			builder.put(grammarAccess.getExponentialDistributionAccess().getLambdaAssignment_2(), "rule__ExponentialDistribution__LambdaAssignment_2");
			builder.put(grammarAccess.getAndGateDefinitionAccess().getNameAssignment_0(), "rule__AndGateDefinition__NameAssignment_0");
			builder.put(grammarAccess.getAndGateDefinitionAccess().getInputEventsAssignment_2(), "rule__AndGateDefinition__InputEventsAssignment_2");
			builder.put(grammarAccess.getOrGateDefinitionAccess().getNameAssignment_0(), "rule__OrGateDefinition__NameAssignment_0");
			builder.put(grammarAccess.getOrGateDefinitionAccess().getInputEventsAssignment_2(), "rule__OrGateDefinition__InputEventsAssignment_2");
			builder.put(grammarAccess.getKOfMGateDefinitionAccess().getNameAssignment_0(), "rule__KOfMGateDefinition__NameAssignment_0");
			builder.put(grammarAccess.getKOfMGateDefinitionAccess().getKAssignment_1(), "rule__KOfMGateDefinition__KAssignment_1");
			builder.put(grammarAccess.getKOfMGateDefinitionAccess().getMAssignment_2_0_1(), "rule__KOfMGateDefinition__MAssignment_2_0_1");
			builder.put(grammarAccess.getKOfMGateDefinitionAccess().getMAssignment_2_1(), "rule__KOfMGateDefinition__MAssignment_2_1");
			builder.put(grammarAccess.getKOfMGateDefinitionAccess().getInputEventsAssignment_3(), "rule__KOfMGateDefinition__InputEventsAssignment_3");
			builder.put(grammarAccess.getTransformationDefinitionAccess().getNameAssignment_1(), "rule__TransformationDefinition__NameAssignment_1");
			builder.put(grammarAccess.getTransformationDefinitionAccess().getMappingDefinitionsAssignment_3(), "rule__TransformationDefinition__MappingDefinitionsAssignment_3");
			builder.put(grammarAccess.getMappingDefinitionAccess().getTopLevelAssignment_0(), "rule__MappingDefinition__TopLevelAssignment_0");
			builder.put(grammarAccess.getMappingDefinitionAccess().getPatternAssignment_2(), "rule__MappingDefinition__PatternAssignment_2");
			builder.put(grammarAccess.getMappingDefinitionAccess().getParametersAssignment_4(), "rule__MappingDefinition__ParametersAssignment_4");
			builder.put(grammarAccess.getMappingDefinitionAccess().getParametersAssignment_5_1(), "rule__MappingDefinition__ParametersAssignment_5_1");
			builder.put(grammarAccess.getMappingDefinitionAccess().getComponentInstanceAssignment_7(), "rule__MappingDefinition__ComponentInstanceAssignment_7");
			builder.put(grammarAccess.getMappingDefinitionAccess().getLookupDefinitionsAssignment_8_1_0_0(), "rule__MappingDefinition__LookupDefinitionsAssignment_8_1_0_0");
			builder.put(grammarAccess.getMappingDefinitionAccess().getAssignmentsAssignment_8_1_0_1(), "rule__MappingDefinition__AssignmentsAssignment_8_1_0_1");
			builder.put(grammarAccess.getMappingParameterAccess().getNameAssignment(), "rule__MappingParameter__NameAssignment");
			builder.put(grammarAccess.getLookupDefinitionAccess().getMappingAssignment_1(), "rule__LookupDefinition__MappingAssignment_1");
			builder.put(grammarAccess.getLookupDefinitionAccess().getArgumentsAssignment_3(), "rule__LookupDefinition__ArgumentsAssignment_3");
			builder.put(grammarAccess.getLookupDefinitionAccess().getArgumentsAssignment_4_1(), "rule__LookupDefinition__ArgumentsAssignment_4_1");
			builder.put(grammarAccess.getLookupDefinitionAccess().getNameAssignment_7(), "rule__LookupDefinition__NameAssignment_7");
			builder.put(grammarAccess.getAssignmentAccess().getInputAssignment_0(), "rule__Assignment__InputAssignment_0");
			builder.put(grammarAccess.getAssignmentAccess().getMultipleAssignment_1_0(), "rule__Assignment__MultipleAssignment_1_0");
			builder.put(grammarAccess.getAssignmentAccess().getOutputAssignment_2(), "rule__Assignment__OutputAssignment_2");
			builder.put(grammarAccess.getEventReferenceAccess().getComponentAssignment_0(), "rule__EventReference__ComponentAssignment_0");
			builder.put(grammarAccess.getEventReferenceAccess().getEventAssignment_2(), "rule__EventReference__EventAssignment_2");
			builder.put(grammarAccess.getComponentInstanceAccess().getComponentTypeAssignment_1(), "rule__ComponentInstance__ComponentTypeAssignment_1");
			builder.put(grammarAccess.getComponentInstanceAccess().getNameAssignment_2(), "rule__ComponentInstance__NameAssignment_2");
			builder.put(grammarAccess.getComponentDefinitionAccess().getUnorderedGroup_3(), "rule__ComponentDefinition__UnorderedGroup_3");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private CftLanguageGrammarAccess grammarAccess;

	@Override
	protected InternalCftLanguageParser createParser() {
		InternalCftLanguageParser result = new InternalCftLanguageParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public CftLanguageGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(CftLanguageGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
